{"expireTime":9007200877354938000,"key":"transformer-remark-markdown-ast-3362f4aa8fc8b51b0347e94c5c3e6747-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"link","url":"#백준-알고리즘-11279번-최대-힙-c","title":null,"children":[],"data":{"hProperties":{"aria-label":"백준 알고리즘 11279번 최대 힙 c permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"linkReference","identifier":"백준 알고리즘","label":"백준 알고리즘","referenceType":"shortcut","children":[{"type":"text","value":"백준 알고리즘","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":11,"offset":11},"indent":[]}}],"position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":12,"offset":12},"indent":[]}},{"type":"text","value":" 11279번: 최대 힙 (C++)","position":{"start":{"line":2,"column":12,"offset":12},"end":{"line":2,"column":31,"offset":31},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":31,"offset":31},"indent":[]},"data":{"id":"백준-알고리즘-11279번-최대-힙-c","htmlAttributes":{"id":"백준-알고리즘-11279번-최대-힙-c"},"hProperties":{"id":"백준-알고리즘-11279번-최대-힙-c","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.acmicpc.net/problem/11279","children":[{"type":"text","value":"https://www.acmicpc.net/problem/11279","position":{"start":{"line":4,"column":1,"offset":33},"end":{"line":4,"column":38,"offset":70},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":33},"end":{"line":4,"column":38,"offset":70},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":33},"end":{"line":4,"column":38,"offset":70},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#문제","title":null,"children":[],"data":{"hProperties":{"aria-label":"문제 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"문제","position":{"start":{"line":6,"column":4,"offset":75},"end":{"line":6,"column":6,"offset":77},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":72},"end":{"line":6,"column":6,"offset":77},"indent":[]},"data":{"id":"문제","htmlAttributes":{"id":"문제"},"hProperties":{"id":"문제","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"문제","position":{"start":{"line":8,"column":3,"offset":81},"end":{"line":8,"column":5,"offset":83},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":79},"end":{"line":8,"column":7,"offset":85},"indent":[]}},{"type":"text","value":"\n널리 잘 알려진 자료구조 중 최대 힙이라는 것이 있다. 최대 힙을 이용하여 다음과 같은 연산을 지원하는 프로그램을 작성하시오.","position":{"start":{"line":8,"column":7,"offset":85},"end":{"line":9,"column":71,"offset":156},"indent":[1]}}],"position":{"start":{"line":8,"column":1,"offset":79},"end":{"line":9,"column":71,"offset":156},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"배열에 자연수 x를 넣는다.\n배열에서 가장 큰 값을 출력하고, 그 값을 배열에서 제거한다.\n프로그램은 처음에 비어있는 배열에서 시작하게 된다.","position":{"start":{"line":11,"column":1,"offset":158},"end":{"line":13,"column":29,"offset":237},"indent":[1,1]}}],"position":{"start":{"line":11,"column":1,"offset":158},"end":{"line":13,"column":29,"offset":237},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"입력","position":{"start":{"line":15,"column":3,"offset":241},"end":{"line":15,"column":5,"offset":243},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":239},"end":{"line":15,"column":7,"offset":245},"indent":[]}},{"type":"text","value":"\n첫째 줄에 연산의 개수 N(1≤N≤100,000)이 주어진다. 다음 N개의 줄에는 연산에 대한 정보를 나타내는 정수 x가 주어진다. 만약 x가 자연수라면 배열에 x라는 값을 넣는(추가하는) 연산이고, x가 0이라면 배열에서 가장 큰 값을 출력하고 그 값을 배열에서 제거하는 경우이다. 입력되는 자연수는 2^31보다 작다.","position":{"start":{"line":15,"column":7,"offset":245},"end":{"line":16,"column":180,"offset":425},"indent":[1]}}],"position":{"start":{"line":15,"column":1,"offset":239},"end":{"line":16,"column":180,"offset":425},"indent":[1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"출력","position":{"start":{"line":18,"column":3,"offset":429},"end":{"line":18,"column":5,"offset":431},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":427},"end":{"line":18,"column":7,"offset":433},"indent":[]}},{"type":"text","value":"\n입력에서 0이 주어진 회수만큼 답을 출력한다. 만약 배열이 비어 있는 경우인데 가장 큰 값을 출력하라고 한 경우에는 0을 출력하면 된다.","position":{"start":{"line":18,"column":7,"offset":433},"end":{"line":19,"column":77,"offset":510},"indent":[1]}}],"position":{"start":{"line":18,"column":1,"offset":427},"end":{"line":19,"column":77,"offset":510},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#풀이","title":null,"children":[],"data":{"hProperties":{"aria-label":"풀이 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"풀이","position":{"start":{"line":21,"column":4,"offset":515},"end":{"line":21,"column":6,"offset":517},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":512},"end":{"line":21,"column":6,"offset":517},"indent":[]},"data":{"id":"풀이","htmlAttributes":{"id":"풀이"},"hProperties":{"id":"풀이","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"이전에 정리했던 Priority Queue 를 그대로 적용해서 풀었다.","position":{"start":{"line":23,"column":1,"offset":519},"end":{"line":23,"column":40,"offset":558},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":519},"end":{"line":23,"column":40,"offset":558},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://jeonyeohun.github.io/2020/03/28/Algorithm-Analysis-Week-3-Priority-Queue.html","children":[{"type":"text","value":"Priority Queue 정리","position":{"start":{"line":25,"column":2,"offset":561},"end":{"line":25,"column":19,"offset":578},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":560},"end":{"line":25,"column":107,"offset":666},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":560},"end":{"line":25,"column":107,"offset":666},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#코드","title":null,"children":[],"data":{"hProperties":{"aria-label":"코드 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"코드","position":{"start":{"line":27,"column":4,"offset":671},"end":{"line":27,"column":6,"offset":673},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":668},"end":{"line":27,"column":6,"offset":673},"indent":[]},"data":{"id":"코드","htmlAttributes":{"id":"코드"},"hProperties":{"id":"코드","style":"position:relative;"}}},{"type":"html","lang":"cpp","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> heap_size<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">exchange</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> heap <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    heap<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    heap<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">max_heapify</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> heap <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> n<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> n<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> largest<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;=</span> heap_size <span class=\"token operator\">&amp;&amp;</span> heap<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> heap<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> largest <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> largest <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">&lt;=</span> heap_size <span class=\"token operator\">&amp;&amp;</span> heap<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> heap<span class=\"token punctuation\">[</span>largest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> largest <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>largest <span class=\"token operator\">!=</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">,</span> largest<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">max_heapify</span><span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">,</span> largest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> heap<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    heap_size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> heap_size<span class=\"token punctuation\">;</span>\n\n    heap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> heap<span class=\"token punctuation\">[</span>i<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> heap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> i<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        i <span class=\"token operator\">=</span> i<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> heap<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>heap_size <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> heap_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    heap_size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">max_heapify</span><span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">int</span> heap <span class=\"token punctuation\">[</span><span class=\"token number\">100002</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> T<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> op<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">,</span> op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":29,"column":1,"offset":675},"end":{"line":97,"column":4,"offset":1779},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":98,"column":1,"offset":1780}}}}