{"expireTime":9007200877354306000,"key":"transformer-remark-markdown-html-ast-1ecd57c1709bbb5ae2ce1bcb5a72b3fd-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.acmicpc.net/problem/10815"},"children":[{"type":"text","value":"https://www.acmicpc.net/problem/10815","position":{"start":{"line":2,"column":2,"offset":2},"end":{"line":2,"column":39,"offset":39}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":79,"offset":79}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":79,"offset":79}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"문제","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%EB%AC%B8%EC%A0%9C","aria-label":"문제 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"문제","position":{"start":{"line":4,"column":4,"offset":84},"end":{"line":4,"column":6,"offset":86}}}],"position":{"start":{"line":4,"column":1,"offset":81},"end":{"line":4,"column":6,"offset":86}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"문제","position":{"start":{"line":6,"column":3,"offset":90},"end":{"line":6,"column":5,"offset":92}}}],"position":{"start":{"line":6,"column":1,"offset":88},"end":{"line":6,"column":7,"offset":94}}},{"type":"raw","value":"<br>","position":{"start":{"line":6,"column":7,"offset":94},"end":{"line":6,"column":11,"offset":98}}},{"type":"text","value":"\n첫째 줄에 상근이가 가지고 있는 숫자 카드의 개수 N(1 ≤ N ≤ 500,000)이 주어진다. 둘째 줄에는 숫자 카드에 적혀있는 정수가 주어진다. 숫자 카드에 적혀있는 수는 -10,000,000보다 크거나 같고, 10,000,000보다 작거나 같다. 두 숫자 카드에 같은 수가 적혀있는 경우는 없다.","position":{"start":{"line":6,"column":11,"offset":98},"end":{"line":7,"column":169,"offset":267}}}],"position":{"start":{"line":6,"column":1,"offset":88},"end":{"line":7,"column":169,"offset":267}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"셋째 줄에는 M(1 ≤ M ≤ 500,000)이 주어진다. 넷째 줄에는 상근이가 가지고 있는 숫자 카드인지 아닌지를 구해야 할 M개의 정수가 주어지며, 이 수는 공백으로 구분되어져 있다. 이 수도 -10,000,000보다 크거나 같고, 10,000,000보다 작거나 같다","position":{"start":{"line":9,"column":1,"offset":269},"end":{"line":9,"column":152,"offset":420}}}],"position":{"start":{"line":9,"column":1,"offset":269},"end":{"line":9,"column":152,"offset":420}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"입력","position":{"start":{"line":11,"column":3,"offset":424},"end":{"line":11,"column":5,"offset":426}}}],"position":{"start":{"line":11,"column":1,"offset":422},"end":{"line":11,"column":7,"offset":428}}},{"type":"raw","value":"<br>","position":{"start":{"line":11,"column":7,"offset":428},"end":{"line":11,"column":11,"offset":432}}},{"type":"text","value":"\n첫째 줄에 자연수 N(1 ≤ N ≤ 100,000)이 주어진다. 다음 줄에는 N개의 정수 A","position":{"start":{"line":11,"column":11,"offset":432},"end":{"line":12,"column":52,"offset":484}}},{"type":"text","value":"[1]","position":{"start":{"line":12,"column":53,"offset":485},"end":{"line":12,"column":54,"offset":486}}},{"type":"text","value":", A","position":{"start":{"line":12,"column":55,"offset":487},"end":{"line":12,"column":58,"offset":490}}},{"type":"text","value":"[2]","position":{"start":{"line":12,"column":59,"offset":491},"end":{"line":12,"column":60,"offset":492}}},{"type":"text","value":", …, A","position":{"start":{"line":12,"column":61,"offset":493},"end":{"line":12,"column":67,"offset":499}}},{"type":"text","value":"[N]","position":{"start":{"line":12,"column":68,"offset":500},"end":{"line":12,"column":69,"offset":501}}},{"type":"text","value":"이 주어진다. 다음 줄에는 M(1 ≤ M ≤ 100,000)이 주어진다. 다음 줄에는 M개의 수들이 주어지는데, 이 수들이 A안에 존재하는지 알아내면 된다. 모든 정수의 범위는 -231 보다 크거나 같고 231보다 작다.","position":{"start":{"line":12,"column":70,"offset":502},"end":{"line":12,"column":193,"offset":625}}}],"position":{"start":{"line":11,"column":1,"offset":422},"end":{"line":12,"column":193,"offset":625}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"출력","position":{"start":{"line":14,"column":3,"offset":629},"end":{"line":14,"column":5,"offset":631}}}],"position":{"start":{"line":14,"column":1,"offset":627},"end":{"line":14,"column":7,"offset":633}}},{"type":"raw","value":"<br>","position":{"start":{"line":14,"column":7,"offset":633},"end":{"line":14,"column":11,"offset":637}}},{"type":"text","value":"\n첫째 줄에 입력으로 주어진 M개의 수에 대해서, 각 수가 적힌 숫자 카드를 상근이가 가지고 있으면 1을, 아니면 0을 공백으로 구분해 출력한다.","position":{"start":{"line":14,"column":11,"offset":637},"end":{"line":15,"column":81,"offset":718}}}],"position":{"start":{"line":14,"column":1,"offset":627},"end":{"line":15,"column":81,"offset":718}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"풀이","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%ED%92%80%EC%9D%B4","aria-label":"풀이 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"풀이","position":{"start":{"line":17,"column":4,"offset":723},"end":{"line":17,"column":6,"offset":725}}}],"position":{"start":{"line":17,"column":1,"offset":720},"end":{"line":17,"column":6,"offset":725}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"이진 탐색으로 풀면 쉽게 풀리는 문제였다. 이진 탐색은 일단 대상 배열이 정렬되어야 하기 때문에 sort 함수를 사용해서 정렬한 후에, 이진 탐색 알고리즘을 적용해서 target 값을 찾으면 true를, 아니면 false 를 반환하도록 했다.","position":{"start":{"line":19,"column":1,"offset":727},"end":{"line":19,"column":136,"offset":862}}}],"position":{"start":{"line":19,"column":1,"offset":727},"end":{"line":19,"column":136,"offset":862}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"코드","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%EC%BD%94%EB%93%9C","aria-label":"코드 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"코드","position":{"start":{"line":21,"column":4,"offset":867},"end":{"line":21,"column":6,"offset":869}}}],"position":{"start":{"line":21,"column":1,"offset":864},"end":{"line":21,"column":6,"offset":869}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n\n<span class=\"token keyword\">int</span> cards<span class=\"token punctuation\">[</span><span class=\"token number\">500001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nusing namespace std<span class=\"token punctuation\">;</span>\n\nbool <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> head <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> tail <span class=\"token operator\">=</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> mid<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">&lt;=</span> tail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">+</span> tail<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cards<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cards<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> head <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cards<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> tail <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> N<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cards<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>cards<span class=\"token punctuation\">,</span> cards<span class=\"token operator\">+</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> M<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>M<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1 \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0 \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":23,"column":1,"offset":871},"end":{"line":68,"column":4,"offset":1634}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":69,"column":1,"offset":1635}}}}