{"expireTime":9007200877354896000,"key":"transformer-remark-markdown-html-ast-29d5d90b3c362cdc4d9bd487618b4600-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":{"type":"root","children":[{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://programmers.co.kr/learn/courses/30/lessons/60058"},"children":[{"type":"text","value":"https://programmers.co.kr/learn/courses/30/lessons/60058","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":59,"offset":59}}}],"position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":59,"offset":59}}}],"position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":59,"offset":59}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":59,"offset":59}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"문제","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%EB%AC%B8%EC%A0%9C","aria-label":"문제 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"문제","position":{"start":{"line":4,"column":4,"offset":64},"end":{"line":4,"column":6,"offset":66}}}],"position":{"start":{"line":4,"column":1,"offset":61},"end":{"line":4,"column":6,"offset":66}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"카카오에 신입 개발자로 입사한 “콘”은 선배 개발자로부터 개발역량 강화를 위해 다른 개발자가 작성한 소스 코드를 분석하여 문제점을 발견하고 수정하라는 업무 과제를 받았습니다. 소스를 컴파일하여 로그를 보니 대부분 소스 코드 내 작성된 괄호가 개수는 맞지만 짝이 맞지 않은 형태로 작성되어 오류가 나는 것을 알게 되었습니다.\n수정해야 할 소스 파일이 너무 많아서 고민하던 “콘”은 소스 코드에 작성된 모든 괄호를 뽑아서 올바른 순서대로 배치된 괄호 문자열을 알려주는 프로그램을 다음과 같이 개발하려고 합니다.","position":{"start":{"line":6,"column":1,"offset":68},"end":{"line":7,"column":103,"offset":351}}}],"position":{"start":{"line":6,"column":1,"offset":68},"end":{"line":7,"column":103,"offset":351}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"용어의-정의","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%EC%9A%A9%EC%96%B4%EC%9D%98-%EC%A0%95%EC%9D%98","aria-label":"용어의 정의 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"용어의 정의","position":{"start":{"line":9,"column":5,"offset":357},"end":{"line":9,"column":11,"offset":363}}}],"position":{"start":{"line":9,"column":1,"offset":353},"end":{"line":9,"column":11,"offset":363}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"’(’ 와 ’)’ 로만 이루어진 문자열이 있을 경우, ’(’ 의 개수와 ’)’ 의 개수가 같다면 이를 균형잡힌 괄호 문자열이라고 부릅니다.\n그리고 여기에 ’(‘와 ’)‘의 괄호의 짝도 모두 맞을 경우에는 이를 올바른 괄호 문자열이라고 부릅니다.\n예를 들어, ”(()))(“와 같은 문자열은 “균형잡힌 괄호 문자열” 이지만 “올바른 괄호 문자열”은 아닙니다.\n반면에 ”(())()“와 같은 문자열은 “균형잡힌 괄호 문자열” 이면서 동시에 “올바른 괄호 문자열” 입니다.","position":{"start":{"line":11,"column":1,"offset":365},"end":{"line":14,"column":62,"offset":626}}}],"position":{"start":{"line":11,"column":1,"offset":365},"end":{"line":14,"column":62,"offset":626}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"’(’ 와 ’)’ 로만 이루어진 문자열 w가 “균형잡힌 괄호 문자열” 이라면 다음과 같은 과정을 통해 “올바른 괄호 문자열”로 변환할 수 있습니다.","position":{"start":{"line":16,"column":1,"offset":628},"end":{"line":16,"column":83,"offset":710}}}],"position":{"start":{"line":16,"column":1,"offset":628},"end":{"line":16,"column":83,"offset":710}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다.\n2. 문자열 w를 두 &quot;균형잡힌 괄호 문자열&quot; u, v로 분리합니다. 단, u는 &quot;균형잡힌 괄호 문자열&quot;로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다.\n3. 문자열 u가 &quot;올바른 괄호 문자열&quot; 이라면 문자열 v에 대해 1단계부터 다시 수행합니다.\n  3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다.\n4. 문자열 u가 &quot;올바른 괄호 문자열&quot;이 아니라면 아래 과정을 수행합니다.\n  4-1. 빈 문자열에 첫 번째 문자로 &#39;(&#39;를 붙입니다.\n  4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다.\n  4-3. &#39;)&#39;를 다시 붙입니다.\n  4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다.\n  4-5. 생성된 문자열을 반환합니다.\n&quot;균형잡힌 괄호 문자열&quot; p가 매개변수로 주어질 때, 주어진 알고리즘을 수행해 &quot;올바른 괄호 문자열&quot;로 변환한 결과를 return 하도록 solution 함수를 완성해 주세요.</code></pre></div>","position":{"start":{"line":18,"column":1,"offset":712},"end":{"line":30,"column":4,"offset":1270}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"풀이","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%ED%92%80%EC%9D%B4","aria-label":"풀이 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"풀이","position":{"start":{"line":32,"column":4,"offset":1275},"end":{"line":32,"column":6,"offset":1277}}}],"position":{"start":{"line":32,"column":1,"offset":1272},"end":{"line":32,"column":6,"offset":1277}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"BFS로 풀이하면 해결할 수 있는 문제였다. 가로세로 사이즈가 항상 같다고 생각해서 많이 꼬였는데, 이 부분을 해결했더니 쉽게 정답을 받을 수 있었다.","position":{"start":{"line":34,"column":1,"offset":1279},"end":{"line":34,"column":85,"offset":1363}}}],"position":{"start":{"line":34,"column":1,"offset":1279},"end":{"line":34,"column":85,"offset":1363}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"코드","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%EC%BD%94%EB%93%9C","aria-label":"코드 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"코드","position":{"start":{"line":36,"column":4,"offset":1368},"end":{"line":36,"column":6,"offset":1370}}}],"position":{"start":{"line":36,"column":1,"offset":1365},"end":{"line":36,"column":6,"offset":1370}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"cpppp\"><pre class=\"language-cpppp\"><code class=\"language-cpppp\">#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;deque&gt;\n#include &lt;stack&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nbool checkBalance(string p){\n    stack&lt;char&gt; stk;\n\n    for(auto c : p){\n        if (!stk.empty() &amp;&amp; stk.top() == &#39;(&#39; &amp;&amp; c == &#39;)&#39;){\n            stk.pop();\n        }\n        else{\n            stk.push(c);\n        }\n    }\n\n    return stk.empty();\n}\n\nstring makeBalance(string p){\n    deque&lt;char&gt; dq;\n    for (auto c : p){\n        dq.push_back(c);\n    }\n\n    // 1. 입력이 빈 문자열인 경우, 빈 문자열을 반환\n    if (p.compare(&quot;&quot;) == 0) return p;\n\n    // 2. 균형잡힌 괄호 문자열 u, v로 분리\n    int leftCount = 0;\n    int rightCount = 0;\n\n    string u = &quot;&quot;, v = &quot;&quot;;\n    while(!dq.empty()){\n        if (dq.front() == &#39;(&#39;) leftCount++;\n        else rightCount++;\n\n        u += dq.front();\n        dq.pop_front();\n\n        if (leftCount == rightCount) break;\n    }\n\n    v.assign(dq.begin(), dq.end());\n\n    // 3.문자열 u가 올바른 괄호 문자열인 경우\n    if (checkBalance(u)){\n        return u += makeBalance(v);\n    }\n    // 4. 문자열 u가 올바른 괄호 문자열이 아닌 경우\n    else{\n        // 4-1 빈 문자열에 &#39;(&#39; 붙인다.\n        string newString = &quot;(&quot;;\n\n        // 4-2 문자열 v에 대해 1단계부터 수행한 결과를 이어붙인다.\n        newString += makeBalance(v);\n\n        // 4-3 &#39;)&#39;를 다시 붙인다.\n        newString += &quot;)&quot;;\n\n        // 4-4 u의 첫번째, 마지막 문자를 제거한다.\n        string trimString = u.substr(1, u.size()-2);\n        deque&lt;char&gt; trimStringCpy;\n        for (auto tc : trimString){\n            trimStringCpy.push_back(tc);\n        }\n\n        // 4-4 나머지 문자열의 괄호 뱡향을 뒤집어 붙인다.\n        while(!trimStringCpy.empty()){\n\n            if(trimStringCpy.front() == &#39;)&#39;){\n                newString += &#39;(&#39;;\n            }\n            else {\n                newString += &#39;)&#39;;\n            }\n            trimStringCpy.pop_front();\n        }\n\n        // 4-5 생성된 문자열을 반환한다.\n        return newString;\n    }\n}\n\nstring solution(string p) {\n    return makeBalance(p);\n}</code></pre></div>","position":{"start":{"line":38,"column":1,"offset":1372},"end":{"line":130,"column":4,"offset":3235}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":131,"column":1,"offset":3236}}}}