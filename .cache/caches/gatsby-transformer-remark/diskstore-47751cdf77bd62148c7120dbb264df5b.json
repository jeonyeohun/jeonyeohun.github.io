{"expireTime":9007200877354311000,"key":"transformer-remark-markdown-html-ast-a0135eb0497b944d5cfd370419f41de5-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":{"type":"root","children":[{"type":"element","tagName":"h3","properties":{"id":"1011번-fly-me-to-the-alpha-centauri","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#1011%EB%B2%88-fly-me-to-the-alpha-centauri","aria-label":"1011번 fly me to the alpha centauri permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"element","tagName":"a","properties":{"href":"https://www.acmicpc.net/problem/1011"},"children":[{"type":"text","value":"1011번: Fly me to the Alpha Centauri","position":{"start":{"line":2,"column":6,"offset":6},"end":{"line":2,"column":41,"offset":41}}}],"position":{"start":{"line":2,"column":5,"offset":5},"end":{"line":2,"column":80,"offset":80}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":80,"offset":80}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">우현이는 어린 시절, 지구 외의 다른 행성에서도 인류들이 살아갈 수 있는 미래가 오리라 믿었다. 그리고 그가 지구라는 세상에 발을 내려 놓은 지 23년이 지난 지금, 세계 최연소 ASNA 우주 비행사가 되어 새로운 세계에 발을 내려 놓는 영광의 순간을 기다리고 있다.\n그가 탑승하게 될 우주선은 Alpha Centauri라는 새로운 인류의 보금자리를 개척하기 위한 대규모 생활 유지 시스템을 탑재하고 있기 때문에, 그 크기와 질량이 엄청난 이유로 최신기술력을 총 동원하여 개발한 공간이동 장치를 탑재하였다.\n하지만 이 공간이동 장치는 이동 거리를 급격하게 늘릴 경우 기계에 심각한 결함이 발생하는 단점이 있어서, 이전 작동시기에 k광년을 이동하였을 때는 k-1 , k 혹은 k+1 광년만을 다시 이동할 수 있다.\n\n예를 들어, 이 장치를 처음 작동시킬 경우 -1 , 0 , 1 광년을 이론상 이동할 수 있으나 사실상 음수 혹은 0 거리만큼의 이동은 의미가 없으므로 1 광년을 이동할 수 있으며, 그 다음에는 0 , 1 , 2 광년을 이동할 수 있는 것이다. ( 여기서 다시 2광년을 이동한다면 다음 시기엔 1, 2, 3 광년을 이동할 수 있다. ) 김우현은 공간이동 장치 작동시의 에너지 소모가 크다는 점을 잘 알고 있기 때문에 x지점에서 y지점을 향해 최소한의 작동 횟수로 이동하려 한다.\n\n하지만 y지점에 도착해서도 공간 이동장치의 안전성을 위하여 y지점에 도착하기 바로 직전의 이동거리는 반드시 1광년으로 하려 한다.\n김우현을 위해 x지점부터 정확히 y지점으로 이동하는데 필요한 공간 이동 장치 작동 횟수의 최솟값을 구하는 프로그램을 작성하라.</code></pre></div>","position":{"start":{"line":4,"column":1,"offset":82},"end":{"line":13,"column":4,"offset":901}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"접근-방법","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%EC%A0%91%EA%B7%BC-%EB%B0%A9%EB%B2%95","aria-label":"접근 방법 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"접근 방법:","position":{"start":{"line":15,"column":5,"offset":907},"end":{"line":15,"column":11,"offset":913}}}],"position":{"start":{"line":15,"column":1,"offset":903},"end":{"line":15,"column":11,"offset":913}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"아무리 생각해도 규칙이 찾아지지가 않아서 솔루션을 찾아봤다. 워프하는 거리로 봤을 때, 갈 수 있는 최대거리가 N^2만큼, 그리고 워프 횟수는 2XN-1 이 나온다. 따라서, y-x를 해서 얻은 거리를 최대 이동거리로 나누고 난 나머지가 추가로 가야하는 거리가 되는데, 이 거리는 남은 거리/워프횟수를 올림하면 구할 수 있다. 이 것을 일반화해서 풀면 쉽게 풀리는 문제였다.","position":{"start":{"line":17,"column":1,"offset":915},"end":{"line":17,"column":210,"offset":1124}}}],"position":{"start":{"line":17,"column":1,"offset":915},"end":{"line":17,"column":210,"offset":1124}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"해결 후: 솔루션을 보고 얻은 것은 for 반복문을 for(;;jum++) 로 쓰면서 while을 무한반복문으로 만들면서 i를 컨트롤해줘야하는 번거로움을 쉽게 해결한 부분이었다. 그리고 테스트 케이스도 번거롭게 for 반복문으로 돌리는게 아니라 while(t—)로 0이되면 바로 끝내는 방식으로 구성하니 훨씬 깔끔하게 코드를 만들 수 있었다. 규칙을 찾는 문제는 항상 어렵게 늦게지는데 소루션을 제시한 사람처럼 표를 만들어서 천천히 규칙을 찾아내는 방식이 좋은 것 같다.","position":{"start":{"line":19,"column":3,"offset":1128},"end":{"line":19,"column":267,"offset":1392}}}],"position":{"start":{"line":19,"column":1,"offset":1126},"end":{"line":19,"column":267,"offset":1392}}},{"type":"text","value":"\n"}],"position":{"start":{"line":19,"column":1,"offset":1126},"end":{"line":19,"column":267,"offset":1392}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"통과-코드","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%ED%86%B5%EA%B3%BC-%EC%BD%94%EB%93%9C","aria-label":"통과 코드 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"통과 코드:","position":{"start":{"line":21,"column":5,"offset":1398},"end":{"line":21,"column":11,"offset":1404}}}],"position":{"start":{"line":21,"column":1,"offset":1394},"end":{"line":21,"column":11,"offset":1404}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> t<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> x <span class=\"token operator\">>></span> y<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> y<span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이동해야하는 거리 구하기</span>\n\n        <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> jump <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>jump<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>jump<span class=\"token operator\">*</span>jump <span class=\"token operator\">></span> d<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 점프하는 최고속도 구하기</span>\n        <span class=\"token punctuation\">}</span>\n        jump<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> left <span class=\"token operator\">=</span> d <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>jump <span class=\"token operator\">*</span> jump<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 규칙대로 최대한 이동하고 남은 거리</span>\n\n        left <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>left <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>jump<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 남은거리를 최고속도로 나누고 올림하면 더 가야하는 거리가 나온다.</span>\n\n        cout <span class=\"token operator\">&lt;&lt;</span> jump <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> left <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":23,"column":1,"offset":1406},"end":{"line":53,"column":4,"offset":1978}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":54,"column":1,"offset":1979}}}}