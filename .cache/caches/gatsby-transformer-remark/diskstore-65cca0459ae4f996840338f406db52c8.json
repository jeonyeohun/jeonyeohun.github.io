{"expireTime":9007200877354311000,"key":"transformer-remark-markdown-ast-932c00b98f32320397f54bdcb9c05e43-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"참고도서: ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":7,"offset":7},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Operating System Concepts (9/E) Abraham Silberschatz, Peter B. Galvin, Greg Gagne","position":{"start":{"line":2,"column":8,"offset":8},"end":{"line":2,"column":89,"offset":89},"indent":[]}}],"position":{"start":{"line":2,"column":7,"offset":7},"end":{"line":2,"column":90,"offset":90},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":90,"offset":90},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"OSC 책과 1주차 강의는 개괄적인 concept을 중심으로 진행되었다. 컴퓨터 구조에서 많이 배웠던 부분들인데, 방학 사이에 컴퓨터 구조 내용을 많이 잊어버려서 다시 상기시키면서 공부하기에 좋은 챕터였다.","position":{"start":{"line":4,"column":1,"offset":92},"end":{"line":4,"column":116,"offset":207},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":92},"end":{"line":4,"column":116,"offset":207},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#운영체제의-정의","title":null,"children":[],"data":{"hProperties":{"aria-label":"운영체제의 정의 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"운영체제의 정의","position":{"start":{"line":6,"column":4,"offset":212},"end":{"line":6,"column":12,"offset":220},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":209},"end":{"line":6,"column":12,"offset":220},"indent":[]},"data":{"id":"운영체제의-정의","htmlAttributes":{"id":"운영체제의-정의"},"hProperties":{"id":"운영체제의-정의","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"운영체제는 무엇이다 라고 정의하기에는 운영체제가 너무나 많은 일들을 한다. 따라서 운영체제를 한마디로 정의하기 보다는 운영체제의 목적이 무엇인지, 그 쓰임새를 바탕으로 정의내리는 것이 좋을 것이다.","position":{"start":{"line":8,"column":1,"offset":222},"end":{"line":8,"column":111,"offset":332},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":222},"end":{"line":8,"column":111,"offset":332},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#사용자의-관점에서","title":null,"children":[],"data":{"hProperties":{"aria-label":"사용자의 관점에서 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"사용자의 관점에서","position":{"start":{"line":10,"column":5,"offset":338},"end":{"line":10,"column":14,"offset":347},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":334},"end":{"line":10,"column":14,"offset":347},"indent":[]},"data":{"id":"사용자의-관점에서","htmlAttributes":{"id":"사용자의-관점에서"},"hProperties":{"id":"사용자의-관점에서","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"사용자의 관점에서 운영체제는 컴퓨터의 리소스를 쉽게 사용할 수 있도록 그 환경을 제공해주는 역할을 한다. 물론 모든 컴퓨터가 그렇지는 않다. 자동차나 간단한 전자기기에 탑재된 임베디드 컴퓨터에는 운영체제가 필요할까? 이런 기기들은 주어진 입력에 대해 정확하고 반복적인 작업만 순차적으로 수행하면 되기 때문에 운영체제가 필요하지 않고 실제로도 운영체제 없이 설계되어 있다.","position":{"start":{"line":12,"column":1,"offset":349},"end":{"line":12,"column":208,"offset":556},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":349},"end":{"line":12,"column":208,"offset":556},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#시스템의-관점에서","title":null,"children":[],"data":{"hProperties":{"aria-label":"시스템의 관점에서 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"시스템의 관점에서","position":{"start":{"line":14,"column":5,"offset":562},"end":{"line":14,"column":14,"offset":571},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":558},"end":{"line":14,"column":14,"offset":571},"indent":[]},"data":{"id":"시스템의-관점에서","htmlAttributes":{"id":"시스템의-관점에서"},"hProperties":{"id":"시스템의-관점에서","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"쉽게 말해서 주어진 환경에 있는 리소스들을 시의적절하게 사용할 수 있도록 해주는 resource allocator의 역할을 운영체제가 하게된다. 컴퓨터는 주어진 컴퓨터 시스템으로만 작동되지 않고 여러 외부 리소스, 즉 외장 디바이스들과의 작업이 수행되기 때문에 리소스를 때에 따랑 잘 분배하는 것은 매우 중요한 일이다.","position":{"start":{"line":16,"column":1,"offset":573},"end":{"line":16,"column":179,"offset":751},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":573},"end":{"line":16,"column":179,"offset":751},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#정의내리기","title":null,"children":[],"data":{"hProperties":{"aria-label":"정의내리기 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"정의내리기","position":{"start":{"line":18,"column":5,"offset":757},"end":{"line":18,"column":10,"offset":762},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":753},"end":{"line":18,"column":10,"offset":762},"indent":[]},"data":{"id":"정의내리기","htmlAttributes":{"id":"정의내리기"},"hProperties":{"id":"정의내리기","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"위 내용을 바탕으로 생각해보면, 운영체제는 다음과 같이 정의할 수 있겠다.","position":{"start":{"line":20,"column":1,"offset":764},"end":{"line":20,"column":42,"offset":805},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":764},"end":{"line":20,"column":42,"offset":805},"indent":[]}},{"type":"html","value":"<center>\"다양한 소프트웨어와 하드웨어 구성요소들이 시스템에서 잘 사용될 수 있도록 돕는 프로그램\"</center><br>","position":{"start":{"line":22,"column":1,"offset":807},"end":{"line":22,"column":72,"offset":878},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"이 정의 역시도 너무나 추상적으로 느껴진다. 우리는 보통, 운영체제를 단순하게 ","position":{"start":{"line":24,"column":1,"offset":880},"end":{"line":24,"column":45,"offset":924},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"컴퓨터가 켜져있는 동안 계속 실행되는","position":{"start":{"line":24,"column":47,"offset":926},"end":{"line":24,"column":67,"offset":946},"indent":[]}}],"position":{"start":{"line":24,"column":45,"offset":924},"end":{"line":24,"column":69,"offset":948},"indent":[]}},{"type":"text","value":" 프로그램이라고 부르기도 한다. 그리고 이런 프로그램을 kernel 이라고 부른다. 운영체제와 kernel은 다르지만 운영체제 안에 kernel이 포함된다.","position":{"start":{"line":24,"column":69,"offset":948},"end":{"line":24,"column":156,"offset":1035},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":880},"end":{"line":24,"column":156,"offset":1035},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#컴퓨터-시스템","title":null,"children":[],"data":{"hProperties":{"aria-label":"컴퓨터 시스템 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"컴퓨터 시스템","position":{"start":{"line":26,"column":4,"offset":1040},"end":{"line":26,"column":11,"offset":1047},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1037},"end":{"line":26,"column":11,"offset":1047},"indent":[]},"data":{"id":"컴퓨터-시스템","htmlAttributes":{"id":"컴퓨터-시스템"},"hProperties":{"id":"컴퓨터-시스템","style":"position:relative;"}}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#컴퓨터-시스템의-동작-원리","title":null,"children":[],"data":{"hProperties":{"aria-label":"컴퓨터 시스템의 동작 원리 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"컴퓨터 시스템의 동작 원리","position":{"start":{"line":28,"column":5,"offset":1053},"end":{"line":28,"column":19,"offset":1067},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1049},"end":{"line":28,"column":19,"offset":1067},"indent":[]},"data":{"id":"컴퓨터-시스템의-동작-원리","htmlAttributes":{"id":"컴퓨터-시스템의-동작-원리"},"hProperties":{"id":"컴퓨터-시스템의-동작-원리","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"컴퓨터가 동작할 때 내부적으로 어떤 일이 일어나는지 한번 구체적으로 정리해보자.","position":{"start":{"line":30,"column":1,"offset":1069},"end":{"line":30,"column":45,"offset":1113},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1069},"end":{"line":30,"column":45,"offset":1113},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"1단계: Bootstrap Program 시작하기","position":{"start":{"line":32,"column":3,"offset":1117},"end":{"line":32,"column":30,"offset":1144},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1115},"end":{"line":32,"column":32,"offset":1146},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":32,"column":32,"offset":1146},"end":{"line":32,"column":36,"offset":1150},"indent":[]}},{"type":"text","value":"\n컴퓨터를 처음 부팅하게 되면 컴퓨터는 스스로 초기 프로그램들을 실행시킨다. 이런 프로그램들을 bootstrap program 이라고 하는데, 이 녀석들은 일반적으로 firmware라고 불리는 ROM이나 EEPROM 에 저장되어 있다. bootstrap program은 시스템을 시작시키는 역할을 하기 때문에, 운영체제의 kernel이 어디에 위치하는지 파악하고 kernel을 메모리에 넣어주는 작업을 필수적으로 해야한다.","position":{"start":{"line":32,"column":36,"offset":1150},"end":{"line":33,"column":236,"offset":1386},"indent":[1]}}],"position":{"start":{"line":32,"column":1,"offset":1115},"end":{"line":33,"column":236,"offset":1386},"indent":[1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"2단계: kernel 시작하기","position":{"start":{"line":35,"column":3,"offset":1390},"end":{"line":35,"column":19,"offset":1406},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1388},"end":{"line":35,"column":21,"offset":1408},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":35,"column":21,"offset":1408},"end":{"line":35,"column":25,"offset":1412},"indent":[]}},{"type":"text","value":"\nBootstrap program에 의해 kernel이 메모리로 옮겨지면 kernel은 시스템과 사용자에게 서비스를 제공하기 시작한다. 이때 제공되는 서비스는 kernel 내부에 들어있거나 system program에 의해 제공된다. 앞서 정의했던 대로 kernel 은 컴퓨터가 켜져있는 동안 계속 실행된다. 이때 kernel이 실행되는 동안 함께 계속 실행되는 프로그램들을 system process 혹은 system daemon 이라고 한다.","position":{"start":{"line":35,"column":25,"offset":1412},"end":{"line":36,"column":249,"offset":1661},"indent":[1]}}],"position":{"start":{"line":35,"column":1,"offset":1388},"end":{"line":36,"column":249,"offset":1661},"indent":[1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"3단계: 이벤트 기다리기","position":{"start":{"line":38,"column":3,"offset":1665},"end":{"line":38,"column":16,"offset":1678},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1663},"end":{"line":38,"column":18,"offset":1680},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":38,"column":18,"offset":1680},"end":{"line":38,"column":22,"offset":1684},"indent":[]}},{"type":"text","value":"\nKernel과 system process가 계속 실행되면, 시스템은 어떤 이벤트가 발생할 때까지 대기하게 된다. 이런 이벤트들은 주로 하드웨어나 소프트웨어에 의해 발생하는데, 하드웨어에 의해 발생하는 이벤트를 interrupt 라고 하고, 소프트웨어에 의해 발생하는 이벤트를 system call이라고 한다.","position":{"start":{"line":38,"column":22,"offset":1684},"end":{"line":39,"column":173,"offset":1857},"indent":[1]}}],"position":{"start":{"line":38,"column":1,"offset":1663},"end":{"line":39,"column":173,"offset":1857},"indent":[1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"4단계: 이벤트 처리하기","position":{"start":{"line":41,"column":3,"offset":1861},"end":{"line":41,"column":16,"offset":1874},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":1859},"end":{"line":41,"column":18,"offset":1876},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":41,"column":18,"offset":1876},"end":{"line":41,"column":22,"offset":1880},"indent":[]}},{"type":"text","value":"\ninterrupt는 대부분 system bus를 통해 CPU에게 전달되고, system call 역시도 CPU에 전달된다. CPU는 이런 이벤트 신호들을 받으면 현재 진행하던 작업을 중단하고 이벤트에 맞는 행동을 취한다. 이때 수행하는 작업을 interrupt service routine 이라고 하는데, 어떤 interrupt signal에 대해 어떤 작업을 수행할지 이미 다 지정되어 있는 테이블을 interrupt vector 라고 한다. 따라서 CPU는 신호를 받으면 이 테이블에서 바로 service routine의 위치를 참조하여 명령어들을 실행하는 것이다. 그렇다면 중단되었던 작업은 어디에 보관될까? 이 문제를 해결하기 위해서 system stack을 사용한다. system stack에는 실행되는 작업들이 순차적으로 쌓이게 되고 작업이 끝나면 stack에서 pop 되는 방식으로 사용된다.","position":{"start":{"line":41,"column":22,"offset":1880},"end":{"line":42,"column":451,"offset":2331},"indent":[1]}}],"position":{"start":{"line":41,"column":1,"offset":1859},"end":{"line":42,"column":451,"offset":2331},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"컴퓨터 시스템은 종료되기까지 위 단계를 반복적으로 실행하며 작업을 수행한다.","position":{"start":{"line":44,"column":1,"offset":2333},"end":{"line":44,"column":43,"offset":2375},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":2333},"end":{"line":44,"column":43,"offset":2375},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#저장공간-구조","title":null,"children":[],"data":{"hProperties":{"aria-label":"저장공간 구조 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"저장공간 구조","position":{"start":{"line":46,"column":5,"offset":2381},"end":{"line":46,"column":12,"offset":2388},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":2377},"end":{"line":46,"column":12,"offset":2388},"indent":[]},"data":{"id":"저장공간-구조","htmlAttributes":{"id":"저장공간-구조"},"hProperties":{"id":"저장공간-구조","style":"position:relative;"}}},{"type":"heading","depth":4,"children":[{"type":"link","url":"#main-memory","title":null,"children":[],"data":{"hProperties":{"aria-label":"main memory permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Main Memory","position":{"start":{"line":48,"column":6,"offset":2395},"end":{"line":48,"column":17,"offset":2406},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":2390},"end":{"line":48,"column":17,"offset":2406},"indent":[]},"data":{"id":"main-memory","htmlAttributes":{"id":"main-memory"},"hProperties":{"id":"main-memory","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"제일 중요하고 기억해야할 것은 컴퓨터에서 실행된는 모든 프로그램과 작업은 실행 이전에 메모리로 옮겨져야 한다는 것이다. CPU가 직접적으로 접근 할 수 있는 가장 큰 크기의 메모리가 RAM이기 때문에 우리는 RAM을 main memory라고 부른다. 메모리는 바이트 단위의 배열로 구성되어 있고 한 바이트마다 고유한 주소를 가지고 있다. CPU는 이 주소를 load 나 store 명령어를 통해 관리하면서 명령어들을 실행하게 된다.","position":{"start":{"line":50,"column":1,"offset":2408},"end":{"line":50,"column":242,"offset":2649},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":2408},"end":{"line":50,"column":242,"offset":2649},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","url":"#von-neumann-architecture","title":null,"children":[],"data":{"hProperties":{"aria-label":"von neumann architecture permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Von Neumann Architecture","position":{"start":{"line":52,"column":6,"offset":2656},"end":{"line":52,"column":30,"offset":2680},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":2651},"end":{"line":52,"column":30,"offset":2680},"indent":[]},"data":{"id":"von-neumann-architecture","htmlAttributes":{"id":"von-neumann-architecture"},"hProperties":{"id":"von-neumann-architecture","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"폰노이만 구조에서는 어떤 작업을 실행하기 위해서 메모리에 들어있는 명령어를 가져와 instruction register에 옮기는 작업을 먼저 수행한다. 그리고 instruction register 안에 들어있는 명령어들을 decoding 하는 작업을 거쳐 명령어의 연산들을 수행한다.","position":{"start":{"line":54,"column":1,"offset":2682},"end":{"line":54,"column":159,"offset":2840},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":2682},"end":{"line":54,"column":159,"offset":2840},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","url":"#volatile-memory-and-secondary-storage","title":null,"children":[],"data":{"hProperties":{"aria-label":"volatile memory and secondary storage permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Volatile memory and secondary storage","position":{"start":{"line":56,"column":6,"offset":2847},"end":{"line":56,"column":43,"offset":2884},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":2842},"end":{"line":56,"column":43,"offset":2884},"indent":[]},"data":{"id":"volatile-memory-and-secondary-storage","htmlAttributes":{"id":"volatile-memory-and-secondary-storage"},"hProperties":{"id":"volatile-memory-and-secondary-storage","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"어차피 모든 프로그램은 main memory를 거쳐야 하니, 모든 프로그램을 메모리에 저장해둔다면 너무나 편리하게 컴퓨터를 사용할 것이다. 하지만 현실은 늘 그렇듯 시궁창이다.. main memory는 거의 항상 휘발성의 특징을 가진다. 시스템의 전원을 종료시키면 메모리에 담긴 모든 정보가 사라진다는 의미이다. 엎친데 덮친격으로 main memory는 우리가 사용하는 모든 프로그램을 담기에 용량이 너무나 부족하다.","position":{"start":{"line":58,"column":1,"offset":2886},"end":{"line":58,"column":234,"offset":3119},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":2886},"end":{"line":58,"column":234,"offset":3119},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"이런 문제를 해결하기 위해서 우리는 secondary storage 라고 불리는 저장공간을 사용한다. 그리고 여기서 그치는 것이 아니라 storage hierarchy를 만들어서 용량이 작지만 속도가 빠른 휘발성 저장장치와, 속도는 느리지만 용량은 큰 비휘발성 저장장치를 함께 사용하는 방법을 고안했다.","position":{"start":{"line":60,"column":1,"offset":3121},"end":{"line":60,"column":170,"offset":3290},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":3121},"end":{"line":60,"column":170,"offset":3290},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"SSD를 최근에 많이 사용한다. HDD보다 속도가 무지막지하게 빠르다. 어떻게 만들어졌길래 이런 성능이 가능할까? SSD는 내부적으로 휘발성 저장장치를 함께 사용한다. SSD는 휘발성 저장장치를 컴퓨터가 실행되는 동안 사용하고 시스템이 종료되면 해당 저장장치에 있던 정보들을 모두 비휘발성 저장장치에 옮겨둔다. 시스템이 사직되면 다시 그 정보들을 휘발성 자장장치에 넣는 것이다. 단순하지만 아주 효과적인 방법이다.","position":{"start":{"line":62,"column":1,"offset":3292},"end":{"line":62,"column":232,"offset":3523},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":3292},"end":{"line":62,"column":232,"offset":3523},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#io-구조","title":null,"children":[],"data":{"hProperties":{"aria-label":"io 구조 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"I/O 구조","position":{"start":{"line":64,"column":4,"offset":3528},"end":{"line":64,"column":10,"offset":3534},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":3525},"end":{"line":64,"column":10,"offset":3534},"indent":[]},"data":{"id":"io-구조","htmlAttributes":{"id":"io-구조"},"hProperties":{"id":"io-구조","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"운영체제와 I/O는 뗄레야 뗄 수 없는 관계이다. 운영체제의 내부는 대부분 I/O 장치를 어떻게 관리할 것인지에 대한 내용이기 때문이다. 일반적인 컴퓨터에서는 I/O장치에 대한 제어를 위해 Device Controller 가 사용된다. 운영체제는 이 컨트롤러들에 대한 Device Driver를 포함해서 I/O 장치들이 운영체제와 잘 소통이 되도록 한다.","position":{"start":{"line":66,"column":1,"offset":3536},"end":{"line":66,"column":199,"offset":3734},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":3536},"end":{"line":66,"column":199,"offset":3734},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"CPU는 어떤 I/O 명령이 들어왔는 알아내기 위해서 device driver가 device controller에 있는 레지스터를 확인한다. 컨트롤러는 이 레지스터를 검사해서 어떤 명령어를 수행할지 결정한다. 그리고 장치로부터 오는 데이터들을 내부 local buffer를 통해 device driver에 전달한다. 이 전달하는 작업이 끝나면 device controller 는 driver에게 작업이 끝났다는 것을 interrupt signal을 사용하여 알리게 된다. 마지막으로 driver는 수행 결과에 대한 정보를 운여체제에게 전달하게 된다. 이런 방식의 I/O 명령 수행을 interrupt driven I/O 라고 부른다.","position":{"start":{"line":68,"column":1,"offset":3736},"end":{"line":68,"column":355,"offset":4090},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":3736},"end":{"line":68,"column":355,"offset":4090},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"위와 같은 방법은 크기가 큰 작업에 대해서는 적합하지 않다. 따라서 DMA(Direct Mapped Access) 방식을 사용하기도 한다. 이 방식에서는 device controller가 CPU의 개입없이 I/O 장치로부터 오는 데이터를 통채로 메모리로 옮겨버린다. 이 방법에서는 interrupt 는 메모리로 옮기는 과정을 끝냈다는 의미로 단 한번만 사용된다.","position":{"start":{"line":70,"column":1,"offset":4092},"end":{"line":70,"column":203,"offset":4294},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":4092},"end":{"line":70,"column":203,"offset":4294},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#single-processor-systems","title":null,"children":[],"data":{"hProperties":{"aria-label":"single processor systems permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Single-Processor Systems","position":{"start":{"line":72,"column":4,"offset":4299},"end":{"line":72,"column":28,"offset":4323},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":4296},"end":{"line":72,"column":28,"offset":4323},"indent":[]},"data":{"id":"single-processor-systems","htmlAttributes":{"id":"single-processor-systems"},"hProperties":{"id":"single-processor-systems","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"예전 컴퓨터들은 모두 프로세서가 하나 밖에 없었다. 따라서 CPU가 한번에 한 명령어만 수행해야했고, I/O를 효율적으로 처리하기 위해서 special-purpose processor를 만들어 주어진 작업을 처리하도록 하는 특수목적의 프로세서를 만들어 사용하기도 했다.","position":{"start":{"line":74,"column":1,"offset":4325},"end":{"line":74,"column":151,"offset":4475},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":4325},"end":{"line":74,"column":151,"offset":4475},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#multiprocessor-systems","title":null,"children":[],"data":{"hProperties":{"aria-label":"multiprocessor systems permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Multiprocessor Systems","position":{"start":{"line":76,"column":4,"offset":4480},"end":{"line":76,"column":26,"offset":4502},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":4477},"end":{"line":76,"column":26,"offset":4502},"indent":[]},"data":{"id":"multiprocessor-systems","htmlAttributes":{"id":"multiprocessor-systems"},"hProperties":{"id":"multiprocessor-systems","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"기술의 발전은 하나의 컴퓨터 시스템안에 여러 프로세서가 사용될 수 있도록 했다. 원래는 한 프로세서가 모든 작업을 해야했지만 이제 여러개의 프로세서가 일을 처리하기 때문에 전체적인 throughput이 좋아지는 효과가 있다. 그리고 동일한 갯수의 single-processor를 여러개 사용하는 것보다 공급전원의 소비량이 크게 줄어들었다.","position":{"start":{"line":78,"column":1,"offset":4504},"end":{"line":78,"column":190,"offset":4693},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":4504},"end":{"line":78,"column":190,"offset":4693},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"특히 multiprocessor system에 대해 주목해야할 점은 안정성이 크게 향상되었다는 것이다. 여러개의 프로세서를 사용하기 때문에, 한 프로세서의 일부, 혹은 전체가 마비되는 상황이 생기더라도 작업을 계속 수행할 수 있게 되었다. 이렇게 일부에 문제가 생겼을 때 작업을 이어나가는 능력을 graceful degradation 이라고 하고, 완전히 마비되어도 작업을 수행할 수 있는 능력을 fault tolerant 라고 한다. single processor 에서는 상상도 할 수 없는 일이다.","position":{"start":{"line":80,"column":1,"offset":4695},"end":{"line":80,"column":281,"offset":4975},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":4695},"end":{"line":80,"column":281,"offset":4975},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#type-of-multiprocessor-systems","title":null,"children":[],"data":{"hProperties":{"aria-label":"type of multiprocessor systems permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Type of Multiprocessor Systems","position":{"start":{"line":82,"column":4,"offset":4980},"end":{"line":82,"column":34,"offset":5010},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":4977},"end":{"line":82,"column":34,"offset":5010},"indent":[]},"data":{"id":"type-of-multiprocessor-systems","htmlAttributes":{"id":"type-of-multiprocessor-systems"},"hProperties":{"id":"type-of-multiprocessor-systems","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"Multiprocessor System의 설계를 위해서 일반적으로 두 가지 방법을 사용할 수 있다.","position":{"start":{"line":84,"column":1,"offset":5012},"end":{"line":84,"column":56,"offset":5067},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":5012},"end":{"line":84,"column":56,"offset":5067},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#asymmetric-mutiprocessing","title":null,"children":[],"data":{"hProperties":{"aria-label":"asymmetric mutiprocessing permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Asymmetric Mutiprocessing","position":{"start":{"line":86,"column":5,"offset":5073},"end":{"line":86,"column":30,"offset":5098},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":5069},"end":{"line":86,"column":30,"offset":5098},"indent":[]},"data":{"id":"asymmetric-mutiprocessing","htmlAttributes":{"id":"asymmetric-mutiprocessing"},"hProperties":{"id":"asymmetric-mutiprocessing","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"Asymmetric Multiprocessing 설계는 여러개의 프로세서들이 운용되면서 각각의 프로세서가 주어진 특정한 작업만을 수행하는 것을 의미한다. 따라서 프로세서들이 시스템의 작업상황에 맞게 유동적인 작업을 하는 것이 아니라 고정된 임무를 계속적으로 수행하는 것이다.","position":{"start":{"line":88,"column":1,"offset":5100},"end":{"line":88,"column":154,"offset":5253},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":5100},"end":{"line":88,"column":154,"offset":5253},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#symmetric-multiprocessingsmp","title":null,"children":[],"data":{"hProperties":{"aria-label":"symmetric multiprocessingsmp permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Symmetric Multiprocessing(SMP)","position":{"start":{"line":90,"column":5,"offset":5259},"end":{"line":90,"column":35,"offset":5289},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":5255},"end":{"line":90,"column":35,"offset":5289},"indent":[]},"data":{"id":"symmetric-multiprocessingsmp","htmlAttributes":{"id":"symmetric-multiprocessingsmp"},"hProperties":{"id":"symmetric-multiprocessingsmp","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"SMP 라고도 불리는 이 설계방법은 각각의 프로세서가 유동적으로 작업을 수행하는 설계이다. 운영체제가 모든 프로세서들을 관리하면서 작업을 할당해주고, 각 프로세서는 각각 캐시와 레지스터를 가지고 있다. 한가지 특징은 시스템을 구성하는 프로세서들이 모두 같은 메모리를 공유한다는 것이다. 따라서 작업이 정교하게 잘 분배되어야 한 프로세서로 모든 작업이 몰리거나, 메모리 접근에 충돌이 일어나는 일을 막을 수 있을 것이다.","position":{"start":{"line":92,"column":1,"offset":5291},"end":{"line":92,"column":235,"offset":5525},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":5291},"end":{"line":92,"column":235,"offset":5525},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#clustered-systems","title":null,"children":[],"data":{"hProperties":{"aria-label":"clustered systems permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Clustered Systems","position":{"start":{"line":94,"column":4,"offset":5530},"end":{"line":94,"column":21,"offset":5547},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":5527},"end":{"line":94,"column":21,"offset":5547},"indent":[]},"data":{"id":"clustered-systems","htmlAttributes":{"id":"clustered-systems"},"hProperties":{"id":"clustered-systems","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"Clustered System은 multiprocessor system이 좀 더 확장된 형태이다. 여러개의 나뉘어진 독자적인 컴퓨터 시스템이 네트워크를 통해 연결되어 있는 설계이다.","position":{"start":{"line":96,"column":1,"offset":5549},"end":{"line":96,"column":102,"offset":5650},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":5549},"end":{"line":96,"column":102,"offset":5650},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"일반적인 multiprocessor system처럼 clustered system도 두가지 종류로 나뉠 수 있다.","position":{"start":{"line":98,"column":1,"offset":5652},"end":{"line":98,"column":64,"offset":5715},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":5652},"end":{"line":98,"column":64,"offset":5715},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Asymmetric으로 설계된 clustered system은 하나의 시스템이 작업을 수행하고 다른 시스템들은 이 시스템에 문제가 일어나는 것을 기다리고 있는 상태이다. 만약 작업을 진행하던 시스템에 문제가 생겨서 작업이 중단되면, 해당 작업을 지켜보던 다른 시스템이 다시 시작하게 된다. 이런 대기상태를 hot-standby mode 라고 한다.","position":{"start":{"line":100,"column":1,"offset":5717},"end":{"line":100,"column":195,"offset":5911},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":5717},"end":{"line":100,"column":195,"offset":5911},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Symmetric 으로 설계된 clustered system은 두 개 이상의 시스템이 각자의 작업을 수행하면서 또 동시에 서로의 상태를 감시하는 형태의 설계이다. 이것이 가능한 이유는 symmetric clustered system 에서는 한 프로그램을 여러개로 쪼개어서 병렬적으로 작업을 수행하는 parrallelization이 가능하기 때문이다.","position":{"start":{"line":102,"column":1,"offset":5913},"end":{"line":102,"column":196,"offset":6108},"indent":[]}}],"position":{"start":{"line":102,"column":1,"offset":5913},"end":{"line":102,"column":196,"offset":6108},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":103,"column":1,"offset":6109}}}}