{"expireTime":9007200877354938000,"key":"transformer-remark-markdown-ast-623034a88f612d767471b618e4e3dd39-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.acmicpc.net/problem/6603","children":[{"type":"text","value":"https://www.acmicpc.net/problem/6603","position":{"start":{"line":2,"column":2,"offset":2},"end":{"line":2,"column":38,"offset":38},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":77,"offset":77},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":77,"offset":77},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#문제","title":null,"children":[],"data":{"hProperties":{"aria-label":"문제 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"문제","position":{"start":{"line":4,"column":4,"offset":82},"end":{"line":4,"column":6,"offset":84},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":79},"end":{"line":4,"column":6,"offset":84},"indent":[]},"data":{"id":"문제","htmlAttributes":{"id":"문제"},"hProperties":{"id":"문제","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"문제","position":{"start":{"line":6,"column":3,"offset":88},"end":{"line":6,"column":5,"offset":90},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":86},"end":{"line":6,"column":7,"offset":92},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":6,"column":7,"offset":92},"end":{"line":6,"column":11,"offset":96},"indent":[]}},{"type":"text","value":"\n독일 로또는 {1, 2, …, 49}에서 수 6개를 고른다.","position":{"start":{"line":6,"column":11,"offset":96},"end":{"line":7,"column":36,"offset":132},"indent":[1]}}],"position":{"start":{"line":6,"column":1,"offset":86},"end":{"line":7,"column":36,"offset":132},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"로또 번호를 선택하는데 사용되는 가장 유명한 전략은 49가지 수 중 k(k>6)개의 수를 골라 집합 S를 만든 다음 그 수만 가지고 번호를 선택하는 것이다.","position":{"start":{"line":9,"column":1,"offset":134},"end":{"line":9,"column":88,"offset":221},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":134},"end":{"line":9,"column":88,"offset":221},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"예를 들어, k=8, S={1,2,3,5,8,13,21,34}인 경우 이 집합 S에서 수를 고를 수 있는 경우의 수는 총 28가지이다. (","position":{"start":{"line":11,"column":1,"offset":223},"end":{"line":11,"column":78,"offset":300},"indent":[]}},{"type":"linkReference","identifier":"1,2,3,5,8,13","label":"1,2,3,5,8,13","referenceType":"shortcut","children":[{"type":"text","value":"1,2,3,5,8,13","position":{"start":{"line":11,"column":79,"offset":301},"end":{"line":11,"column":91,"offset":313},"indent":[]}}],"position":{"start":{"line":11,"column":78,"offset":300},"end":{"line":11,"column":92,"offset":314},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":11,"column":92,"offset":314},"end":{"line":11,"column":94,"offset":316},"indent":[]}},{"type":"linkReference","identifier":"1,2,3,5,8,21","label":"1,2,3,5,8,21","referenceType":"shortcut","children":[{"type":"text","value":"1,2,3,5,8,21","position":{"start":{"line":11,"column":95,"offset":317},"end":{"line":11,"column":107,"offset":329},"indent":[]}}],"position":{"start":{"line":11,"column":94,"offset":316},"end":{"line":11,"column":108,"offset":330},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":11,"column":108,"offset":330},"end":{"line":11,"column":110,"offset":332},"indent":[]}},{"type":"linkReference","identifier":"1,2,3,5,8,34","label":"1,2,3,5,8,34","referenceType":"shortcut","children":[{"type":"text","value":"1,2,3,5,8,34","position":{"start":{"line":11,"column":111,"offset":333},"end":{"line":11,"column":123,"offset":345},"indent":[]}}],"position":{"start":{"line":11,"column":110,"offset":332},"end":{"line":11,"column":124,"offset":346},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":11,"column":124,"offset":346},"end":{"line":11,"column":126,"offset":348},"indent":[]}},{"type":"linkReference","identifier":"1,2,3,5,13,21","label":"1,2,3,5,13,21","referenceType":"shortcut","children":[{"type":"text","value":"1,2,3,5,13,21","position":{"start":{"line":11,"column":127,"offset":349},"end":{"line":11,"column":140,"offset":362},"indent":[]}}],"position":{"start":{"line":11,"column":126,"offset":348},"end":{"line":11,"column":141,"offset":363},"indent":[]}},{"type":"text","value":", …, ","position":{"start":{"line":11,"column":141,"offset":363},"end":{"line":11,"column":148,"offset":370},"indent":[]}},{"type":"linkReference","identifier":"3,5,8,13,21,34","label":"3,5,8,13,21,34","referenceType":"shortcut","children":[{"type":"text","value":"3,5,8,13,21,34","position":{"start":{"line":11,"column":149,"offset":371},"end":{"line":11,"column":163,"offset":385},"indent":[]}}],"position":{"start":{"line":11,"column":148,"offset":370},"end":{"line":11,"column":164,"offset":386},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":11,"column":164,"offset":386},"end":{"line":11,"column":165,"offset":387},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":223},"end":{"line":11,"column":165,"offset":387},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"집합 S와 k가 주어졌을 때, 수를 고르는 모든 방법을 구하는 프로그램을 작성하시오.","position":{"start":{"line":13,"column":1,"offset":389},"end":{"line":13,"column":48,"offset":436},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":389},"end":{"line":13,"column":48,"offset":436},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"입력","position":{"start":{"line":15,"column":3,"offset":440},"end":{"line":15,"column":5,"offset":442},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":438},"end":{"line":15,"column":7,"offset":444},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":15,"column":7,"offset":444},"end":{"line":15,"column":11,"offset":448},"indent":[]}},{"type":"text","value":"\n입력은 여러 개의 테스트 케이스로 이루어져 있다. 각 테스트 케이스는 한 줄로 이루어져 있다. 첫 번째 수는 k (6 < k < 13)이고, 다음 k개 수는 집합 S에 포함되는 수이다. S의 원소는 오름차순으로 주어진다.","position":{"start":{"line":15,"column":11,"offset":448},"end":{"line":16,"column":124,"offset":572},"indent":[1]}}],"position":{"start":{"line":15,"column":1,"offset":438},"end":{"line":16,"column":124,"offset":572},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"입력의 마지막 줄에는 0이 하나 주어진다.","position":{"start":{"line":18,"column":1,"offset":574},"end":{"line":18,"column":24,"offset":597},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":574},"end":{"line":18,"column":24,"offset":597},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"출력","position":{"start":{"line":20,"column":3,"offset":601},"end":{"line":20,"column":5,"offset":603},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":599},"end":{"line":20,"column":7,"offset":605},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":20,"column":7,"offset":605},"end":{"line":20,"column":11,"offset":609},"indent":[]}},{"type":"text","value":"\n각 테스트 케이스마다 수를 고르는 모든 방법을 출력한다. 이때, 사전 순으로 출력한다.","position":{"start":{"line":20,"column":11,"offset":609},"end":{"line":21,"column":49,"offset":658},"indent":[1]}}],"position":{"start":{"line":20,"column":1,"offset":599},"end":{"line":21,"column":49,"offset":658},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"각 테스트 케이스 사이에는 빈 줄을 하나 출력한다.","position":{"start":{"line":23,"column":1,"offset":660},"end":{"line":23,"column":29,"offset":688},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":660},"end":{"line":23,"column":29,"offset":688},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#풀이","title":null,"children":[],"data":{"hProperties":{"aria-label":"풀이 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"풀이","position":{"start":{"line":25,"column":4,"offset":693},"end":{"line":25,"column":6,"offset":695},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":690},"end":{"line":25,"column":6,"offset":695},"indent":[]},"data":{"id":"풀이","htmlAttributes":{"id":"풀이"},"hProperties":{"id":"풀이","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"순열조합을 찾는 문제임은 분명한데, 사전 순으로 출력하고 중복을 제거해야하는 것이 핵심이었다. 일단 조합은 permutation 함수를 사용해도 되겠지만 뽑을 숫자는 6개이고, 입력으로 받는 숫자는 13개까지 나올 수 있기 때문에 고전적인 백트래킹 알고리즘이 더 구현하기에 쉬울 것 같다는 생각이 들었다. ","position":{"start":{"line":27,"column":1,"offset":697},"end":{"line":27,"column":172,"offset":868},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">중복제거+사전순</code>","position":{"start":{"line":27,"column":172,"offset":868},"end":{"line":27,"column":182,"offset":878},"indent":[]}},{"type":"text","value":" 이라는 조건을 보고 set 자료구조가 곧바로 떠올랐기 때문에 만들어진 조합을 정렬하고 set에 넣어주면 중복도 제거되고 오름차순으로 저장된다.","position":{"start":{"line":27,"column":182,"offset":878},"end":{"line":27,"column":262,"offset":958},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":697},"end":{"line":27,"column":262,"offset":958},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#코드","title":null,"children":[],"data":{"hProperties":{"aria-label":"코드 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"코드","position":{"start":{"line":29,"column":4,"offset":963},"end":{"line":29,"column":6,"offset":965},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":960},"end":{"line":29,"column":6,"offset":965},"indent":[]},"data":{"id":"코드","htmlAttributes":{"id":"코드"},"hProperties":{"id":"코드","style":"position:relative;"}}},{"type":"html","lang":"cpp","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> numbers<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> comb<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> visited<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nset<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> answer<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> temp<span class=\"token punctuation\">;</span>\n        temp<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>comb<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> comb<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        answer<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> max <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            comb<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            comb<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> s <span class=\"token operator\">:</span> answer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">:</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        comb<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        answer<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":31,"column":1,"offset":967},"end":{"line":88,"column":4,"offset":2028},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":89,"column":1,"offset":2029}}}}