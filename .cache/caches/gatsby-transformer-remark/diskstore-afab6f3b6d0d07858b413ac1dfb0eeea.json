{"expireTime":9007200877354303000,"key":"transformer-remark-markdown-html-ast-bb31b47e09980a4626318328b7f6b5d9-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.acmicpc.net/problem/1967"},"children":[{"type":"text","value":"https://www.acmicpc.net/problem/1967","position":{"start":{"line":2,"column":2,"offset":2},"end":{"line":2,"column":38,"offset":38}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":77,"offset":77}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":77,"offset":77}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"문제","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%EB%AC%B8%EC%A0%9C","aria-label":"문제 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"문제","position":{"start":{"line":4,"column":4,"offset":82},"end":{"line":4,"column":6,"offset":84}}}],"position":{"start":{"line":4,"column":1,"offset":79},"end":{"line":4,"column":6,"offset":84}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"문제","position":{"start":{"line":6,"column":3,"offset":88},"end":{"line":6,"column":5,"offset":90}}}],"position":{"start":{"line":6,"column":1,"offset":86},"end":{"line":6,"column":7,"offset":92}}},{"type":"raw","value":"<br>","position":{"start":{"line":6,"column":7,"offset":92},"end":{"line":6,"column":11,"offset":96}}}],"position":{"start":{"line":6,"column":1,"offset":86},"end":{"line":6,"column":11,"offset":96}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"용량이 다른 두 개의 빈 물통 A, B가 있다. 이 물통들에 물을 채우고 비우는 일을 반복하여 두 물통을 원하는 상태(목표하는 양의 물을 담은 상태)가 되도록 만들고자 한다. 물통 이외에는 물의 양을 정확히 잴 수 있는 방법이 없으며, 가능한 작업은 다음과 같은 세 종류가 전부이다.","position":{"start":{"line":8,"column":1,"offset":98},"end":{"line":8,"column":159,"offset":256}}}],"position":{"start":{"line":8,"column":1,"offset":98},"end":{"line":8,"column":159,"offset":256}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"[F(x): Fill x]","position":{"start":{"line":10,"column":2,"offset":259},"end":{"line":10,"column":14,"offset":271}}},{"type":"text","value":": 물통 x에 물을 가득 채운다. (물을 채우기 전에 물통 x가 비어있는지 여부는 관계없음. 다른 물통은 그대로 둠)\n","position":{"start":{"line":10,"column":15,"offset":272},"end":{"line":11,"column":1,"offset":338}}},{"type":"text","value":"[E(x): Empty x]","position":{"start":{"line":11,"column":2,"offset":339},"end":{"line":11,"column":15,"offset":352}}},{"type":"text","value":": 물통 x의 물을 모두 버린다. (다른 물통은 그대로 둠)\n","position":{"start":{"line":11,"column":16,"offset":353},"end":{"line":12,"column":1,"offset":387}}},{"type":"text","value":"[M(x,y): Move water from x to y)]","position":{"start":{"line":12,"column":2,"offset":388},"end":{"line":12,"column":33,"offset":419}}},{"type":"text","value":": 물통 x의 물을 물통 y에 붓는다. 이때 만약 물통 x에 남아 있는 물의 양이 물통 y에 남아 있는 빈 공간보다 적거나 같다면 물통 x의 물을 물통 y에 모두 붓는다. 만약 물통 x에 남아 있는 물의 양이 물통 y에 남아 있는 빈 공간보다 많다면 부을 수 있는 만큼 최대로 부어 물통 y를 꽉 채우고 나머지는 물통 x에 남긴다.\n예를 들어, 물통 A와 B의 용량이 각각 2리터와 5리터라고 하자. 두 물통 모두 빈 상태에서 시작하여 최종적으로 물통 A에는 2리터, 물통 B에는 4리터 물을 남기길 원할 경우, 다음과 같은 순서로 작업을 수행하면 총 8회의 작업으로 원하는 상태에 도달할 수 있다.","position":{"start":{"line":12,"column":34,"offset":420},"end":{"line":13,"column":150,"offset":755}}}],"position":{"start":{"line":10,"column":1,"offset":258},"end":{"line":13,"column":150,"offset":755}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"(0,0)→","position":{"start":{"line":15,"column":1,"offset":757},"end":{"line":15,"column":7,"offset":763}}},{"type":"text","value":"[F(B)]","position":{"start":{"line":15,"column":8,"offset":764},"end":{"line":15,"column":12,"offset":768}}},{"type":"text","value":"→(0,5)→","position":{"start":{"line":15,"column":13,"offset":769},"end":{"line":15,"column":20,"offset":776}}},{"type":"text","value":"[M(B,A)]","position":{"start":{"line":15,"column":21,"offset":777},"end":{"line":15,"column":27,"offset":783}}},{"type":"text","value":"→(2,3)→","position":{"start":{"line":15,"column":28,"offset":784},"end":{"line":15,"column":35,"offset":791}}},{"type":"text","value":"[E(A)]","position":{"start":{"line":15,"column":36,"offset":792},"end":{"line":15,"column":40,"offset":796}}},{"type":"text","value":"→(0,3)→","position":{"start":{"line":15,"column":41,"offset":797},"end":{"line":15,"column":48,"offset":804}}},{"type":"text","value":"[M(B,A)]","position":{"start":{"line":15,"column":49,"offset":805},"end":{"line":15,"column":55,"offset":811}}},{"type":"text","value":"→(2,1)→","position":{"start":{"line":15,"column":56,"offset":812},"end":{"line":15,"column":63,"offset":819}}},{"type":"text","value":"[E(A)]","position":{"start":{"line":15,"column":64,"offset":820},"end":{"line":15,"column":68,"offset":824}}},{"type":"text","value":"→(0,1)→","position":{"start":{"line":15,"column":69,"offset":825},"end":{"line":15,"column":76,"offset":832}}},{"type":"text","value":"[M(B,A)]","position":{"start":{"line":15,"column":77,"offset":833},"end":{"line":15,"column":83,"offset":839}}},{"type":"text","value":"→(1,0)→","position":{"start":{"line":15,"column":84,"offset":840},"end":{"line":15,"column":91,"offset":847}}},{"type":"text","value":"[F(B)]","position":{"start":{"line":15,"column":92,"offset":848},"end":{"line":15,"column":96,"offset":852}}},{"type":"text","value":"→(1,5)→","position":{"start":{"line":15,"column":97,"offset":853},"end":{"line":15,"column":104,"offset":860}}},{"type":"text","value":"[M(B,A)]","position":{"start":{"line":15,"column":105,"offset":861},"end":{"line":15,"column":111,"offset":867}}},{"type":"text","value":"→(2,4)","position":{"start":{"line":15,"column":112,"offset":868},"end":{"line":15,"column":118,"offset":874}}}],"position":{"start":{"line":15,"column":1,"offset":757},"end":{"line":15,"column":118,"offset":874}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"하지만, 작업 순서를 아래와 같이 한다면 필요한 작업 총 수가 5회가 된다.","position":{"start":{"line":17,"column":1,"offset":876},"end":{"line":17,"column":43,"offset":918}}}],"position":{"start":{"line":17,"column":1,"offset":876},"end":{"line":17,"column":43,"offset":918}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"(0,0)→","position":{"start":{"line":19,"column":1,"offset":920},"end":{"line":19,"column":7,"offset":926}}},{"type":"text","value":"[F(A)]","position":{"start":{"line":19,"column":8,"offset":927},"end":{"line":19,"column":12,"offset":931}}},{"type":"text","value":"→(2,0)→","position":{"start":{"line":19,"column":13,"offset":932},"end":{"line":19,"column":20,"offset":939}}},{"type":"text","value":"[M(A,B)]","position":{"start":{"line":19,"column":21,"offset":940},"end":{"line":19,"column":27,"offset":946}}},{"type":"text","value":"→(0,2)→","position":{"start":{"line":19,"column":28,"offset":947},"end":{"line":19,"column":35,"offset":954}}},{"type":"text","value":"[F(A)]","position":{"start":{"line":19,"column":36,"offset":955},"end":{"line":19,"column":40,"offset":959}}},{"type":"text","value":"→(2,2)→","position":{"start":{"line":19,"column":41,"offset":960},"end":{"line":19,"column":48,"offset":967}}},{"type":"text","value":"[M(A,B)]","position":{"start":{"line":19,"column":49,"offset":968},"end":{"line":19,"column":55,"offset":974}}},{"type":"text","value":"→(0,4)→","position":{"start":{"line":19,"column":56,"offset":975},"end":{"line":19,"column":63,"offset":982}}},{"type":"text","value":"[F(A)]","position":{"start":{"line":19,"column":64,"offset":983},"end":{"line":19,"column":68,"offset":987}}},{"type":"text","value":"→(2,4)","position":{"start":{"line":19,"column":69,"offset":988},"end":{"line":19,"column":75,"offset":994}}}],"position":{"start":{"line":19,"column":1,"offset":920},"end":{"line":19,"column":75,"offset":994}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"두 물통의 용량과 원하는 최종 상태를 입력으로 받은 후, 두 물통이 비어 있는 상태에서 시작하여 최종 상태에 도달하기 위한 최소 작업 수를 구하는 프로그램을 작성하시오.","position":{"start":{"line":21,"column":1,"offset":996},"end":{"line":21,"column":95,"offset":1090}}}],"position":{"start":{"line":21,"column":1,"offset":996},"end":{"line":21,"column":95,"offset":1090}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"입력","position":{"start":{"line":23,"column":3,"offset":1094},"end":{"line":23,"column":5,"offset":1096}}}],"position":{"start":{"line":23,"column":1,"offset":1092},"end":{"line":23,"column":7,"offset":1098}}},{"type":"raw","value":"<br>","position":{"start":{"line":23,"column":7,"offset":1098},"end":{"line":23,"column":11,"offset":1102}}}],"position":{"start":{"line":23,"column":1,"offset":1092},"end":{"line":23,"column":11,"offset":1102}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"표준 입력으로 물통 A의 용량을 나타내는 정수 a(1 ≤ a < 100,000), 물통 B의 용량을 나타내는 정수 b(a < b ≤ 100,000), 최종 상태에서 물통 A에 남겨야 하는 물의 용량을 나타내는 정수 c(0 ≤ c ≤ a), 최종 상태에서 물통 B에 남겨야 하는 물의 용량을 나타내는 정수 d(0 ≤ d ≤ b)가 공백으로 분리되어 한 줄에 주어진다.","position":{"start":{"line":25,"column":1,"offset":1104},"end":{"line":25,"column":205,"offset":1308}}}],"position":{"start":{"line":25,"column":1,"offset":1104},"end":{"line":25,"column":205,"offset":1308}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"출력","position":{"start":{"line":27,"column":3,"offset":1312},"end":{"line":27,"column":5,"offset":1314}}}],"position":{"start":{"line":27,"column":1,"offset":1310},"end":{"line":27,"column":7,"offset":1316}}},{"type":"raw","value":"<br>","position":{"start":{"line":27,"column":7,"offset":1316},"end":{"line":27,"column":11,"offset":1320}}}],"position":{"start":{"line":27,"column":1,"offset":1310},"end":{"line":27,"column":11,"offset":1320}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"목표 상태에 도달하는 최소 작업 수를 나타내는 정수를 표준 출력으로 출력한다. 만약 목표 상태에 도달하는 방법이 없다면 –1을 출력한다.","position":{"start":{"line":29,"column":1,"offset":1322},"end":{"line":29,"column":77,"offset":1398}}}],"position":{"start":{"line":29,"column":1,"offset":1322},"end":{"line":29,"column":77,"offset":1398}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"풀이","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%ED%92%80%EC%9D%B4","aria-label":"풀이 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"풀이","position":{"start":{"line":31,"column":4,"offset":1403},"end":{"line":31,"column":6,"offset":1405}}}],"position":{"start":{"line":31,"column":1,"offset":1400},"end":{"line":31,"column":6,"offset":1405}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"시도할 수 있는 행동 6개를 정의하고 하나씩 물통에 적용해본다. 그런데 방문여부를 체크하는 visit 배열을 기존 bfs 처럼 사용하면 최대 100000 X 100000 의 메모리가 필요하기 때문에 메모리 초과를 만나게 된다. 따라서 이번 문제에서는 set을 사용해서 방문여부를 체크하는 방법으로 해결할 수 있었다. 다른 사람들의 문제풀이를 보니 수학적으로 접근해서 푼 경우가 많던데 사실 봐도 잘 모르겠다..","position":{"start":{"line":33,"column":1,"offset":1407},"end":{"line":33,"column":230,"offset":1636}}}],"position":{"start":{"line":33,"column":1,"offset":1407},"end":{"line":33,"column":230,"offset":1636}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"코드","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%EC%BD%94%EB%93%9C","aria-label":"코드 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"코드","position":{"start":{"line":35,"column":4,"offset":1641},"end":{"line":35,"column":6,"offset":1643}}}],"position":{"start":{"line":35,"column":1,"offset":1638},"end":{"line":35,"column":6,"offset":1643}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span>\n\nusing namespace std<span class=\"token punctuation\">;</span>\n\npair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">fillBucket</span><span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\npair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">emptyBucket</span><span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\npair<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">moveXtoY</span><span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> x<span class=\"token punctuation\">,</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;=</span> y<span class=\"token punctuation\">.</span>second <span class=\"token operator\">-</span> y<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        y<span class=\"token punctuation\">.</span>first <span class=\"token operator\">+=</span> x<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n        x<span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        x<span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>first <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span>second <span class=\"token operator\">-</span> y<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        y<span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> y<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> A<span class=\"token punctuation\">,</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> B<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> targetA<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> targetB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    queue<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> bucketStatus<span class=\"token punctuation\">;</span>\n    set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> visited<span class=\"token punctuation\">[</span><span class=\"token number\">100001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    bucketStatus<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> A<span class=\"token punctuation\">,</span> B <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> depth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bucketStatus<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">size_t</span> size <span class=\"token operator\">=</span> bucketStatus<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> currA <span class=\"token operator\">=</span> bucketStatus<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n            pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> currB <span class=\"token operator\">=</span> bucketStatus<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n            bucketStatus<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currA<span class=\"token punctuation\">.</span>first <span class=\"token operator\">==</span> targetA <span class=\"token operator\">&amp;&amp;</span> currB<span class=\"token punctuation\">.</span>first <span class=\"token operator\">==</span> targetB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> depth<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">auto</span> fillA <span class=\"token operator\">=</span> <span class=\"token function\">fillBucket</span><span class=\"token punctuation\">(</span>currA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">auto</span> fillB <span class=\"token operator\">=</span> <span class=\"token function\">fillBucket</span><span class=\"token punctuation\">(</span>currB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">auto</span> emptyA <span class=\"token operator\">=</span> <span class=\"token function\">emptyBucket</span><span class=\"token punctuation\">(</span>currA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">auto</span> emptyB <span class=\"token operator\">=</span> <span class=\"token function\">emptyBucket</span><span class=\"token punctuation\">(</span>currB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">auto</span> moveX <span class=\"token operator\">=</span> <span class=\"token function\">moveXtoY</span><span class=\"token punctuation\">(</span>currA<span class=\"token punctuation\">,</span> currB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">auto</span> moveY <span class=\"token operator\">=</span> <span class=\"token function\">moveXtoY</span><span class=\"token punctuation\">(</span>currB<span class=\"token punctuation\">,</span> currA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>fillA<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>currB<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> visited<span class=\"token punctuation\">[</span>fillA<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                visited<span class=\"token punctuation\">[</span>fillA<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>currB<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                bucketStatus<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> fillA<span class=\"token punctuation\">,</span> currB <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>currA<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>fillB<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> visited<span class=\"token punctuation\">[</span>currA<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                visited<span class=\"token punctuation\">[</span>currA<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>fillB<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                bucketStatus<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> currA<span class=\"token punctuation\">,</span> fillB <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>emptyA<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>currB<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> visited<span class=\"token punctuation\">[</span>emptyA<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                visited<span class=\"token punctuation\">[</span>emptyA<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>currB<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                bucketStatus<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> emptyA<span class=\"token punctuation\">,</span> currB <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>currA<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>emptyB<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> visited<span class=\"token punctuation\">[</span>currA<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                visited<span class=\"token punctuation\">[</span>currA<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>emptyB<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                bucketStatus<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> currA<span class=\"token punctuation\">,</span> emptyB <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>moveX<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>moveX<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> visited<span class=\"token punctuation\">[</span>moveX<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                visited<span class=\"token punctuation\">[</span>moveX<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>moveX<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                bucketStatus<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>moveX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>moveY<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>moveY<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> visited<span class=\"token punctuation\">[</span>moveY<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                visited<span class=\"token punctuation\">[</span>moveY<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>moveY<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                bucketStatus<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> moveY<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">,</span> moveY<span class=\"token punctuation\">.</span>first <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        depth<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> targetA<span class=\"token punctuation\">,</span> targetB<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b <span class=\"token operator\">>></span> targetA <span class=\"token operator\">>></span> targetB<span class=\"token punctuation\">;</span>\n\n    pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> A <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> a <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> B <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> targetA<span class=\"token punctuation\">,</span> targetB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":37,"column":1,"offset":1645},"end":{"line":132,"column":4,"offset":4687}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":133,"column":1,"offset":4688}}}}