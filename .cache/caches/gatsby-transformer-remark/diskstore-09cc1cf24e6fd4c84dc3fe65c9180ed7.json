{"expireTime":9007200877354938000,"key":"transformer-remark-markdown-ast-94cca2ea682c8dd14093bb550b1d18d7-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.acmicpc.net/problem/1520","children":[{"type":"text","value":"https://www.acmicpc.net/problem/1520","position":{"start":{"line":2,"column":2,"offset":2},"end":{"line":2,"column":38,"offset":38},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":77,"offset":77},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":77,"offset":77},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#문제","title":null,"children":[],"data":{"hProperties":{"aria-label":"문제 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"문제","position":{"start":{"line":4,"column":4,"offset":82},"end":{"line":4,"column":6,"offset":84},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":79},"end":{"line":4,"column":6,"offset":84},"indent":[]},"data":{"id":"문제","htmlAttributes":{"id":"문제"},"hProperties":{"id":"문제","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"문제","position":{"start":{"line":6,"column":3,"offset":88},"end":{"line":6,"column":5,"offset":90},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":86},"end":{"line":6,"column":7,"offset":92},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":6,"column":7,"offset":92},"end":{"line":6,"column":11,"offset":96},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":86},"end":{"line":6,"column":11,"offset":96},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"여행을 떠난 세준이는 지도를 하나 구하였다. 이 지도는 아래 그림과 같이 직사각형 모양이며 여러 칸으로 나뉘어져 있다. 한 칸은 한 지점을 나타내는데 각 칸에는 그 지점의 높이가 쓰여 있으며, 각 지점 사이의 이동은 지도에서 상하좌우 이웃한 곳끼리만 가능하다.","position":{"start":{"line":8,"column":1,"offset":98},"end":{"line":8,"column":146,"offset":243},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":98},"end":{"line":8,"column":146,"offset":243},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://www.acmicpc.net/upload/201004/1.PNG","alt":"1","position":{"start":{"line":10,"column":1,"offset":245},"end":{"line":10,"column":50,"offset":294},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":245},"end":{"line":10,"column":50,"offset":294},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"현재 제일 왼쪽 위 칸이 나타내는 지점에 있는 세준이는 제일 오른쪽 아래 칸이 나타내는 지점으로 가려고 한다. 그런데 가능한 힘을 적게 들이고 싶어 항상 높이가 더 낮은 지점으로만 이동하여 목표 지점까지 가고자 한다. 위와 같은 지도에서는 다음과 같은 세 가지 경로가 가능하다.","position":{"start":{"line":12,"column":1,"offset":296},"end":{"line":12,"column":156,"offset":451},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":296},"end":{"line":12,"column":156,"offset":451},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://www.acmicpc.net/upload/201004/2.png","alt":"2","position":{"start":{"line":14,"column":1,"offset":453},"end":{"line":14,"column":50,"offset":502},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":14,"column":50,"offset":502},"end":{"line":15,"column":1,"offset":503},"indent":[1]}},{"type":"image","title":null,"url":"https://www.acmicpc.net/upload/201004/3.PNG","alt":"3","position":{"start":{"line":15,"column":1,"offset":503},"end":{"line":15,"column":50,"offset":552},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":453},"end":{"line":15,"column":50,"offset":552},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"지도가 주어질 때 이와 같이 제일 왼쪽 위 지점에서 출발하여 제일 오른쪽 아래 지점까지 항상 내리막길로만 이동하는 경로의 개수를 구하는 프로그램을 작성하시오.","position":{"start":{"line":17,"column":1,"offset":554},"end":{"line":17,"column":89,"offset":642},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":554},"end":{"line":17,"column":89,"offset":642},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"입력","position":{"start":{"line":19,"column":3,"offset":646},"end":{"line":19,"column":5,"offset":648},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":644},"end":{"line":19,"column":7,"offset":650},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":19,"column":7,"offset":650},"end":{"line":19,"column":11,"offset":654},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":644},"end":{"line":19,"column":11,"offset":654},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"첫째 줄에는 지도의 세로의 크기 M과 가로의 크기 N이 빈칸을 사이에 두고 주어진다. 이어 다음 M개 줄에 걸쳐 한 줄에 N개씩 위에서부터 차례로 각 지점의 높이가 빈 칸을 사이에 두고 주어진다. M과 N은 각각 500이하의 자연수이고, 각 지점의 높이는 10000이하의 자연수이다.","position":{"start":{"line":21,"column":1,"offset":656},"end":{"line":21,"column":159,"offset":814},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":656},"end":{"line":21,"column":159,"offset":814},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"출력","position":{"start":{"line":23,"column":3,"offset":818},"end":{"line":23,"column":5,"offset":820},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":816},"end":{"line":23,"column":7,"offset":822},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":23,"column":7,"offset":822},"end":{"line":23,"column":11,"offset":826},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":816},"end":{"line":23,"column":11,"offset":826},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"첫째 줄에 이동 가능한 경로의 수 H를 출력한다. 모든 입력에 대하여 H는 10억 이하의 음이 아닌 정수이다.","position":{"start":{"line":25,"column":1,"offset":828},"end":{"line":25,"column":62,"offset":889},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":828},"end":{"line":25,"column":62,"offset":889},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#풀이","title":null,"children":[],"data":{"hProperties":{"aria-label":"풀이 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"풀이","position":{"start":{"line":27,"column":4,"offset":894},"end":{"line":27,"column":6,"offset":896},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":891},"end":{"line":27,"column":6,"offset":896},"indent":[]},"data":{"id":"풀이","htmlAttributes":{"id":"풀이"},"hProperties":{"id":"풀이","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"처음에는 다이나믹 프로그래밍으로 풀려고 했지만, 계속 반례가 나오거나 시간초과가 나와서 끙끙대던 중, 블로그를 통해 dfs와 dp를 함께 써야된다는 것을 알게되었다. 어떤 지점에서 목적지까지 도착할 수 있는 경우의 수는 dfs를 통해서 쉽게 알아낼 수 있다. 이를 이용해서 각 지점에서 가능한 경우의 수를 구하고 그 경우의 수를 모두 더하면 목적지까지 갈 수 있는 경우의 수를 알아낼 수 있다.","position":{"start":{"line":29,"column":1,"offset":898},"end":{"line":29,"column":221,"offset":1118},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":898},"end":{"line":29,"column":221,"offset":1118},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#코드","title":null,"children":[],"data":{"hProperties":{"aria-label":"코드 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"코드","position":{"start":{"line":31,"column":4,"offset":1123},"end":{"line":31,"column":6,"offset":1125},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1120},"end":{"line":31,"column":6,"offset":1125},"indent":[]},"data":{"id":"코드","htmlAttributes":{"id":"코드"},"hProperties":{"id":"코드","style":"position:relative;"}}},{"type":"html","lang":"cpp","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token string\">' '</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> M<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> map<span class=\"token punctuation\">[</span><span class=\"token number\">501</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">501</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> visited<span class=\"token punctuation\">[</span><span class=\"token number\">501</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">501</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">501</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">501</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">isMovePossible</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> row <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> row <span class=\"token operator\">&lt;=</span> M <span class=\"token operator\">&amp;&amp;</span> col <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> col <span class=\"token operator\">&lt;=</span> N<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> rowDir<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> colDir<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 목적지까지 갈 수 있는 경로가 있다면 경우의 수를 하나 추가하기 위해 1을 반환한다.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>row <span class=\"token operator\">==</span> M <span class=\"token operator\">&amp;&amp;</span> col <span class=\"token operator\">==</span> N<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        visited<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> nextRow <span class=\"token operator\">=</span> row <span class=\"token operator\">+</span> rowDir<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> nextCol <span class=\"token operator\">=</span> col <span class=\"token operator\">+</span> colDir<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isMovePossible</span><span class=\"token punctuation\">(</span>nextRow<span class=\"token punctuation\">,</span> nextCol<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> map<span class=\"token punctuation\">[</span>nextRow<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>nextCol<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                dp<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>nextRow<span class=\"token punctuation\">,</span> nextCol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    cin <span class=\"token operator\">>></span> M <span class=\"token operator\">>></span> N<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> M<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> N<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            cin <span class=\"token operator\">>></span> map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":33,"column":1,"offset":1127},"end":{"line":96,"column":4,"offset":2190},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":97,"column":1,"offset":2191}}}}