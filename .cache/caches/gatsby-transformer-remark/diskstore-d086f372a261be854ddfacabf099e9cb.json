{"expireTime":9007200877354311000,"key":"transformer-remark-markdown-html-945ea1d7dcb84d55ca5d0def850ea20e-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":"<h1 id=\"designing-database\" style=\"position:relative;\"><a href=\"#designing-database\" aria-label=\"designing database permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Designing Database</h1>\n<p>데이터베이스를 설계하는 과정은 몇가지 과정으로 나뉘어진다.</p>\n<ol>\n<li>Data need 파악</li>\n<li>Data Model 선택 > Conceptual Schema 파악 > functional requirement 고민</li>\n<li>\n<p>Database 구현</p>\n<ul>\n<li>Logical Design: security, CS, business</li>\n<li>Physocal Design: physical layout</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"rdbms-설계-원칙\" style=\"position:relative;\"><a href=\"#rdbms-%EC%84%A4%EA%B3%84-%EC%9B%90%EC%B9%99\" aria-label=\"rdbms 설계 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RDBMS 설계 원칙</h2>\n<ol>\n<li>Redundancy: 데이터가 중복되어 있으면 안된다. 똑같은 값이 여러군데에 들어있다면 업데이트할 때 모든 부분을 다 찾아서 업데이트해야되는 상황이 발생한다. 잘못되면 같은 데이터인데 값이 다 다르게 될 수도 있다. 이런 문제를 data inconsustency라고 한다.</li>\n<li>Incompleteness: 우리가 데이터베이스로 표현하려고 하는 것들이 완벽하게 표현이 가능한지 아는 것이 중요하다.</li>\n</ol>\n<h1 id=\"e-r-diagramentity-relation-diagram\" style=\"position:relative;\"><a href=\"#e-r-diagramentity-relation-diagram\" aria-label=\"e r diagramentity relation diagram permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>E-R Diagram(Entity-Relation Diagram)</h1>\n<p>데이터베이스 스키마를 표현하는 방법으로 우리는 쿼리를 계속 사용했지만, 시각적으로 표현하는 것도 가능하다.</p>\n<h2 id=\"entity-sets\" style=\"position:relative;\"><a href=\"#entity-sets\" aria-label=\"entity sets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Entity Sets</h2>\n<p>Entity는 데이터를 표현하는 것이다. 데이터베이스에서 우리가 나타내는 tuple이 entity에 속한다.</p>\n<p>Entity Set 은 결국 record의 집합이기 때문에 table이나 tuple의 집합을 Entity Set 이라고 말 할 수 있다.</p>\n<p>그림으로 entity set은 다음과 같이 표현한다. 그림안에 밑줄이 그어져 있으면 Primary Key의 표현이라는 것도 기억하자.</p>\n<p><img src=\"https://www.onda-dias.eu/cms/wp-content/uploads/2019/04/fig1-EDM-500x358.png\"></p>\n<h2 id=\"relationship-sets\" style=\"position:relative;\"><a href=\"#relationship-sets\" aria-label=\"relationship sets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Relationship Sets</h2>\n<p>Relation은 Entity 사이에 어떤 관계가 있는지 표현하는 것이다.</p>\n<p>Relation Set은 두 개 이상의 Entity들 사이에서 어떤 relationship 성립하는지 나타내는 것이다.</p>\n<p><img src=\"https://image.slidesharecdn.com/10287lecture52-141217064304-conversion-gate02/95/10287-lecture52-31-638.jpg?cb=1418798692\"></p>\n<p>위 그림에서 중간에 나타나는 advisor와 date가 양쪽 entity set에 대한 relation이다. 추가적인 attribute 도 relationship에 추가할 수 있는데, 위 예시에서는 date 가 attribute로 추가된 경우이다.</p>\n<h2 id=\"composite-attribute\" style=\"position:relative;\"><a href=\"#composite-attribute\" aria-label=\"composite attribute permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Composite Attribute</h2>\n<p>여러개의 attribute가 합쳐져서 하나의 attribute를 이루는 경우를 Composite attribute 라고 한다.</p>\n<p><img src=\"https://slideplayer.com/slide/6622410/23/assets/post_images/4/Example+of+a+composite+attribute.jpg\"></p>\n<p>위처럼 복합적으로 구성되어 있는 attribute를 ER 다이어그램에 표기할 때는 아래 그림 처럼 indentation으로 구분하여 표기 한다.</p>\n<p><img src=\"https://image.slidesharecdn.com/ch-3-140902100601-phpapp02/95/er-model-7-638.jpg?cb=1409652680\"></p>\n<h2 id=\"mapping-cardinality-constraints\" style=\"position:relative;\"><a href=\"#mapping-cardinality-constraints\" aria-label=\"mapping cardinality constraints permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mapping Cardinality Constraints</h2>\n<p>사실 entity 나 relationship이 중요한게 아니라 둘 사이의 관계가 어떤 형태로 이루어져 있는지 아는 것이 더 중요하다.</p>\n<p>두 Entity Set의 관계는 relationship이 최소 몇개에 대해 이루어질 수 있는지에 따라 달라진다. 우리는 어떤 Entity set 이 항상 하나의 대응되는 relationship을 가질 때, 화살표로 표기하고, 여러개의 relationship을 가질 수 있다면 일반 직선으로 표기한다.</p>\n<p>기억해야 할 부분은 many 유형은 0 이상이기 때문에 꼭 어떤 relationship을 가지지 않아도 된다는 것이다.</p>\n<p>이런 관계는 총 네 가지 유형으로 나눌 수 있는데 하나씩 살펴보자.</p>\n<h3 id=\"one-to-one\" style=\"position:relative;\"><a href=\"#one-to-one\" aria-label=\"one to one permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>one to one</h3>\n<p>one to one 관계는 두 entity set 이 서로 하나의 relationship으로만 연결될 수 있는 relationship을 말한다. 그리고 아래와 같이 표현한다.</p>\n<p><img src=\"https://i0.wp.com/tutorialwing.com/wp-content/uploads/2018/12/tutorialwing-dbms-one-one-er-connectivity.png?resize=732%2C193&#x26;ssl=1\"></p>\n<p>relationship owns 에 대해 customer 와 Account가 one-to-one 관계를 가진다. 즉, 위 예시에서는 한 명의 고객이 하나의 계정만을 가질 수 있는 것을 의미한다.</p>\n<h3 id=\"many-to-one\" style=\"position:relative;\"><a href=\"#many-to-one\" aria-label=\"many to one permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>many to one</h3>\n<p>many to one 하나의 entity set이 여러 다른 entity에 연결될 수 있고 다른 하나는 하나에만 연결될 수 있는 구조이다.</p>\n<p><img src=\"https://i1.wp.com/tutorialwing.com/wp-content/uploads/2018/12/tutorialwing-dbms-many-one-er-connectivity.png?w=734&#x26;ssl=1\"></p>\n<p>위 예시는 many to one 관계를 보여준다. owns 관계에 대해 Customer는 다수가 연결되고 Acoount 는 하나만 연결된다. 즉, 다수의 고객이 하나의 계정을 공유할 수 있다는 것을 표현한다.</p>\n<h3 id=\"one-to-many\" style=\"position:relative;\"><a href=\"#one-to-many\" aria-label=\"one to many permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>one to many</h3>\n<p>many to one 을 단순하게 뒤집은 구조이다. 아래 예시를 보자.</p>\n<p><img src=\"https://i1.wp.com/tutorialwing.com/wp-content/uploads/2018/12/tutorialwing-dbms-one-many-er-connectivity.png?w=735&#x26;ssl=1\"></p>\n<p>Customer는 owns relationship에 대해 하나만 연결되고, Account는 여러개가 연결될 수 있다. 즉, 한명의 고객이 여러 계정을 가질 수 있다. 하지만 기억해야 할 점은 한 계정은 공유되는 것이 아니라 하나의 고객에게만 연결되어 있다는 것이다.</p>\n<h3 id=\"many-to-many-relationship\" style=\"position:relative;\"><a href=\"#many-to-many-relationship\" aria-label=\"many to many relationship permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>many-to-many relationship</h3>\n<p>many to many 관계는 양 쪽의 entity set이 서로 다수의 relationship을 가질 수 있는 구조이다.</p>\n<p><img src=\"https://i2.wp.com/tutorialwing.com/wp-content/uploads/2018/12/tutorialwing-dbms-many-many-er-connectivity.png?w=736&#x26;ssl=1\"></p>\n<p>위 예시를 보면, 한명의 고객이 여러 계정을 가질 수 있고, 해당 계정 역시 다수에 의해 공유될 수 있는 상태를 표현한 것이다.</p>\n<h2 id=\"total-and-partial-participation\" style=\"position:relative;\"><a href=\"#total-and-partial-participation\" aria-label=\"total and partial participation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Total and Partial Participation</h2>\n<p>Total particiation은 entity set의 모든 entity가 적어도 하나 이상의 relationship을 가지고 있는 것을 의미한다. 그리고 이것을 그림에서 표기하기 위해서 두개의 선으로 이루어진 선을 사용한다.</p>\n<p>Partial particiation은 entity set 의 entity가 꼭 모두 relationship을 만들지 않아도 된다는 것을 의미한다.</p>\n<p><img src=\"https://i.imgur.com/8nxJXiz.jpg\"></p>\n<p>위 그림에서 두줄로 연결되어 있는 부분이 total participation이다. 따라서, borrower relationship에 대해서 모든 loan 의 entity가 적어도 하나 이상의 customer의 entity와 연결되어 있어야 한다. customer는 일반 직선으로 borrower relationship을 만들기 때문에 many, 즉 0개 이상의 entity가 loan entity와 연결되어지면 된다.</p>\n<h2 id=\"notation-for-expressing-more-complex-constraints\" style=\"position:relative;\"><a href=\"#notation-for-expressing-more-complex-constraints\" aria-label=\"notation for expressing more complex constraints permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Notation for Expressing More Complex Constraints</h2>\n<p><img src=\"https://image.slidesharecdn.com/pokokbahasan3aermodeling-150319035600-conversion-gate01/95/pokok-bahasan-3a-er-modeling-39-638.jpg?cb=1426737611\"></p>\n<p>위 예시를 보자, 지금까지 소개했던 e-r diagram은 선의 종류를 통해서 constraint 를 표현했는데, 위와 같이 min, max 값을 직접 지정해주는 것도 가능하다. relationship에 연결되는 선의 위에 표시된 왼쪽 숫자가 최소값, 오른쪽 숫자가 최대값이 된다.</p>\n<p>위 사진을 보면 Employee entity set은 manages relationship에 대해서 최소 0개, 최대 1개의 entity가 department 와 연결될 수 있다. 그리고 department 는 최소 1개, 최대 1개의 relationship을 가져야하기 때문에 결국 total participation을 표현한 것이나 다름 없다. max에 사용되는 값은 어떤 값이든지 올 수 있지만, 최대값을 지정해주지 않고 아무값이나 받아도 상관없을 경우에는 ’*’ 표기를 사용하면 된다.</p>\n<h2 id=\"primary-keys\" style=\"position:relative;\"><a href=\"#primary-keys\" aria-label=\"primary keys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Primary Keys</h2>\n<p>E-R Diagram의 관점에서 Primary Key는 entity와 relation을 구분하는 도구로 사용된다고 할 수 있다.</p>\n<h3 id=\"primary-key-for-entity-sets\" style=\"position:relative;\"><a href=\"#primary-key-for-entity-sets\" aria-label=\"primary key for entity sets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Primary Key for Entity Sets</h3>\n<p>Entity Set 에서 Primary Key는 entity set에서 entity들을 구분할 수 있게 해주는 set of attribute이다. 왜냐하면 각 entity는 attribute로 만들어져 있고, entity set 안에서는 attribute가 동일한 entity가 여러개 존재할 수 없다. 따라서 attibute에 따라서 고유한 entity가 표현되는 것이다.</p>\n<h3 id=\"primary-key-for-relationship-sets\" style=\"position:relative;\"><a href=\"#primary-key-for-relationship-sets\" aria-label=\"primary key for relationship sets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Primary Key for Relationship Sets</h3>\n<p>relationship을 표현할 때, 기본적으로 entity set은 두 개 이상이 사용된다. 만약 두 개의 entity set이 존재하고 둘 사이의 relationship을 만들 때, 각 entity set 의 key 중에 어떤 것을 선택해야 할까?</p>\n<p>단순하게 두 entity set의 key를 union한 것을 key로 만들어 주면 된다. 하지만 이런 방법이 항상 효율적이지는 않는다. 다음 유형에 따라서 다른 방법을 사용하자.</p>\n<ol>\n<li>Many-to-Many : 두 Primary Key의 union을 relationship의 key로 만든다.</li>\n<li>One-to-Many : Many 쪽 Entity Set의 Primary Key를 relationship의 key로 만든다.</li>\n<li>One-to-One : 어느 쪽의 Primary Key이든 하나만 가져와서 사용한다.</li>\n</ol>\n<h2 id=\"weak-entity-set\" style=\"position:relative;\"><a href=\"#weak-entity-set\" aria-label=\"weak entity set permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Weak Entity Set</h2>\n<p>Weak Entity Set은 다른 어떤 Entity에 의존적으로 존재하는 Entity 를 말한다. 그리고 이 Entity 가 의존하게 되는 Entity를 Identifying Entity 라고 한다.</p>\n<p>예를 들어 course 라는 entity set 과 section이라는 entity set이 있고, set<em>course 라는 relationship이 있다고 할 때, section entity set은 course entity set의 정보가 반드시 필요해진다. 왜냐하면, section으 정보를 얻으려면 결국 course</em>id가 무엇인지 알아야 정보를 얻을 수 있기 때문이다.</p>\n<p>이런식으로 어떤 relationship에 대해서 데이터를 얻기 위해 반드시 있어야 하는 entity set을 identifying entity 라고 한다. Weak entity set의 모든 entity를 구분할 수 있게 하는 attribute들을 discriminator(parial key)라고 부른다.</p>\n<p>이런 identifying entity가 모여있는 상태를 identify entity set 이라고 하고, identifying entity set 은 항상 Primary Key를 가지게 된다.</p>\n<p><img src=\"https://2.bp.blogspot.com/-ctToYgs036o/V54LFGRTzkI/AAAAAAAABbI/oumMpjrdOZMfNdVaS-KuP1Y7i29K5kY1wCLcB/s1600/Weak_Entity_Set.JPG\"></p>\n<p>위 그림에서 표현된 것 같이 Weak Entity Set은 두겹으로 박스를 만들어서 표현하고 Identifying relationship 역시 두겹으로 마름모를 만들어서 표현한다. 그리고 Weak Entity Set의 discriminator는 점선 밑줄로 표기한다.</p>"}