{"expireTime":9007200877354308000,"key":"transformer-remark-markdown-ast-5796c8b4559f311cde58d991ce30216d-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"참고도서: ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":7,"offset":7},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Operating System Concepts (10/E) Abraham Silberschatz, Peter B. Galvin, Greg Gagne","position":{"start":{"line":2,"column":8,"offset":8},"end":{"line":2,"column":90,"offset":90},"indent":[]}}],"position":{"start":{"line":2,"column":7,"offset":7},"end":{"line":2,"column":91,"offset":91},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":91,"offset":91},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#세마포어의-문제점","title":null,"children":[],"data":{"hProperties":{"aria-label":"세마포어의 문제점 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"세마포어의 문제점","position":{"start":{"line":4,"column":4,"offset":96},"end":{"line":4,"column":13,"offset":105},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":93},"end":{"line":4,"column":13,"offset":105},"indent":[]},"data":{"id":"세마포어의-문제점","htmlAttributes":{"id":"세마포어의-문제점"},"hProperties":{"id":"세마포어의-문제점","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"lock 과 semaphore의 사용은 임계구역 문제를 어느정도 해결해주지만, block 지점을 개발자가 직접 설계해서 구현해야하는 어려움이 있다. 때문에 자칫 잘못하면 세마포어를 잘못 사용해서 잘못된 결과를 만들어낼 수도 있다. 예를 들어 wait() 가 실행되어야 하는 구간에 signal()을 실행시켜버리면 동시에 여러 프로세스가 임계구역에 접근할 수 있게되고, sempahore 의 사용이 의미가 없어진다. 혹은 signal() 을 실행시켜야하는 구간에 wait()를 실행시키게되면 어떤 프로세스도 임계구역에 진입하지 못하고 계속 기다리는 데드락 상태가 되어버린다.","position":{"start":{"line":6,"column":1,"offset":107},"end":{"line":6,"column":321,"offset":427},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":107},"end":{"line":6,"column":321,"offset":427},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#모니터","title":null,"children":[],"data":{"hProperties":{"aria-label":"모니터 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"모니터","position":{"start":{"line":8,"column":4,"offset":432},"end":{"line":8,"column":7,"offset":435},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":429},"end":{"line":8,"column":7,"offset":435},"indent":[]},"data":{"id":"모니터","htmlAttributes":{"id":"모니터"},"hProperties":{"id":"모니터","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"모니터는 세마포어의 문제를 해결하기 위한 ","position":{"start":{"line":10,"column":1,"offset":437},"end":{"line":10,"column":24,"offset":460},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Abstract Data Type(ADT)</code>","position":{"start":{"line":10,"column":24,"offset":460},"end":{"line":10,"column":49,"offset":485},"indent":[]}},{"type":"text","value":" 이다. 개발자는 모니터안에 임계구역에 대한 작업을 정의해둘 수 있고, 각 프로세스나 스레드는 한번에 하나씩만 해당 작업에 접근하여 작업을 수행할 수 있다.","position":{"start":{"line":10,"column":49,"offset":485},"end":{"line":10,"column":136,"offset":572},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":437},"end":{"line":10,"column":136,"offset":572},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">monitor monitor name <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">/* shared variable declarations */</span>\n\n    function <span class=\"token function\">P1</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    funtion <span class=\"token function\">P2</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token function\">initialization_code</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":12,"column":1,"offset":574},"end":{"line":31,"column":4,"offset":750},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"모니터는 일반적으로 위와 같은 구조를 지니는데, 모니터 내부에 있는 변수들은 외부에서 접근할 수 없고 모니터 내에 정의된 함수를 통해서만 접근이 가능하다. 따라서 개발자는 세마포어처럼 명시적으로 어떤 구간을 정해서 임계구역 접근을 제어하지 않고, 모니터를 통해서 손쉽게 동기화 문제를 해결할 수 있다는 장점이 있다. 근데 이렇게만 하면 단순히 Mutex lock을 이용해 임계구역 진입을 제어하는 것과 다를 바가 없고, deadlock 문제가 여전히 존재하게된다. 따라서 모니터는 ","position":{"start":{"line":33,"column":1,"offset":752},"end":{"line":33,"column":270,"offset":1021},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">condition variable</code>","position":{"start":{"line":33,"column":270,"offset":1021},"end":{"line":33,"column":290,"offset":1041},"indent":[]}},{"type":"text","value":" 을 사용해서 추가적으로 발생할 수 있는 동기화 문제를 방지한다.","position":{"start":{"line":33,"column":290,"offset":1041},"end":{"line":33,"column":326,"offset":1077},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":752},"end":{"line":33,"column":326,"offset":1077},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#모니터에서의-조건변수conditional-variable-in-monitor","title":null,"children":[],"data":{"hProperties":{"aria-label":"모니터에서의 조건변수conditional variable in monitor permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"모니터에서의 조건변수(Conditional Variable in Monitor)","position":{"start":{"line":35,"column":4,"offset":1082},"end":{"line":35,"column":48,"offset":1126},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1079},"end":{"line":35,"column":48,"offset":1126},"indent":[]},"data":{"id":"모니터에서의-조건변수conditional-variable-in-monitor","htmlAttributes":{"id":"모니터에서의-조건변수conditional-variable-in-monitor"},"hProperties":{"id":"모니터에서의-조건변수conditional-variable-in-monitor","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"조건 변수는 ","position":{"start":{"line":37,"column":1,"offset":1128},"end":{"line":37,"column":8,"offset":1135},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">wait</code>","position":{"start":{"line":37,"column":8,"offset":1135},"end":{"line":37,"column":14,"offset":1141},"indent":[]}},{"type":"text","value":"과 ","position":{"start":{"line":37,"column":14,"offset":1141},"end":{"line":37,"column":16,"offset":1143},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">signal</code>","position":{"start":{"line":37,"column":16,"offset":1143},"end":{"line":37,"column":24,"offset":1151},"indent":[]}},{"type":"text","value":" 두 가지 연산을 가진다. 세마포어에서 봤던 것과 비슷한 역할을 한다. 만약 ","position":{"start":{"line":37,"column":24,"offset":1151},"end":{"line":37,"column":67,"offset":1194},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">wait()</code>","position":{"start":{"line":37,"column":67,"offset":1194},"end":{"line":37,"column":75,"offset":1202},"indent":[]}},{"type":"text","value":" 이 실행되면, 해당 프로세스는 대기하게 되는데, 다른 프로세스가 ","position":{"start":{"line":37,"column":75,"offset":1202},"end":{"line":37,"column":112,"offset":1239},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">signal()</code>","position":{"start":{"line":37,"column":112,"offset":1239},"end":{"line":37,"column":122,"offset":1249},"indent":[]}},{"type":"text","value":" 을 실행할 때까지 대기하게 된다.","position":{"start":{"line":37,"column":122,"offset":1249},"end":{"line":37,"column":141,"offset":1268},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1128},"end":{"line":37,"column":141,"offset":1268},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"한가지 생각해보아야 할 점은 wait 이 되어 대기중이던 프로세스가 모니터에 들어온 어떤 다른 프로세스에 의해 signal 되어 모니터에서 작업을 재개할 때, 모니터 안에 두 프로세스가 존재할 수 있다는 것이다. 따라서 우리는 두 가지 방법을 생각해볼 수 있다.","position":{"start":{"line":39,"column":1,"offset":1270},"end":{"line":39,"column":147,"offset":1416},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1270},"end":{"line":39,"column":147,"offset":1416},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">Signal-and-Wait</code>","position":{"start":{"line":41,"column":4,"offset":1421},"end":{"line":41,"column":21,"offset":1438},"indent":[]}},{"type":"text","value":" : signal 을 보낸 프로세스가 대기하고 다시 시작된 프로세스가 끝나기를 기다린다.","position":{"start":{"line":41,"column":21,"offset":1438},"end":{"line":41,"column":70,"offset":1487},"indent":[]}}],"position":{"start":{"line":41,"column":4,"offset":1421},"end":{"line":41,"column":70,"offset":1487},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":1418},"end":{"line":41,"column":70,"offset":1487},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">Signal-and-Continue</code>","position":{"start":{"line":42,"column":4,"offset":1491},"end":{"line":42,"column":25,"offset":1512},"indent":[]}},{"type":"text","value":" : signal 을 보낸 프로세스는 signal 이후에 작업을 계속 진행하고 이 프로세스가 끝나면 signal을 받은 프로세스가 작업을 시작한다.","position":{"start":{"line":42,"column":25,"offset":1512},"end":{"line":42,"column":107,"offset":1594},"indent":[]}}],"position":{"start":{"line":42,"column":4,"offset":1491},"end":{"line":42,"column":107,"offset":1594},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1488},"end":{"line":42,"column":107,"offset":1594},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":1418},"end":{"line":42,"column":107,"offset":1594},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"두 방법 중 어떤 방법을 택하는지는 모니터를 사용하는 프로그래밍 언어가 어떻게 설계되었는지에 따라 달라진다. 모니터는 high-level language 에서만 지원되기 때문에, Java에서는 단순 명령어 하나로 모니터를 사용할 수 있다.","position":{"start":{"line":44,"column":1,"offset":1596},"end":{"line":44,"column":134,"offset":1729},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":1596},"end":{"line":44,"column":134,"offset":1729},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#다시-돌아온-철학자들","title":null,"children":[],"data":{"hProperties":{"aria-label":"다시 돌아온 철학자들 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"다시 돌아온 철학자들","position":{"start":{"line":46,"column":4,"offset":1734},"end":{"line":46,"column":15,"offset":1745},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1731},"end":{"line":46,"column":15,"offset":1745},"indent":[]},"data":{"id":"다시-돌아온-철학자들","htmlAttributes":{"id":"다시-돌아온-철학자들"},"hProperties":{"id":"다시-돌아온-철학자들","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"그렇다면 deadlock의 발생 위험이 있었던 식사하는 철학자 문제를 모니터를 이용해서 완벽하게 해결해보자. 먼저 이 문제를 해결하기 위해서, 모든 철학자들이 양쪽에 있는 젓가락을 모두 사용 가능해야 젓가락을 집어든다고 가정하자. 그리고 각 철학자들은 멍때리기, 식사 시도하기, 식사하기 세 상태 중 하나를 가져야 하기 때문에 다음과 같이 모니터의 공통 변수를 설정할 수 있다.","position":{"start":{"line":48,"column":1,"offset":1747},"end":{"line":48,"column":212,"offset":1958},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1747},"end":{"line":48,"column":212,"offset":1958},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">enum</span> <span class=\"token punctuation\">{</span>THINKING<span class=\"token punctuation\">,</span> HUNGRY<span class=\"token punctuation\">,</span> EATING<span class=\"token punctuation\">}</span> state<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 철학자는 5명이 있다고 가정했다.</span></code></pre></div>","position":{"start":{"line":50,"column":1,"offset":1960},"end":{"line":52,"column":4,"offset":2032},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"어떤 철학자의 상태가 EATING 이 되기 위해서는 자신의 양쪽에 있는 철학자들의 상태가 ","position":{"start":{"line":54,"column":1,"offset":2034},"end":{"line":54,"column":51,"offset":2084},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">EATING</code>","position":{"start":{"line":54,"column":51,"offset":2084},"end":{"line":54,"column":59,"offset":2092},"indent":[]}},{"type":"text","value":" 이면 안된다. 따라서 ","position":{"start":{"line":54,"column":59,"offset":2092},"end":{"line":54,"column":72,"offset":2105},"indent":[]}},{"type":"html","value":"<code class=\"language-(state[(i + 4) \"> 5] != EATING) &amp;&amp; (state[(i + 1) </code>","position":{"start":{"line":54,"column":72,"offset":2105},"end":{"line":54,"column":138,"offset":2171},"indent":[]}},{"type":"text","value":"\n의 조건이 만족될 때만 젓가락을 집어들 수 있다. 이 조건을 모니터에서 사용하게 되면, 어떤 철학자의 상태가 HUNGRY 이고 양쪽에 집어들 수 있는 젓가락이 없을 때, wait()을 통해서 젓가락이 사용가능할 때까징기다리게 할 수 있다.","position":{"start":{"line":54,"column":138,"offset":2171},"end":{"line":55,"column":134,"offset":2305},"indent":[1]}}],"position":{"start":{"line":54,"column":1,"offset":2034},"end":{"line":55,"column":134,"offset":2305},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"그럼 모니터로 구현한 코드를 살펴보자","position":{"start":{"line":57,"column":1,"offset":2307},"end":{"line":57,"column":21,"offset":2327},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":2307},"end":{"line":57,"column":21,"offset":2327},"indent":[]}},{"type":"html","lang":"c#","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">monitor DiningPhilosophres{\n    enum {THINKING, HUNGRY, EATING} state[5];\n    condition self[5];\n\n    void pickup(int i){\n        state[i] = HUNGRY;\n        test(i);\n        if (state != EATING)\n            self[i].wait();\n    }\n\n    void putdown (int i){\n        state[i] = THINKING;\n        test((i + 4) % 5);\n        test((i + 1) % 5);\n    }\n\n    void test (int i){\n        if ((state[(i + 4) % 5] != EATING)\n            &amp;&amp; (state[i] == HUNGRY)\n            &amp;&amp; (state[(i + 1) % 5] != EATING)){\n                state[i] = EATING;\n                self[i].signal();\n        }\n    }\n\n    initialization_code (){\n        for (int i = 0 ; i &lt; 5  ; i++)\n            state[i] = THINKING\n    }\n}</code></pre></div>","position":{"start":{"line":59,"column":1,"offset":2329},"end":{"line":91,"column":4,"offset":3027},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#shared-data","title":null,"children":[],"data":{"hProperties":{"aria-label":"shared data permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Shared Data","position":{"start":{"line":93,"column":5,"offset":3033},"end":{"line":93,"column":16,"offset":3044},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":3029},"end":{"line":93,"column":16,"offset":3044},"indent":[]},"data":{"id":"shared-data","htmlAttributes":{"id":"shared-data"},"hProperties":{"id":"shared-data","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"가장 먼저 공통변수를 확인해보자 앞서 확인했던 것 처럼 세 상태를 표현하기 위한 ","position":{"start":{"line":95,"column":1,"offset":3046},"end":{"line":95,"column":46,"offset":3091},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">state</code>","position":{"start":{"line":95,"column":46,"offset":3091},"end":{"line":95,"column":53,"offset":3098},"indent":[]}},{"type":"text","value":" 배열이 사용되었다. 그리고 조건변수로 ","position":{"start":{"line":95,"column":53,"offset":3098},"end":{"line":95,"column":75,"offset":3120},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">self</code>","position":{"start":{"line":95,"column":75,"offset":3120},"end":{"line":95,"column":81,"offset":3126},"indent":[]}},{"type":"text","value":" 배열이 사용되었는데, 배열의 각 요소가 각 철학자들의 상태를 변경시킨다.","position":{"start":{"line":95,"column":81,"offset":3126},"end":{"line":95,"column":122,"offset":3167},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":3046},"end":{"line":95,"column":122,"offset":3167},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#initialization_code","title":null,"children":[],"data":{"hProperties":{"aria-label":"initialization_code permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"initialization_code","position":{"start":{"line":97,"column":5,"offset":3173},"end":{"line":97,"column":24,"offset":3192},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":3169},"end":{"line":97,"column":24,"offset":3192},"indent":[]},"data":{"id":"initialization_code","htmlAttributes":{"id":"initialization_code"},"hProperties":{"id":"initialization_code","style":"position:relative;"}}},{"type":"html","lang":"c#","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">initialization_code (){\n        for (int i = 0 ; i &lt; 5  ; i++)\n            state[i] = THINKING\n    }</code></pre></div>","position":{"start":{"line":99,"column":1,"offset":3194},"end":{"line":104,"column":4,"offset":3304},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"모니터 내부에 정의된 함수는 총 네 개의 함수이다. 우선 ","position":{"start":{"line":106,"column":1,"offset":3306},"end":{"line":106,"column":33,"offset":3338},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">initialization_code</code>","position":{"start":{"line":106,"column":33,"offset":3338},"end":{"line":106,"column":54,"offset":3359},"indent":[]}},{"type":"text","value":" 함수를 보자. 가장 처음에는 모든 철학자들의 상태를 ","position":{"start":{"line":106,"column":54,"offset":3359},"end":{"line":106,"column":84,"offset":3389},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">THINKING</code>","position":{"start":{"line":106,"column":84,"offset":3389},"end":{"line":106,"column":94,"offset":3399},"indent":[]}},{"type":"text","value":"으로 초기화 한다. 이 부분에 있어서는 크게 복잡한 것이 없다.","position":{"start":{"line":106,"column":94,"offset":3399},"end":{"line":106,"column":129,"offset":3434},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":3306},"end":{"line":106,"column":129,"offset":3434},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#test","title":null,"children":[],"data":{"hProperties":{"aria-label":"test permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"test","position":{"start":{"line":108,"column":5,"offset":3440},"end":{"line":108,"column":9,"offset":3444},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":3436},"end":{"line":108,"column":9,"offset":3444},"indent":[]},"data":{"id":"test","htmlAttributes":{"id":"test"},"hProperties":{"id":"test","style":"position:relative;"}}},{"type":"html","lang":"c#","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">void test (int i){\n    if ((state[(i + 4) % 5] != EATING)\n        &amp;&amp; (state[i] == HUNGRY)\n        &amp;&amp; (state[(i + 1) % 5] != EATING)){\n            state[i] = EATING;\n            self[i].signal();\n    }\n}</code></pre></div>","position":{"start":{"line":110,"column":1,"offset":3446},"end":{"line":119,"column":4,"offset":3658},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"또 다른 함수는 자신의 주변에 있는 철학자들의 상태를 확인하는 함수이다. 조건문이 조금 복잡하게 얽혀있는데 하나씩 쪼개어서 보자.","position":{"start":{"line":121,"column":1,"offset":3660},"end":{"line":121,"column":73,"offset":3732},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":3660},"end":{"line":121,"column":73,"offset":3732},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-(state[(i + 4) \"> 5] != EATING</code>","position":{"start":{"line":123,"column":4,"offset":3737},"end":{"line":123,"column":35,"offset":3768},"indent":[]}},{"type":"text","value":" : 자신의 왼쪽에 있는 철학자가 EATING 상태에 있는지 확인한다.","position":{"start":{"line":123,"column":35,"offset":3768},"end":{"line":123,"column":74,"offset":3807},"indent":[]}}],"position":{"start":{"line":123,"column":4,"offset":3737},"end":{"line":123,"column":74,"offset":3807},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":3734},"end":{"line":123,"column":74,"offset":3807},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">state[i] == HUNGRY</code>","position":{"start":{"line":124,"column":4,"offset":3811},"end":{"line":124,"column":24,"offset":3831},"indent":[]}},{"type":"text","value":" : 자기자신이 HUNGRY 상태인지 확인한다.","position":{"start":{"line":124,"column":24,"offset":3831},"end":{"line":124,"column":50,"offset":3857},"indent":[]}}],"position":{"start":{"line":124,"column":4,"offset":3811},"end":{"line":124,"column":50,"offset":3857},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":3808},"end":{"line":124,"column":50,"offset":3857},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-state[(i + 1) \"> 5] != EATING)</code>","position":{"start":{"line":125,"column":4,"offset":3861},"end":{"line":125,"column":35,"offset":3892},"indent":[]}},{"type":"text","value":" : 자신의 오른쪽에 있는 철학자가 EATING 상태에 있는지 확인한다.","position":{"start":{"line":125,"column":35,"offset":3892},"end":{"line":125,"column":75,"offset":3932},"indent":[]}}],"position":{"start":{"line":125,"column":4,"offset":3861},"end":{"line":125,"column":75,"offset":3932},"indent":[]}}],"position":{"start":{"line":125,"column":1,"offset":3858},"end":{"line":125,"column":75,"offset":3932},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":3734},"end":{"line":125,"column":75,"offset":3932},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"세 조건을 모두 확인했을 때 왼쪽과 오른쪽에 있는 철학자들이 모두 ","position":{"start":{"line":127,"column":1,"offset":3934},"end":{"line":127,"column":38,"offset":3971},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">EATING</code>","position":{"start":{"line":127,"column":38,"offset":3971},"end":{"line":127,"column":46,"offset":3979},"indent":[]}},{"type":"text","value":" 상태가 아니고 자기 자신이 ","position":{"start":{"line":127,"column":46,"offset":3979},"end":{"line":127,"column":62,"offset":3995},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">HUNGRY</code>","position":{"start":{"line":127,"column":62,"offset":3995},"end":{"line":127,"column":70,"offset":4003},"indent":[]}},{"type":"text","value":" 상태라면 식사할 수 있는 조건이 만족되기 때문에 식사를 시작하기 위해 자기 자신의 state를 바꾸고 signal 함수를 실행해서 작업을 시작시킨다.","position":{"start":{"line":127,"column":70,"offset":4003},"end":{"line":127,"column":154,"offset":4087},"indent":[]}}],"position":{"start":{"line":127,"column":1,"offset":3934},"end":{"line":127,"column":154,"offset":4087},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#pickup","title":null,"children":[],"data":{"hProperties":{"aria-label":"pickup permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"pickup","position":{"start":{"line":129,"column":5,"offset":4093},"end":{"line":129,"column":11,"offset":4099},"indent":[]}}],"position":{"start":{"line":129,"column":1,"offset":4089},"end":{"line":129,"column":11,"offset":4099},"indent":[]},"data":{"id":"pickup","htmlAttributes":{"id":"pickup"},"hProperties":{"id":"pickup","style":"position:relative;"}}},{"type":"html","lang":"c#","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">void pickup(int i){\n    state[i] = HUNGRY;\n    test(i);\n    if (state != EATING)\n        self[i].wait();\n}</code></pre></div>","position":{"start":{"line":131,"column":1,"offset":4101},"end":{"line":138,"column":4,"offset":4217},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"pickup 함수는 젓가락을 들기위한 함수이다. 먼저 젓가락을 들기위해 자기자신의 state 를 ","position":{"start":{"line":140,"column":1,"offset":4219},"end":{"line":140,"column":55,"offset":4273},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">HUNGRY</code>","position":{"start":{"line":140,"column":55,"offset":4273},"end":{"line":140,"column":63,"offset":4281},"indent":[]}},{"type":"text","value":"로 변경한다. 그리고 test 를 실행해서 양쪽에 있는 젓가락을 들 수 있는 상태인지 확인한다. 만약 양쪽 젓가락을 모두 들 수 있다면, test 함수에서 해당 철학자의 상태가 ","position":{"start":{"line":140,"column":63,"offset":4281},"end":{"line":140,"column":162,"offset":4380},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">EATING</code>","position":{"start":{"line":140,"column":162,"offset":4380},"end":{"line":140,"column":170,"offset":4388},"indent":[]}},{"type":"text","value":" 으로 변경되기 때문에 pickup은 성공한채로 함수를 종료시킨다. 하지만 만약 젓가락을 들 수 없는 상태였다면 철학자의 상태가 변경되지 않고 ","position":{"start":{"line":140,"column":170,"offset":4388},"end":{"line":140,"column":250,"offset":4468},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">HUNGRY</code>","position":{"start":{"line":140,"column":250,"offset":4468},"end":{"line":140,"column":258,"offset":4476},"indent":[]}},{"type":"text","value":"로 남아있기 때문에 자기 자신에게 wait 을 실행해서 signal 을 기다리며 대기하는 상태가 된다.","position":{"start":{"line":140,"column":258,"offset":4476},"end":{"line":140,"column":315,"offset":4533},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":4219},"end":{"line":140,"column":315,"offset":4533},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#putdown","title":null,"children":[],"data":{"hProperties":{"aria-label":"putdown permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"putdown","position":{"start":{"line":142,"column":5,"offset":4539},"end":{"line":142,"column":12,"offset":4546},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":4535},"end":{"line":142,"column":12,"offset":4546},"indent":[]},"data":{"id":"putdown","htmlAttributes":{"id":"putdown"},"hProperties":{"id":"putdown","style":"position:relative;"}}},{"type":"html","lang":"c#","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">void putdown (int i){\n    state[i] = THINKING;\n    test((i + 4) % 5);\n    test((i + 1) % 5);\n}</code></pre></div>","position":{"start":{"line":144,"column":1,"offset":4548},"end":{"line":150,"column":4,"offset":4652},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"putdown 함수는 식사를 마치고 젓가락을 내려놓게 하는 함수이다. 이 함수가 실행되면, 해당 철학자의 상태는 ","position":{"start":{"line":152,"column":1,"offset":4654},"end":{"line":152,"column":64,"offset":4717},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">THINKING</code>","position":{"start":{"line":152,"column":64,"offset":4717},"end":{"line":152,"column":74,"offset":4727},"indent":[]}},{"type":"text","value":" 으로 변경되고, 왼쪽과 오른쪽 사람에 대해 각각 test 함수를 실행하게 된다. 이미 자기자신은 ","position":{"start":{"line":152,"column":74,"offset":4727},"end":{"line":152,"column":129,"offset":4782},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">THINKING</code>","position":{"start":{"line":152,"column":129,"offset":4782},"end":{"line":152,"column":139,"offset":4792},"indent":[]}},{"type":"text","value":" 상태가 되어 EATING 상태가 아니기 때문에, 만약 왼쪽이나 오른쪽에 signal을 기다리며 대기중이던 철학자가 있다면 test 를 통해 해당 철학자를 깨울 수 있게된다. 이 작업을 통해서 어떤 철학자가 식사를 마쳤을 때, 양 옆에 있는 철학자의 대기상태를 확인하게 되기 때문에, deadlock 문제를 해결할 수 있게 된다.","position":{"start":{"line":152,"column":139,"offset":4792},"end":{"line":152,"column":323,"offset":4976},"indent":[]}}],"position":{"start":{"line":152,"column":1,"offset":4654},"end":{"line":152,"column":323,"offset":4976},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":153,"column":1,"offset":4977}}}}