{"expireTime":9007200877354938000,"key":"transformer-remark-markdown-ast-6fbcdb93b1eef500742b2537fee6f2d5-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.acmicpc.net/problem/2110","children":[{"type":"text","value":"https://www.acmicpc.net/problem/2110","position":{"start":{"line":2,"column":2,"offset":2},"end":{"line":2,"column":38,"offset":38},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":77,"offset":77},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":77,"offset":77},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#문제","title":null,"children":[],"data":{"hProperties":{"aria-label":"문제 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"문제","position":{"start":{"line":4,"column":4,"offset":82},"end":{"line":4,"column":6,"offset":84},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":79},"end":{"line":4,"column":6,"offset":84},"indent":[]},"data":{"id":"문제","htmlAttributes":{"id":"문제"},"hProperties":{"id":"문제","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"문제","position":{"start":{"line":6,"column":3,"offset":88},"end":{"line":6,"column":5,"offset":90},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":86},"end":{"line":6,"column":7,"offset":92},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":6,"column":7,"offset":92},"end":{"line":6,"column":11,"offset":96},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":86},"end":{"line":6,"column":11,"offset":96},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"도현이의 집 N개가 수직선 위에 있다. 각각의 집의 좌표는 x1, …, xN이고, 집 여러개가 같은 좌표를 가지는 일은 없다.","position":{"start":{"line":8,"column":1,"offset":98},"end":{"line":8,"column":73,"offset":170},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":98},"end":{"line":8,"column":73,"offset":170},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"도현이는 언제 어디서나 와이파이를 즐기기 위해서 집에 공유기 C개를 설치하려고 한다. 최대한 많은 곳에서 와이파이를 사용하려고 하기 때문에, 한 집에는 공유기를 하나만 설치할 수 있고, 가장 인접한 두 공유기 사이의 거리를 가능한 크게 하여 설치하려고 한다.","position":{"start":{"line":10,"column":1,"offset":172},"end":{"line":10,"column":145,"offset":316},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":172},"end":{"line":10,"column":145,"offset":316},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"C개의 공유기를 N개의 집에 적당히 설치해서, 가장 인접한 두 공유기 사이의 거리를 최대로 하는 프로그램을 작성하시오.","position":{"start":{"line":12,"column":1,"offset":318},"end":{"line":12,"column":67,"offset":384},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":318},"end":{"line":12,"column":67,"offset":384},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"입력","position":{"start":{"line":14,"column":3,"offset":388},"end":{"line":14,"column":5,"offset":390},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":386},"end":{"line":14,"column":7,"offset":392},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":14,"column":7,"offset":392},"end":{"line":14,"column":11,"offset":396},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":386},"end":{"line":14,"column":11,"offset":396},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"첫째 줄에 집의 개수 N (2 ≤ N ≤ 200,000)과 공유기의 개수 C (2 ≤ C ≤ N)이 하나 이상의 빈 칸을 사이에 두고 주어진다. 둘째 줄부터 N개의 줄에는 집의 좌표를 나타내는 xi (0 ≤ xi ≤ 1,000,000,000)가 한 줄에 하나씩 주어진다.","position":{"start":{"line":16,"column":1,"offset":398},"end":{"line":16,"column":152,"offset":549},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":398},"end":{"line":16,"column":152,"offset":549},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"출력","position":{"start":{"line":18,"column":3,"offset":553},"end":{"line":18,"column":5,"offset":555},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":551},"end":{"line":18,"column":7,"offset":557},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":18,"column":7,"offset":557},"end":{"line":18,"column":11,"offset":561},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":551},"end":{"line":18,"column":11,"offset":561},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"첫째 줄에 가장 인접한 두 공유기 사이의 최대 거리를 출력한다.","position":{"start":{"line":20,"column":1,"offset":563},"end":{"line":20,"column":36,"offset":598},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":563},"end":{"line":20,"column":36,"offset":598},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#풀이","title":null,"children":[],"data":{"hProperties":{"aria-label":"풀이 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"풀이","position":{"start":{"line":22,"column":4,"offset":603},"end":{"line":22,"column":6,"offset":605},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":600},"end":{"line":22,"column":6,"offset":605},"indent":[]},"data":{"id":"풀이","htmlAttributes":{"id":"풀이"},"hProperties":{"id":"풀이","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"이분탐색으로 풀 수 있는 문제인데, 어떻게 풀 것인지 정의하는 것이 어려웠다. 우리가 이분탐색으로 찾을 값은 인접한 두 공유기 사이의 최대 거리이다. 그렇다면 임의의 공유기 사이거리를 설정하고 해당 거리를 최소한으로 공유기를 각 집에 설치해보면, 해당 거리로 설치할 수 있는 공유기의 최대 개수를 알 수 있다.","position":{"start":{"line":24,"column":1,"offset":607},"end":{"line":24,"column":174,"offset":780},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":607},"end":{"line":24,"column":174,"offset":780},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"입력으로 설치할 공유기의 개수가 주어지기 때문에 만약 계산한 공유기의 개수가 설치할 공유기의 개수보다 많다면, 간격을 더 늘려야 된다는 것을 의미하고, 계산한 공유기의 개수가 설치할 공유기의 개수보다 적다면 간격을 줄여서 공유기를 더 늘려주어야 한다. 나는 공유기 설치를 위해서 lower","position":{"start":{"line":26,"column":1,"offset":782},"end":{"line":26,"column":162,"offset":943},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"bound 를 이용했다. lower","position":{"start":{"line":26,"column":163,"offset":944},"end":{"line":26,"column":182,"offset":963},"indent":[]}}],"position":{"start":{"line":26,"column":162,"offset":943},"end":{"line":26,"column":183,"offset":964},"indent":[]}},{"type":"text","value":"bound를 사용하면 인자로 전달한 값 보다 큰 최소값을 set에서 얻을 수 있기 때문에 특정한 사이거리 이상의 집 중 가장 가까운 곳에 공유기를 설치해볼 수 있다.","position":{"start":{"line":26,"column":183,"offset":964},"end":{"line":26,"column":275,"offset":1056},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":782},"end":{"line":26,"column":275,"offset":1056},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#코드","title":null,"children":[],"data":{"hProperties":{"aria-label":"코드 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"코드","position":{"start":{"line":28,"column":4,"offset":1061},"end":{"line":28,"column":6,"offset":1063},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1058},"end":{"line":28,"column":6,"offset":1063},"indent":[]},"data":{"id":"코드","htmlAttributes":{"id":"코드"},"hProperties":{"id":"코드","style":"position:relative;"}}},{"type":"html","lang":"cpp","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token string\">' '</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\nset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> houses<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">installRouter</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> point <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>houses<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> interval<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">auto</span> iter <span class=\"token operator\">=</span> houses<span class=\"token punctuation\">.</span><span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iter <span class=\"token operator\">!=</span> houses<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iter <span class=\"token operator\">==</span> houses<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n        point <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>iter <span class=\"token operator\">+</span> interval<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> head <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> tail <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>houses<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">&lt;=</span> tail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tail <span class=\"token operator\">+</span> head<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token function\">installRouter</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">>=</span> C<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            head <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            answer <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> tail <span class=\"token operator\">=</span>  mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> house<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>house<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        houses<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>house<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":30,"column":1,"offset":1065},"end":{"line":91,"column":4,"offset":2053},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":92,"column":1,"offset":2054}}}}