{"expireTime":9007200877354309000,"key":"transformer-remark-markdown-html-ast-e69b65d0f2ddd641570365b3b6113451-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.acmicpc.net/problem/11266"},"children":[{"type":"text","value":"https://www.acmicpc.net/problem/11266","position":{"start":{"line":2,"column":2,"offset":2},"end":{"line":2,"column":39,"offset":39}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":79,"offset":79}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":79,"offset":79}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"문제","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%EB%AC%B8%EC%A0%9C","aria-label":"문제 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"문제","position":{"start":{"line":4,"column":4,"offset":84},"end":{"line":4,"column":6,"offset":86}}}],"position":{"start":{"line":4,"column":1,"offset":81},"end":{"line":4,"column":6,"offset":86}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"문제","position":{"start":{"line":6,"column":3,"offset":90},"end":{"line":6,"column":5,"offset":92}}}],"position":{"start":{"line":6,"column":1,"offset":88},"end":{"line":6,"column":7,"offset":94}}},{"type":"raw","value":"<br>","position":{"start":{"line":6,"column":7,"offset":94},"end":{"line":6,"column":11,"offset":98}}},{"type":"text","value":"\n그래프가 주어졌을 때, 단절점을 모두 구해 출력하는 프로그램을 작성하시오.","position":{"start":{"line":6,"column":11,"offset":98},"end":{"line":7,"column":42,"offset":140}}}],"position":{"start":{"line":6,"column":1,"offset":88},"end":{"line":7,"column":42,"offset":140}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"단절점이란 그 정점을 제거했을 때, 그래프가 두 개 또는 그 이상으로 나누어지는 정점을 말한다. 즉, 제거했을 때 그래프의 connected component의 개수가 증가하는 정점을 말한다.","position":{"start":{"line":9,"column":1,"offset":142},"end":{"line":9,"column":108,"offset":249}}}],"position":{"start":{"line":9,"column":1,"offset":142},"end":{"line":9,"column":108,"offset":249}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"입력","position":{"start":{"line":11,"column":3,"offset":253},"end":{"line":11,"column":5,"offset":255}}}],"position":{"start":{"line":11,"column":1,"offset":251},"end":{"line":11,"column":7,"offset":257}}},{"type":"raw","value":"<br>","position":{"start":{"line":11,"column":7,"offset":257},"end":{"line":11,"column":11,"offset":261}}},{"type":"text","value":"\n첫째 줄에 두 정수 V(1≤V≤10,000), E(1≤E≤100,000)가 주어진다. 이는 그래프가 V개의 정점과 E개의 간선으로 이루어져 있다는 의미이다. 다음 E개의 줄에는 간선에 대한 정보를 나타내는 두 정수 A, B가 주어진다. 이는 A번 정점과 B번 정점이 연결되어 있다는 의미이며, 방향은 양방향이다.","position":{"start":{"line":11,"column":11,"offset":261},"end":{"line":12,"column":175,"offset":436}}}],"position":{"start":{"line":11,"column":1,"offset":251},"end":{"line":12,"column":175,"offset":436}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"입력으로 주어지는 그래프는 연결 그래프가 아닐 수도 있다.","position":{"start":{"line":14,"column":1,"offset":438},"end":{"line":14,"column":33,"offset":470}}}],"position":{"start":{"line":14,"column":1,"offset":438},"end":{"line":14,"column":33,"offset":470}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"출력","position":{"start":{"line":16,"column":3,"offset":474},"end":{"line":16,"column":5,"offset":476}}}],"position":{"start":{"line":16,"column":1,"offset":472},"end":{"line":16,"column":7,"offset":478}}},{"type":"raw","value":"<br>","position":{"start":{"line":16,"column":7,"offset":478},"end":{"line":16,"column":11,"offset":482}}},{"type":"text","value":"\n첫째 줄에 단절점의 개수를 출력한다.","position":{"start":{"line":16,"column":11,"offset":482},"end":{"line":17,"column":21,"offset":503}}}],"position":{"start":{"line":16,"column":1,"offset":472},"end":{"line":17,"column":21,"offset":503}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"둘째 줄에는 단절점의 번호를 공백으로 구분해 오름차순으로 출력한다.","position":{"start":{"line":19,"column":1,"offset":505},"end":{"line":19,"column":38,"offset":542}}}],"position":{"start":{"line":19,"column":1,"offset":505},"end":{"line":19,"column":38,"offset":542}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"풀이","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%ED%92%80%EC%9D%B4","aria-label":"풀이 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"풀이","position":{"start":{"line":21,"column":4,"offset":547},"end":{"line":21,"column":6,"offset":549}}}],"position":{"start":{"line":21,"column":1,"offset":544},"end":{"line":21,"column":6,"offset":549}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"수업에서 배우고 정리했던 단절점을 찾는 알고리즘을 그대로 적용하는 문제이다.\n알고리즘은 ","position":{"start":{"line":23,"column":1,"offset":551},"end":{"line":24,"column":7,"offset":600}}},{"type":"element","tagName":"a","properties":{"href":"https://jeonyeohun.github.io/articles/2020-05/AP"},"children":[{"type":"text","value":"여기","position":{"start":{"line":24,"column":8,"offset":601},"end":{"line":24,"column":10,"offset":603}}}],"position":{"start":{"line":24,"column":7,"offset":600},"end":{"line":24,"column":61,"offset":654}}},{"type":"text","value":" 에 정리해두었다. 그래프의 각 노드들이 꼭 연결되어 있지 않아도 되기 때문에 DFS로 모든 정점을 시작점으로 두고 한번씩 탐색을 진행햐여한다. 어제 글로 알고리즘을 정리했을 때는 그렇게 어려운 부분이 없었는데, 막상 코드로 구현하려고 하니 막히는 부분들이 계속 생겼다. 한동안 고민을 하다가 구글링으로 다른 블로그들의 예시를 참고하면서 완성했다.","position":{"start":{"line":24,"column":61,"offset":654},"end":{"line":24,"column":255,"offset":848}}}],"position":{"start":{"line":23,"column":1,"offset":551},"end":{"line":24,"column":255,"offset":848}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">adj</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> back <span class=\"token punctuation\">[</span><span class=\"token number\">10001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> discover_time <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nbool visited<span class=\"token punctuation\">[</span><span class=\"token number\">10001</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nbool result <span class=\"token punctuation\">[</span><span class=\"token number\">10001</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":26,"column":1,"offset":850},"end":{"line":32,"column":4,"offset":988}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"전역 변수는 위 처럼 다섯 개를 사용했다.","position":{"start":{"line":34,"column":1,"offset":990},"end":{"line":34,"column":24,"offset":1013}}}],"position":{"start":{"line":34,"column":1,"offset":990},"end":{"line":34,"column":24,"offset":1013}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"adj: 각 정점들의 인접 노드들을 저장하는 2차원 배열","position":{"start":{"line":36,"column":4,"offset":1018},"end":{"line":36,"column":35,"offset":1049}}}],"position":{"start":{"line":36,"column":1,"offset":1015},"end":{"line":36,"column":35,"offset":1049}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"discover_time: 각 정점의 탐색시간을 기록할 때 기준이 되는 타임스탬프","position":{"start":{"line":37,"column":4,"offset":1053},"end":{"line":37,"column":49,"offset":1098}}}],"position":{"start":{"line":37,"column":1,"offset":1050},"end":{"line":37,"column":49,"offset":1098}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"visited: 각 정점이 한번이라도 방문된 정점인지 확인하는 배열. 배열의 인덱스가 정점의 번호를 의미한다.","position":{"start":{"line":38,"column":4,"offset":1102},"end":{"line":38,"column":65,"offset":1163}}}],"position":{"start":{"line":38,"column":1,"offset":1099},"end":{"line":38,"column":65,"offset":1163}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"result: 해당 정점이 단절점인지 기록하는 배열 이걸 왜 사용하는지 이해가 안돼서 계속 끙끙대고 있었다..","position":{"start":{"line":39,"column":4,"offset":1167},"end":{"line":39,"column":65,"offset":1228}}}],"position":{"start":{"line":39,"column":1,"offset":1164},"end":{"line":39,"column":65,"offset":1228}}},{"type":"text","value":"\n"}],"position":{"start":{"line":36,"column":1,"offset":1015},"end":{"line":39,"column":65,"offset":1228}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"일단 단절점을 찾으려면 각 정점들을 DFS로 탐색하면서 discover time 을 기록해두어야 한다. 이 시간을 기준으로 해서 단절점 여부를 확인할 수 있기 때문이다.","position":{"start":{"line":41,"column":1,"offset":1230},"end":{"line":41,"column":95,"offset":1324}}}],"position":{"start":{"line":41,"column":1,"offset":1230},"end":{"line":41,"column":95,"offset":1324}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">back<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> discover_time<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":43,"column":1,"offset":1326},"end":{"line":45,"column":4,"offset":1364}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"이 코드가 그 역할을 한다. 그리고 재귀적으로 DFS가 호출되면서 아래 핵심 알고리즘이 수행되는데 하나씩 살펴보자.","position":{"start":{"line":47,"column":1,"offset":1366},"end":{"line":47,"column":65,"offset":1430}}}],"position":{"start":{"line":47,"column":1,"offset":1366},"end":{"line":47,"column":65,"offset":1430}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> adj<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>adj<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        child<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> low <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>adj<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isRoot <span class=\"token operator\">&amp;&amp;</span> low <span class=\"token operator\">>=</span> back<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        ret <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        ret <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> back<span class=\"token punctuation\">[</span>adj<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isRoot <span class=\"token operator\">&amp;&amp;</span> child <span class=\"token operator\">>=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    result<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>","position":{"start":{"line":49,"column":1,"offset":1432},"end":{"line":69,"column":4,"offset":1833}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"한번 탐색을 진행할 따마다 자신과 연결된 모든 노드를 다 방문한다. 이때 이미 방문 했던 노드가 있다면, 다음 두 가지 경우 중 하나에 속한다.","position":{"start":{"line":71,"column":1,"offset":1835},"end":{"line":71,"column":81,"offset":1915}}}],"position":{"start":{"line":71,"column":1,"offset":1835},"end":{"line":71,"column":81,"offset":1915}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"방금 가지쳐서 내려온 부모노드인 경우","position":{"start":{"line":73,"column":4,"offset":1920},"end":{"line":73,"column":24,"offset":1940}}}],"position":{"start":{"line":73,"column":1,"offset":1917},"end":{"line":73,"column":24,"offset":1940}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Back Edge 가 존재하는 경우","position":{"start":{"line":74,"column":4,"offset":1944},"end":{"line":74,"column":23,"offset":1963}}}],"position":{"start":{"line":74,"column":1,"offset":1941},"end":{"line":74,"column":23,"offset":1963}}},{"type":"text","value":"\n"}],"position":{"start":{"line":73,"column":1,"offset":1917},"end":{"line":74,"column":23,"offset":1963}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"중요한 것은 Back Edge 이지만, 어떤 경우이든간에 우리는 기준이 되는 정점과 연결된 모든 정점들의 discovery time 을 보고 가장 작은 discovery time을 선택한다. 어차피 백트랙하면서 현재 노드의 부모노드가 가진 discovery time이 업데이트 되기 때문에 1번 경우를 확인해도 로직에 문제가 생기지는 않는다.","position":{"start":{"line":76,"column":1,"offset":1965},"end":{"line":76,"column":192,"offset":2156}}}],"position":{"start":{"line":76,"column":1,"offset":1965},"end":{"line":76,"column":192,"offset":2156}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"만약 방문하지 않은 노드가 나오면 재귀호출로 해당 노드를 따라 내려간다. 재귀적으로 호출됐던 함수가 반환하면서 주는 값은 해당 노드와 연결된 모든 노드들 중 가장 작은 discovery time이 된다. 이 값을 low라는 변수에 저장해두고 백트랙했을 때 부모노드가 가진 back 값을 업데이트 해준다. 그리고 만약에 어떤 부모노드가 가진 back 값이 자녀 노드에서 리턴된 값보다 크다면, 이 부모노드의 아래에 있는 노드들은 절대 부모노드보다 앞에 있는 노드들과 연결되지 못한다. 즉, 부모노드가 단절점의 후보가 된다.","position":{"start":{"line":78,"column":1,"offset":2158},"end":{"line":78,"column":292,"offset":2449}}}],"position":{"start":{"line":78,"column":1,"offset":2158},"end":{"line":78,"column":292,"offset":2449}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"이 문제를 구현하면서 가장 의아했던 부분이 isRoot 를 사용하는 것과 child를 세어주는 것이다. 루트노드가 단절점이 되려면 2개 이상의 자녀노드를 가져야 한다는 조건이 있다는 것은 알았지만, 나는 처음에 단순하게 인접노드 리스트에 들어있는 노드의 갯수를 세어주면 된다고 생각했다. 내가 간과했던 부분은 루트노드의 인접리스트에 들어있는 노드가 루트노드가 아닌 다른 노드에 의해서 방문될 수도 있다는 것이다. 이렇게 되면 인접리스트의 갯수와는 상관없이 다른 모양의 트리가 되기 때문에 단절점이 되지 않을 수도 있게된다. 따라서 실제로 탐색이 진행될 때만 자녀노드의 갯수를 세어주는 작업이 필요하다.","position":{"start":{"line":80,"column":1,"offset":2451},"end":{"line":80,"column":337,"offset":2787}}}],"position":{"start":{"line":80,"column":1,"offset":2451},"end":{"line":80,"column":337,"offset":2787}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"코드","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%EC%BD%94%EB%93%9C","aria-label":"코드 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"코드","position":{"start":{"line":82,"column":4,"offset":2792},"end":{"line":82,"column":6,"offset":2794}}}],"position":{"start":{"line":82,"column":1,"offset":2789},"end":{"line":82,"column":6,"offset":2794}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n\nusing namespace std<span class=\"token punctuation\">;</span>\n\nvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">adj</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> back <span class=\"token punctuation\">[</span><span class=\"token number\">10001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> discover_time <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nbool visited<span class=\"token punctuation\">[</span><span class=\"token number\">10001</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nbool result <span class=\"token punctuation\">[</span><span class=\"token number\">10001</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> root<span class=\"token punctuation\">,</span> bool isRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    visited<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n    back<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> discover_time<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> back<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> child <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> adj<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>adj<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            child<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> low <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>adj<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isRoot <span class=\"token operator\">&amp;&amp;</span> low <span class=\"token operator\">>=</span> back<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            ret <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            ret <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> back<span class=\"token punctuation\">[</span>adj<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isRoot <span class=\"token operator\">&amp;&amp;</span> child <span class=\"token operator\">>=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        adj<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        adj<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span> v <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> v <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> v <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":84,"column":1,"offset":2796},"end":{"line":149,"column":4,"offset":4095}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":150,"column":1,"offset":4096}}}}