{"expireTime":9007200877354311000,"key":"transformer-remark-markdown-ast-16395d388b02d181e4bb6d4138978fdf-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"참고도서: ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":7,"offset":7},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Operating System Concepts (9/E) Abraham Silberschatz, Peter B. Galvin, Greg Gagne","position":{"start":{"line":2,"column":8,"offset":8},"end":{"line":2,"column":89,"offset":89},"indent":[]}}],"position":{"start":{"line":2,"column":7,"offset":7},"end":{"line":2,"column":90,"offset":90},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":90,"offset":90},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"link","url":"#system-calls","title":null,"children":[],"data":{"hProperties":{"aria-label":"system calls permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"System Calls","position":{"start":{"line":4,"column":3,"offset":94},"end":{"line":4,"column":15,"offset":106},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":92},"end":{"line":4,"column":15,"offset":106},"indent":[]},"data":{"id":"system-calls","htmlAttributes":{"id":"system-calls"},"hProperties":{"id":"system-calls","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"System call은 운영체제에 있어서 아주 핵심이 되는 요소이다. 어떤 프로세스나 서비스가 실행되기 위해서는 System Call을 통한 컴퓨터 시스템으로의 접근이 필수적이기 때문이다.","position":{"start":{"line":6,"column":1,"offset":108},"end":{"line":6,"column":106,"offset":213},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":108},"end":{"line":6,"column":106,"offset":213},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"프로세스는 system call의 연속이라고 할 수 있다. 우리가 시스템 내의 어떤 파일을 복사하려고 할때, 이름 입력받기, 복사하기, 파일에 접근하기 등 거의 모든 영역에서 system call을 통한 명령 수행이 일어난다.","position":{"start":{"line":8,"column":1,"offset":215},"end":{"line":8,"column":127,"offset":341},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":215},"end":{"line":8,"column":127,"offset":341},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"우리가 앞선 내용에서 배웠던 user mode과 kernel mode의 전환도 이 system call 을 통해서 일어난다.","position":{"start":{"line":10,"column":1,"offset":343},"end":{"line":10,"column":70,"offset":412},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":343},"end":{"line":10,"column":70,"offset":412},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"하지만 대부분의 개발자들은 이런 system call이 언제 무엇을 위해 일어나는지 잘 알지 못한다. 왜냐하면 개발자들은 약속된 프로그래밍 언어를 입력하고 이 문법들에 대한 system call의 호출이 모두 준비되어있기 때문이다. 이런 명세를 Application Programming Interface, 혹은 API라고 한다.","position":{"start":{"line":12,"column":1,"offset":414},"end":{"line":12,"column":185,"offset":598},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":414},"end":{"line":12,"column":185,"offset":598},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#system-call-interface","title":null,"children":[],"data":{"hProperties":{"aria-label":"system call interface permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"System Call Interface","position":{"start":{"line":14,"column":4,"offset":603},"end":{"line":14,"column":25,"offset":624},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":600},"end":{"line":14,"column":25,"offset":624},"indent":[]},"data":{"id":"system-call-interface","htmlAttributes":{"id":"system-call-interface"},"hProperties":{"id":"system-call-interface","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"API의 이야기를 조금 더 해보자. System call은 일반적으로 그 종류가 이미 정해져서 어떤 고유한 번호가 할당되어있다. 그리고 해당 번호에 맞는 명령어들이 준비된 테이블에서 인덱싱 되어서 호출된다. system call이 일어났을 때, 테이블에서 명령을 가져와 수행할 수 있도록 해주는 녀석을 System call interface 라고 한다.","position":{"start":{"line":16,"column":1,"offset":626},"end":{"line":16,"column":198,"offset":823},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":626},"end":{"line":16,"column":198,"offset":823},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#methods-to-pass-parameters-to-os","title":null,"children":[],"data":{"hProperties":{"aria-label":"methods to pass parameters to os permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Methods to Pass Parameters to OS","position":{"start":{"line":18,"column":4,"offset":828},"end":{"line":18,"column":36,"offset":860},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":825},"end":{"line":18,"column":36,"offset":860},"indent":[]},"data":{"id":"methods-to-pass-parameters-to-os","htmlAttributes":{"id":"methods-to-pass-parameters-to-os"},"hProperties":{"id":"methods-to-pass-parameters-to-os","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"System call이 일어날 때, 어떤 system call은 parameter를 필요로 하는 경우가 있다. 이때 이 parameter를 어떻게 전달할지에 대한 일반적인 방법 세가지를 알아보자.","position":{"start":{"line":20,"column":1,"offset":862},"end":{"line":20,"column":110,"offset":971},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":862},"end":{"line":20,"column":110,"offset":971},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#pass-paramter-in-register","title":null,"children":[],"data":{"hProperties":{"aria-label":"pass paramter in register permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Pass Paramter in Register","position":{"start":{"line":22,"column":5,"offset":977},"end":{"line":22,"column":30,"offset":1002},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":973},"end":{"line":22,"column":30,"offset":1002},"indent":[]},"data":{"id":"pass-paramter-in-register","htmlAttributes":{"id":"pass-paramter-in-register"},"hProperties":{"id":"pass-paramter-in-register","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"가장 단순한 방법이다. Parameter를 바로 CPU 내의 레지스터로 전달하는 것이다. 그런데 문제는 paramter의 개수가 CPU 내에 있는 레지스터의 개수를 초과할 수 있다는 것이다.","position":{"start":{"line":24,"column":1,"offset":1004},"end":{"line":24,"column":107,"offset":1110},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1004},"end":{"line":24,"column":107,"offset":1110},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#pass-address-of-the-block-in-register","title":null,"children":[],"data":{"hProperties":{"aria-label":"pass address of the block in register permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Pass Address of the Block in Register","position":{"start":{"line":26,"column":5,"offset":1116},"end":{"line":26,"column":42,"offset":1153},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1112},"end":{"line":26,"column":42,"offset":1153},"indent":[]},"data":{"id":"pass-address-of-the-block-in-register","htmlAttributes":{"id":"pass-address-of-the-block-in-register"},"hProperties":{"id":"pass-address-of-the-block-in-register","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"두번째 방법은 Paramter를 일단 메모리나 테이블, 혹은 블럭단위로 저장해두고 해당 메모리 주소를 CPU의 레지스터에 보관하는 방법이다. 리눅스와 솔라리스가 이 방법을 사용한다.","position":{"start":{"line":28,"column":1,"offset":1155},"end":{"line":28,"column":102,"offset":1256},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1155},"end":{"line":28,"column":102,"offset":1256},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#use-stack","title":null,"children":[],"data":{"hProperties":{"aria-label":"use stack permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Use Stack","position":{"start":{"line":30,"column":5,"offset":1262},"end":{"line":30,"column":14,"offset":1271},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1258},"end":{"line":30,"column":14,"offset":1271},"indent":[]},"data":{"id":"use-stack","htmlAttributes":{"id":"use-stack"},"hProperties":{"id":"use-stack","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"Parameter를 스택개념을 사용하여 Push 하고 Pop 하는 방식으로 CPU의 레지스터에 전달하는 방법도 있다.","position":{"start":{"line":32,"column":1,"offset":1273},"end":{"line":32,"column":66,"offset":1338},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1273},"end":{"line":32,"column":66,"offset":1338},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#what-to-use","title":null,"children":[],"data":{"hProperties":{"aria-label":"what to use permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"What to Use?","position":{"start":{"line":34,"column":5,"offset":1344},"end":{"line":34,"column":17,"offset":1356},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1340},"end":{"line":34,"column":17,"offset":1356},"indent":[]},"data":{"id":"what-to-use","htmlAttributes":{"id":"what-to-use"},"hProperties":{"id":"what-to-use","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"일반적으로는 두번째, 메모리 주소를 전달하는 방법과, 세번째, 스택구조로 paramter를 관리하고 전달하는 방식이 사용된다. 왜냐하면 첫번재 방법은 paramter의 갯수에 제한을 받지만 두번째, 세번째 방법은 parameter의 갯수나 길이에 제한이 없기 때문이다.","position":{"start":{"line":36,"column":1,"offset":1358},"end":{"line":36,"column":151,"offset":1508},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1358},"end":{"line":36,"column":151,"offset":1508},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"link","url":"#type-of-system-call","title":null,"children":[],"data":{"hProperties":{"aria-label":"type of system call permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Type of System Call","position":{"start":{"line":38,"column":3,"offset":1512},"end":{"line":38,"column":22,"offset":1531},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1510},"end":{"line":38,"column":22,"offset":1531},"indent":[]},"data":{"id":"type-of-system-call","htmlAttributes":{"id":"type-of-system-call"},"hProperties":{"id":"type-of-system-call","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"Sytem call은 여러 상황에 따라 적절하게 사용된다. System call에 어떤 종류가 있는지 확인해보.","position":{"start":{"line":40,"column":1,"offset":1533},"end":{"line":40,"column":63,"offset":1595},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1533},"end":{"line":40,"column":63,"offset":1595},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#process-control","title":null,"children":[],"data":{"hProperties":{"aria-label":"process control permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Process Control","position":{"start":{"line":42,"column":4,"offset":1600},"end":{"line":42,"column":19,"offset":1615},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1597},"end":{"line":42,"column":19,"offset":1615},"indent":[]},"data":{"id":"process-control","htmlAttributes":{"id":"process-control"},"hProperties":{"id":"process-control","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"System call을 통해 프로세스가 실행되기도 하고 종료되기도 한다. 또한 작업이 진행 중이던 process에서 load 나 execute system call을 통해 새로운 프로세스를 불러오기도 하고 실행시키기도 한다. multitasking system에서는 system call이 process control을 위해 더 자주 사용된다. 어떤 작업이 수행되는 동안 새로운 process를 로드해서 실행시키기도 하고 여러 프로세스에서 하나의 데이터를 한번에 접근하고 수정하는 일을 막기 위해서 공유데이터를 lock 하는 system call 도 존재한다.","position":{"start":{"line":44,"column":1,"offset":1617},"end":{"line":44,"column":314,"offset":1930},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":1617},"end":{"line":44,"column":314,"offset":1930},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#file-management","title":null,"children":[],"data":{"hProperties":{"aria-label":"file management permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"File Management","position":{"start":{"line":46,"column":4,"offset":1935},"end":{"line":46,"column":19,"offset":1950},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1932},"end":{"line":46,"column":19,"offset":1950},"indent":[]},"data":{"id":"file-management","htmlAttributes":{"id":"file-management"},"hProperties":{"id":"file-management","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"파일을 다루는 경우에도 다양한 system call 이 사용된다. 파일의 생성과 삭제, 파일 열기와 닫기, 파일 읽기와 쓰기, 커서위치 변경과 같은 모든 작업들이 system call에 의해 일어난다. 그리고 이 system call들은 단순히 파일을 위한 작업에서 뿐만 아니라 디렉토리를 다루는 작업에서도 일어난다.","position":{"start":{"line":48,"column":1,"offset":1952},"end":{"line":48,"column":178,"offset":2129},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1952},"end":{"line":48,"column":178,"offset":2129},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#information-maintanence","title":null,"children":[],"data":{"hProperties":{"aria-label":"information maintanence permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Information Maintanence","position":{"start":{"line":50,"column":4,"offset":2134},"end":{"line":50,"column":27,"offset":2157},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":2131},"end":{"line":50,"column":27,"offset":2157},"indent":[]},"data":{"id":"information-maintanence","htmlAttributes":{"id":"information-maintanence"},"hProperties":{"id":"information-maintanence","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"System call은 user program에게 정보를 전달하거나 시스템 안에서 일어난는 문제에 대한 정보를 보관하는 데에 사용되기도 한다. user program 에서는 시스템의 시간이나 날짜정보를 요청항때 사용되기도 하고, 디버깅을 위한 목적으로는 운영체제가 모든 프로세스에 대한 실행정보를 가지고 있기 때문에 이 정보들에 접근하기 위해 system call을 사용하기도 한다.","position":{"start":{"line":52,"column":1,"offset":2159},"end":{"line":52,"column":215,"offset":2373},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":2159},"end":{"line":52,"column":215,"offset":2373},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#communication","title":null,"children":[],"data":{"hProperties":{"aria-label":"communication permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Communication","position":{"start":{"line":54,"column":4,"offset":2378},"end":{"line":54,"column":17,"offset":2391},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":2375},"end":{"line":54,"column":17,"offset":2391},"indent":[]},"data":{"id":"communication","htmlAttributes":{"id":"communication"},"hProperties":{"id":"communication","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"여기서 communication은 process 사이에 일어나는 통신을 의미한다. 프로세스가 서로 통신하게 될 때, 일반적으로 두가지 모델을 통해 통신하게 된다.","position":{"start":{"line":56,"column":1,"offset":2393},"end":{"line":56,"column":91,"offset":2483},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":2393},"end":{"line":56,"column":91,"offset":2483},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#message-passing-model","title":null,"children":[],"data":{"hProperties":{"aria-label":"message passing model permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Message-Passing Model","position":{"start":{"line":58,"column":5,"offset":2489},"end":{"line":58,"column":26,"offset":2510},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":2485},"end":{"line":58,"column":26,"offset":2510},"indent":[]},"data":{"id":"message-passing-model","htmlAttributes":{"id":"message-passing-model"},"hProperties":{"id":"message-passing-model","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"이 방법은 말 그대로 process 들이 message 를 교환하는 방법이다. 이 message릉 교환하기 위해서 mailbox라는 것을 사용하게 된다. 서로에게 통신을 요청하거나 접근을 요청하기 위해서 system call이 사용되고 통신을 요청하는 쪽을 client, 그 요청을 받아 message 를 읽고 쓰는 쪽을 server 라고 한다. 보통 이런식으로 연결을 받아들일 때 사용되는 특수한 목적의 process 를 daemon 이라고 한다.","position":{"start":{"line":60,"column":1,"offset":2512},"end":{"line":60,"column":252,"offset":2763},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":2512},"end":{"line":60,"column":252,"offset":2763},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#shared-memory-model","title":null,"children":[],"data":{"hProperties":{"aria-label":"shared memory model permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Shared Memory Model","position":{"start":{"line":62,"column":5,"offset":2769},"end":{"line":62,"column":24,"offset":2788},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":2765},"end":{"line":62,"column":24,"offset":2788},"indent":[]},"data":{"id":"shared-memory-model","htmlAttributes":{"id":"shared-memory-model"},"hProperties":{"id":"shared-memory-model","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"이 방법은 프로세스가 다른 프로세스의 메모리 영역에 대한 접근을 하도록 하는 방식으로 이루어져 있다. 공유 메모리는 이미 다수의 프로세스가 접근하는 것을 허용하도록 동의되어 있어야한다. 왜냐하면, 일반적으로 운영체제는 어떤 프로세스가 다른 프로세스의 메모리에 접근하는 것을 허용하지 않기 때문이다.","position":{"start":{"line":64,"column":1,"offset":2790},"end":{"line":64,"column":167,"offset":2956},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":2790},"end":{"line":64,"column":167,"offset":2956},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#what-to-use-1","title":null,"children":[],"data":{"hProperties":{"aria-label":"what to use 1 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"What to Use?","position":{"start":{"line":66,"column":5,"offset":2962},"end":{"line":66,"column":17,"offset":2974},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":2958},"end":{"line":66,"column":17,"offset":2974},"indent":[]},"data":{"id":"what-to-use-1","htmlAttributes":{"id":"what-to-use-1"},"hProperties":{"id":"what-to-use-1","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"대부분의 시스템에서는 두 방법을 모두 구현한다.","position":{"start":{"line":68,"column":1,"offset":2976},"end":{"line":68,"column":27,"offset":3002},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":2976},"end":{"line":68,"column":27,"offset":3002},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Message passing model은 적은량에 데이터를 교환할 때 자주 사용되는데, 적은량의 데이터에서는 충돌이 일어날 상황이 없고 캄퓨터 간의 통신만 사용하면 되기 때문에 메모리를 공유하도록 설계하는 것 보다 구현이 간단하다.","position":{"start":{"line":70,"column":1,"offset":3004},"end":{"line":70,"column":130,"offset":3133},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":3004},"end":{"line":70,"column":130,"offset":3133},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Shared Memory Model은 메모리의 전송 속도를 그대로 사용하기 때문에 네트워크를 사용하는 통신보다 빠르고 편리하게 사용할 수 있다. 하지만 protection 문제와 빠른 메모리 접근에 대한 동기화 문제가 이슈이다.","position":{"start":{"line":72,"column":1,"offset":3135},"end":{"line":72,"column":128,"offset":3262},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":3135},"end":{"line":72,"column":128,"offset":3262},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#protection","title":null,"children":[],"data":{"hProperties":{"aria-label":"protection permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Protection","position":{"start":{"line":74,"column":4,"offset":3267},"end":{"line":74,"column":14,"offset":3277},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":3264},"end":{"line":74,"column":14,"offset":3277},"indent":[]},"data":{"id":"protection","htmlAttributes":{"id":"protection"},"hProperties":{"id":"protection","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"Protection은 운영체제가 사용자로부터 시스템의 리소스들을 보호하는 것을 말한다. 이것을 위해서 파일의 접근 허가권한을 요청하는 permission() system call이 사용되고 특정 사용자의 리소스 사용을 허가하거나 제한하는 allow/deny_user() system call이 사용되기도 한다.","position":{"start":{"line":76,"column":1,"offset":3279},"end":{"line":76,"column":174,"offset":3452},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":3279},"end":{"line":76,"column":174,"offset":3452},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":77,"column":1,"offset":3453}}}}