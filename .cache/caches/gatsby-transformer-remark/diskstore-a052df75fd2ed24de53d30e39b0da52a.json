{"expireTime":9007200877354309000,"key":"transformer-remark-markdown-ast-526203800ed80d40bb88eb7d9dfdfa60-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.acmicpc.net/problem/9252","children":[{"type":"text","value":"https://www.acmicpc.net/problem/9252","position":{"start":{"line":2,"column":2,"offset":2},"end":{"line":2,"column":38,"offset":38},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":77,"offset":77},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":77,"offset":77},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#문제","title":null,"children":[],"data":{"hProperties":{"aria-label":"문제 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"문제","position":{"start":{"line":4,"column":4,"offset":82},"end":{"line":4,"column":6,"offset":84},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":79},"end":{"line":4,"column":6,"offset":84},"indent":[]},"data":{"id":"문제","htmlAttributes":{"id":"문제"},"hProperties":{"id":"문제","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"문제","position":{"start":{"line":6,"column":3,"offset":88},"end":{"line":6,"column":5,"offset":90},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":86},"end":{"line":6,"column":7,"offset":92},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":6,"column":7,"offset":92},"end":{"line":6,"column":11,"offset":96},"indent":[]}},{"type":"text","value":"\n방향 그래프가 주어졌을 때, 그 그래프를 SCC들로 나누는 프로그램을 작성하시오.","position":{"start":{"line":6,"column":11,"offset":96},"end":{"line":7,"column":46,"offset":142},"indent":[1]}}],"position":{"start":{"line":6,"column":1,"offset":86},"end":{"line":7,"column":46,"offset":142},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"방향 그래프의 SCC는 우선 정점의 최대 부분집합이며, 그 부분집합에 들어있는 서로 다른 임의의 두 정점 u, v에 대해서 u에서 v로 가는 경로와 v에서 u로 가는 경로가 모두 존재하는 경우를 말한다.","position":{"start":{"line":9,"column":1,"offset":144},"end":{"line":9,"column":114,"offset":257},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":144},"end":{"line":9,"column":114,"offset":257},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"![](","position":{"start":{"line":11,"column":1,"offset":259},"end":{"line":11,"column":5,"offset":263},"indent":[]}},{"type":"link","title":null,"url":"https://www.acmicpc.net/JudgeOnline/upload/201008/scco.PNG","children":[{"type":"text","value":"https://www.acmicpc.net/JudgeOnline/upload/201008/scco.PNG","position":{"start":{"line":11,"column":5,"offset":263},"end":{"line":11,"column":63,"offset":321},"indent":[]}}],"position":{"start":{"line":11,"column":5,"offset":263},"end":{"line":11,"column":63,"offset":321},"indent":[]}},{"type":"text","value":"” />","position":{"start":{"line":11,"column":63,"offset":321},"end":{"line":11,"column":67,"offset":325},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":259},"end":{"line":11,"column":67,"offset":325},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"예를 들어 위와 같은 그림을 보자. 이 그래프에서 SCC들은 {a, b, e}, {c, d}, {f, g}, {h} 가 있다. 물론 h에서 h로 가는 간선이 없는 경우에도 {h}는 SCC를 이룬다.","position":{"start":{"line":13,"column":1,"offset":327},"end":{"line":13,"column":111,"offset":437},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":327},"end":{"line":13,"column":111,"offset":437},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"입력","position":{"start":{"line":15,"column":3,"offset":441},"end":{"line":15,"column":5,"offset":443},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":439},"end":{"line":15,"column":7,"offset":445},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":15,"column":7,"offset":445},"end":{"line":15,"column":11,"offset":449},"indent":[]}},{"type":"text","value":"\n첫째 줄에 두 정수 V(1≤V≤10,000), E(1≤E≤100,000)가 주어진다. 이는 그래프가 V개의 정점과 E개의 간선으로 이루어져 있다는 의미이다. 다음 E개의 줄에는 간선에 대한 정보를 나타내는 두 정수 A, B가 주어진다. 이는 A번 정점과 B번 정점이 연결되어 있다는 의미이다. 이때 방향은 A->B가 된다.","position":{"start":{"line":15,"column":11,"offset":449},"end":{"line":16,"column":181,"offset":630},"indent":[1]}}],"position":{"start":{"line":15,"column":1,"offset":439},"end":{"line":16,"column":181,"offset":630},"indent":[1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"출력","position":{"start":{"line":18,"column":3,"offset":634},"end":{"line":18,"column":5,"offset":636},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":632},"end":{"line":18,"column":7,"offset":638},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":18,"column":7,"offset":638},"end":{"line":18,"column":11,"offset":642},"indent":[]}},{"type":"text","value":"\n첫째 줄에 SCC의 개수 K를 출력한다. 다음 K개의 줄에는 각 줄에 하나의 SCC에 속한 정점의 번호를 출력한다. 각 줄의 끝에는 -1을 출력하여 그 줄의 끝을 나타낸다. 각각의 SCC를 출력할 때 그 안에 속한 정점들은 오름차순으로 출력한다. 또한 여러 개의 SCC에 대해서는 그 안에 속해있는 가장 작은 정점의 정점 번호 순으로 출력한다.","position":{"start":{"line":18,"column":11,"offset":642},"end":{"line":19,"column":193,"offset":835},"indent":[1]}}],"position":{"start":{"line":18,"column":1,"offset":632},"end":{"line":19,"column":193,"offset":835},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#풀이","title":null,"children":[],"data":{"hProperties":{"aria-label":"풀이 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"풀이","position":{"start":{"line":21,"column":4,"offset":840},"end":{"line":21,"column":6,"offset":842},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":837},"end":{"line":21,"column":6,"offset":842},"indent":[]},"data":{"id":"풀이","htmlAttributes":{"id":"풀이"},"hProperties":{"id":"풀이","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"알고리즘만 봤을 때는 단순해보였는데, 실제로 풀어보니 쉽지 않았고 꽤 많은 시간이 걸렸다. 알고리즘은 정말 단순하다. 주어진 그래프를 DFS로 순회해서 각 노드마다 탐색이 완전히 끝나는 Finish Time을 기록하고, 그래프의 각 간선을 역방향으로 만든 뒤에, Finish Time 이 컸던 순서대로 각 노드를 시작점으로 삼아 트리를 만들면 된다.","position":{"start":{"line":23,"column":1,"offset":844},"end":{"line":23,"column":196,"offset":1039},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":844},"end":{"line":23,"column":196,"offset":1039},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"문제에서 생각보다 고려해야할 요소가 있었으니 하나씩 다시 정리해보자.","position":{"start":{"line":25,"column":1,"offset":1041},"end":{"line":25,"column":39,"offset":1079},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1041},"end":{"line":25,"column":39,"offset":1079},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","url":"#transposed-graph","title":null,"children":[],"data":{"hProperties":{"aria-label":"transposed graph permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Transposed Graph","position":{"start":{"line":27,"column":6,"offset":1086},"end":{"line":27,"column":22,"offset":1102},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1081},"end":{"line":27,"column":22,"offset":1102},"indent":[]},"data":{"id":"transposed-graph","htmlAttributes":{"id":"transposed-graph"},"hProperties":{"id":"transposed-graph","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"그래프에 역방향을 취하는 것은 간단했다. 처음에 입력을 받으면서 별도의 역방향 그래프를 저장하는 Adjacency List 를 만들어두고 그곳에도 함께 저장을 해주었다.","position":{"start":{"line":29,"column":1,"offset":1104},"end":{"line":29,"column":95,"offset":1198},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1104},"end":{"line":29,"column":95,"offset":1198},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","url":"#finish-time","title":null,"children":[],"data":{"hProperties":{"aria-label":"finish time permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Finish Time","position":{"start":{"line":31,"column":6,"offset":1205},"end":{"line":31,"column":17,"offset":1216},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1200},"end":{"line":31,"column":17,"offset":1216},"indent":[]},"data":{"id":"finish-time","htmlAttributes":{"id":"finish-time"},"hProperties":{"id":"finish-time","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"수업시간에 배웠던 Finish Time을 기록하는 방법은 최초에 count와 같은 0에서부터 시작하는 카운터 변수를 만들고 각 노드의 탐색이 시작될 때와 끝날 때 카운터를 하나씩 올리면서 탐색의 시작시간과 끝시간을 기록하는 것이었다. 그런데 이 문제에서는 기존 그래프에 대해 DFS를 마쳤을 때, Finish Time 을 기준으로 정렬을 해주어야 하는데, 정렬과정에서 각 Finish Time에 대한 정점을 인덱스로 관리했기 때문에 정렬이후에는 위치가 어디였는지 파악하는 것이 어려웠다.","position":{"start":{"line":33,"column":1,"offset":1218},"end":{"line":33,"column":273,"offset":1490},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1218},"end":{"line":33,"column":273,"offset":1490},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Pair 를 사용해볼까 했지만 너무 코드가 더러워졌고, 구글링을 통해서 스택을 사용하는 힌트를 얻었다. 사실 위상정렬을 구현할 때 스택을 사용했던 것을 기억했다면 쉬웠을텐데 역시 문제를 풀긴 풀긴 풀어도 확실히 내 것이 되는데는 훈련이 필요한 것 같다. 스택을 통해서 구현하기 위해서 dfs 함수가 리턴되는 것이 해당 노드에 대한 탐색이 끝났다는 의미이기 때문에 dfs 함수 제일 끝에 스택에 노드 번호를 저장해주었다.","position":{"start":{"line":35,"column":1,"offset":1492},"end":{"line":35,"column":235,"offset":1726},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1492},"end":{"line":35,"column":235,"offset":1726},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","url":"#count--sorting","title":null,"children":[],"data":{"hProperties":{"aria-label":"count  sorting permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Count & Sorting","position":{"start":{"line":37,"column":6,"offset":1733},"end":{"line":37,"column":21,"offset":1748},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1728},"end":{"line":37,"column":21,"offset":1748},"indent":[]},"data":{"id":"count--sorting","htmlAttributes":{"id":"count--sorting"},"hProperties":{"id":"count--sorting","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"일단 SCC가 몇개인지 출력을 마지막에 해주어야 하는데, 출력 위치가 가장 처음이다. 이 말은 그냥 역방향 그래프를 순회하면서 Path를 출력해주면 안된다는 것을 의미한다. 결과를 따로 어딘가에 저장해야하기 때문에 나는 result 라는 ","position":{"start":{"line":39,"column":1,"offset":1750},"end":{"line":39,"column":134,"offset":1883},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">vector&lt;vector&lt;int&gt;&gt;</code>","position":{"start":{"line":39,"column":134,"offset":1883},"end":{"line":39,"column":155,"offset":1904},"indent":[]}},{"type":"text","value":" 타입의 변수를 만들어서 한 정점에 대한 탐색결과를 저장해주었다. 벡터의 크기를 너무 크게 만들어놓으면 안될 것 같아 탐색이 가능한 각 정점을 벡터에 하나씩 넣어주는 방법으로 저장했다.","position":{"start":{"line":39,"column":155,"offset":1904},"end":{"line":39,"column":258,"offset":2007},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1750},"end":{"line":39,"column":258,"offset":2007},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"정렬은 2차원 벡터이기 때문에 각 행에 해당하는 벡터를 먼저 정렬해주고 정렬이 완료된 벡터들을 첫 열을 기준으로 다시 정렬해주었다.","position":{"start":{"line":41,"column":1,"offset":2009},"end":{"line":41,"column":74,"offset":2082},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":2009},"end":{"line":41,"column":74,"offset":2082},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","url":"#memory-space","title":null,"children":[],"data":{"hProperties":{"aria-label":"memory space permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Memory Space","position":{"start":{"line":43,"column":6,"offset":2089},"end":{"line":43,"column":18,"offset":2101},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":2084},"end":{"line":43,"column":18,"offset":2101},"indent":[]},"data":{"id":"memory-space","htmlAttributes":{"id":"memory-space"},"hProperties":{"id":"memory-space","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"이 문제를 풀면서 제일 힘들었던 부분이 메모리 관리에 대한 부분이었다. 테스트케이스를 통과해서 기쁘게 문제를 제출했는데 메모리초과로 오답처리가 되었다. 나는 코드를 단순화 시키려고 SCC와 초기 탐색을 위한 DFS를 한 함수로 공유하게끔 했었는데, 파라미터로 Adjacency List를 넘겨주었다. 내가 아주 잘못 생각했던 부분이다. 함수가 재귀적으로 계속 호출되면서, 길이 최대 10001 X 10001 에 해당하는 2차원 벡터가 계속해서 새로 생성된 것이다. 아주 기초적인 부분이었는데 놓친게 아쉬웠다. 결국 두 개의 함수로 기능을 나누고, 벡터를 전역변수로 선언해서 사용해서 해결했다.","position":{"start":{"line":45,"column":1,"offset":2103},"end":{"line":45,"column":332,"offset":2434},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":2103},"end":{"line":45,"column":332,"offset":2434},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#코드","title":null,"children":[],"data":{"hProperties":{"aria-label":"코드 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"코드","position":{"start":{"line":47,"column":4,"offset":2439},"end":{"line":47,"column":6,"offset":2441},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":2436},"end":{"line":47,"column":6,"offset":2441},"indent":[]},"data":{"id":"코드","htmlAttributes":{"id":"코드"},"hProperties":{"id":"코드","style":"position:relative;"}}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n\nusing namespace std<span class=\"token punctuation\">;</span>\n\nbool visited<span class=\"token punctuation\">[</span><span class=\"token number\">10001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> result<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> adj<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> adjTrans<span class=\"token punctuation\">;</span>\n\nstack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>stk<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    visited<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span>  i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> adj<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>adj<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>adj<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    stk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">scc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    visited<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span>  i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> adjTrans<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>adjTrans<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">scc</span><span class=\"token punctuation\">(</span>adjTrans<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>adjTrans<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> V<span class=\"token punctuation\">,</span> E<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>V<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>E<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    adj<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>V<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    adjTrans<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>V<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> E  <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        adj<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        adjTrans<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> V <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span>V <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stk<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>stk<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">temp</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            temp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stk<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">scc</span><span class=\"token punctuation\">(</span>stk<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        stk<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lu\\n\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> v <span class=\"token operator\">:</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":49,"column":1,"offset":2443},"end":{"line":135,"column":4,"offset":4093},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":136,"column":1,"offset":4094}}}}