{"expireTime":9007200877354939000,"key":"transformer-remark-markdown-html-ast-aa11e9bb644d5367d5133770a5438bd3-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.acmicpc.net/problem/1826"},"children":[{"type":"text","value":"https://www.acmicpc.net/problem/1826","position":{"start":{"line":2,"column":2,"offset":2},"end":{"line":2,"column":38,"offset":38}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":77,"offset":77}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":77,"offset":77}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"문제","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%EB%AC%B8%EC%A0%9C","aria-label":"문제 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"문제","position":{"start":{"line":4,"column":4,"offset":82},"end":{"line":4,"column":6,"offset":84}}}],"position":{"start":{"line":4,"column":1,"offset":79},"end":{"line":4,"column":6,"offset":84}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"문제","position":{"start":{"line":6,"column":3,"offset":88},"end":{"line":6,"column":5,"offset":90}}}],"position":{"start":{"line":6,"column":1,"offset":86},"end":{"line":6,"column":7,"offset":92}}},{"type":"raw","value":"<br>","position":{"start":{"line":6,"column":7,"offset":92},"end":{"line":6,"column":11,"offset":96}}}],"position":{"start":{"line":6,"column":1,"offset":86},"end":{"line":6,"column":11,"offset":96}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"성경이는 트럭을 정글 속에서 운전하다가 트럭의 연료탱크에 갑자기 구멍이 나서 1km를 가는데 1L의 연료가 새 나가게 되었다. 이것을 고치기 위해서는 가장 가까운 마을에 가야 한다. 그런데 그냥 가다가는 중간에 연료가 다 빠질 수가 있다. 다행스럽게도 정글 곳곳에 연료를 채울 수 있는 주유소가 N개 있다. 그런데 정글 속에서 중간에 차를 멈추는 행위는 매우 위험한 행위이므로 주유소에서 멈추는 횟수를 최소화 하려 한다.","position":{"start":{"line":8,"column":1,"offset":98},"end":{"line":8,"column":236,"offset":333}}}],"position":{"start":{"line":8,"column":1,"offset":98},"end":{"line":8,"column":236,"offset":333}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"그리고 다행이도 성경이의 트럭은 매우 좋아서 연료 탱크에는 연료의 제한이 없이 많이 충분히 많이 넣을 수 있다고 한다. 각각의 주유소의 위치와, 각 주유소에서 얻을 수 있는 연료의 양이 주어져 있을 때, 주유소에서 멈추는 횟수를 구하는 프로그램을 작성하시오.","position":{"start":{"line":10,"column":1,"offset":335},"end":{"line":10,"column":145,"offset":479}}}],"position":{"start":{"line":10,"column":1,"offset":335},"end":{"line":10,"column":145,"offset":479}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"정글은 일직선이고, 성경이의 트럭과 주유소도 모두 일직선 위에 있다. 주유소는 모두 성경이의 트럭을 기준으로 오른쪽에 있다.","position":{"start":{"line":12,"column":1,"offset":481},"end":{"line":12,"column":70,"offset":550}}}],"position":{"start":{"line":12,"column":1,"offset":481},"end":{"line":12,"column":70,"offset":550}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"입력","position":{"start":{"line":14,"column":3,"offset":554},"end":{"line":14,"column":5,"offset":556}}}],"position":{"start":{"line":14,"column":1,"offset":552},"end":{"line":14,"column":7,"offset":558}}},{"type":"raw","value":"<br>","position":{"start":{"line":14,"column":7,"offset":558},"end":{"line":14,"column":11,"offset":562}}}],"position":{"start":{"line":14,"column":1,"offset":552},"end":{"line":14,"column":11,"offset":562}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"첫째 줄에 주유소의 개수 N(1 ≤ N ≤ 10,000)가 주어지고 두 번째 줄부터 N+1번째 줄 까지 주유소의 정보가 주어진다. 주유소의 정보는 두개의 정수 a,b로 이루어 져 있는데 a(1 ≤ a ≤ 1,000,000)는 성경이의 시작 위치에서 주유소 까지의 거리, 그리고 b(1 ≤ b ≤ 100)는 그 주유소에서 채울 수 있는 연료의 양을 의미한다. 그리고 N+2번째 줄에는 두 정수 L과 P가 주어지는데 L(1 ≤ L ≤ 1,000,000)은 성경이의 위치에서 마을까지의 거리, (1 ≤ P ≤ 1,000,000)는 트럭에 원래 있던 연료의 양을 의미한다.","position":{"start":{"line":16,"column":1,"offset":564},"end":{"line":16,"column":317,"offset":880}}}],"position":{"start":{"line":16,"column":1,"offset":564},"end":{"line":16,"column":317,"offset":880}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"출력","position":{"start":{"line":18,"column":3,"offset":884},"end":{"line":18,"column":5,"offset":886}}}],"position":{"start":{"line":18,"column":1,"offset":882},"end":{"line":18,"column":7,"offset":888}}},{"type":"raw","value":"<br>","position":{"start":{"line":18,"column":7,"offset":888},"end":{"line":18,"column":11,"offset":892}}}],"position":{"start":{"line":18,"column":1,"offset":882},"end":{"line":18,"column":11,"offset":892}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"첫째 줄에 주유소에서 멈추는 횟수를 출력한다. 만약 마을에 도착하지 못할경우 -1을 출력한다.","position":{"start":{"line":20,"column":1,"offset":894},"end":{"line":20,"column":53,"offset":946}}}],"position":{"start":{"line":20,"column":1,"offset":894},"end":{"line":20,"column":53,"offset":946}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"풀이","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%ED%92%80%EC%9D%B4","aria-label":"풀이 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"풀이","position":{"start":{"line":22,"column":4,"offset":951},"end":{"line":22,"column":6,"offset":953}}}],"position":{"start":{"line":22,"column":1,"offset":948},"end":{"line":22,"column":6,"offset":953}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"그리디 접근으로 푸는 문제였다. 처음에는 갈 수 있는 가장 긴 거리까지 계속 이동하게하면 될 줄 알았는데, 질문게시판을 보니 그렇게 하면 안되는 경우가 있었다.","position":{"start":{"line":24,"column":1,"offset":955},"end":{"line":24,"column":90,"offset":1044}}}],"position":{"start":{"line":24,"column":1,"offset":955},"end":{"line":24,"column":90,"offset":1044}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2\n2 3\n4 7\n14 4</code></pre></div>","position":{"start":{"line":26,"column":1,"offset":1046},"end":{"line":31,"column":4,"offset":1068}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"위와 같은 입력이 주어졌을 때, 2번과 4번 주유소를 모두 거쳐서 목적지로 가게되면 총 연료가 14가 되므로 목적지에 도착이 가능한데, 항상 계속 긴 거리로 가려고 하면 시작연료가 4이기 때문에 2번 주유소를 건너뛰고 바로 4번 주유소로 가게된다.","position":{"start":{"line":33,"column":1,"offset":1070},"end":{"line":33,"column":139,"offset":1208}}}],"position":{"start":{"line":33,"column":1,"offset":1070},"end":{"line":33,"column":139,"offset":1208}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"따라서 이 문제에 대한 다른 접근이 필요하다. 해결책은 위 접근에서 하나의 조건을 더 더하는 것이다. 일단 현재 연료로 방문할 수 있는 모든 주유소 중에서 연료량이 가장 많은 주유소에 들린다. 동시에 드릴 수 있는 다른 주유소들도 체크해둔다. 그렇게 얻은 연료를 가지고 다시 방문할 수 있는 모든 주유소 중 연료량이 가장 많은 주유소에 방문한다. 이렇게 했을 때, 목적지에 도달하지 못하면 방문하지 않았지만 체크해둔 주유소를 확인해서 연료량이 많은 순서대로 들리도록 해본다. 목적지에 방문할 수 있는 연료가 채워지면, 추가한 주유소까지 포함해서 방문한 모든 주유소의 개수를 출력하고, 모든 주유소를 다 들리는 것을 가정했지만 목적지까지 갈 수 있는 연료량이 채워지지 않는다면 -1을 출력한다.","position":{"start":{"line":35,"column":1,"offset":1210},"end":{"line":35,"column":388,"offset":1597}}}],"position":{"start":{"line":35,"column":1,"offset":1210},"end":{"line":35,"column":388,"offset":1597}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"위 알고리즘을 구현하기 위해서 우선순위 큐를 사용하는 것이 용이하다. 현재 연료로 방문할 수 있는 모든 주유소를 우선순위 큐에 넣어두고, 실제로 방문할 때는 우선순위큐에서 연료량이 가장 큰 주유소만 들린다. 우선순위 큐에는 아직 방문할 수 있는 주유소가 남아있지만 방금 업데이트한 연료량으로 갈 수 있는 모든 주유소를 우선순위 큐에 넣는다. 그리고 실제로 방문할 주유소는 이전에 큐에 넣었던 주유소까지 모두 포함해서 연료량이 가장 많은 주유소에 방문한다.","position":{"start":{"line":37,"column":1,"offset":1599},"end":{"line":37,"column":255,"offset":1853}}}],"position":{"start":{"line":37,"column":1,"offset":1599},"end":{"line":37,"column":255,"offset":1853}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"코드","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%EC%BD%94%EB%93%9C","aria-label":"코드 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"코드","position":{"start":{"line":39,"column":4,"offset":1858},"end":{"line":39,"column":6,"offset":1860}}}],"position":{"start":{"line":39,"column":1,"offset":1855},"end":{"line":39,"column":6,"offset":1860}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Compare</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">,</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    ios_base<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> N<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> N<span class=\"token punctuation\">;</span>\n\n    priority_queue<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token punctuation\">,</span> Compare<span class=\"token operator\">></span> pq<span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">>></span> stations<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span>\n        stations<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>stations<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> stations<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> L<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> L <span class=\"token operator\">>></span> P<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> currFuel <span class=\"token operator\">=</span> P<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> stationCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>currFuel <span class=\"token operator\">&lt;</span> L<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> iter <span class=\"token operator\">=</span> stations<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter <span class=\"token operator\">!=</span> stations<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>stations<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;=</span> currFuel<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                pq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                iter <span class=\"token operator\">=</span> stations<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                iter<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        currFuel <span class=\"token operator\">+=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n        pq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stationCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> stationCount<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":41,"column":1,"offset":1862},"end":{"line":108,"column":4,"offset":3074}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":109,"column":1,"offset":3075}}}}