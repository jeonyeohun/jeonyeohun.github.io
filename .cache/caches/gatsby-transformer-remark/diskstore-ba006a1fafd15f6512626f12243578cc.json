{"expireTime":9007200877354938000,"key":"transformer-remark-markdown-ast-3a7918ed6c29356f817726cbb8ac3c14-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.acmicpc.net/problem/1966","children":[{"type":"text","value":"https://www.acmicpc.net/problem/1966","position":{"start":{"line":2,"column":2,"offset":2},"end":{"line":2,"column":38,"offset":38},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":77,"offset":77},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":77,"offset":77},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#문제","title":null,"children":[],"data":{"hProperties":{"aria-label":"문제 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"문제","position":{"start":{"line":4,"column":4,"offset":82},"end":{"line":4,"column":6,"offset":84},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":79},"end":{"line":4,"column":6,"offset":84},"indent":[]},"data":{"id":"문제","htmlAttributes":{"id":"문제"},"hProperties":{"id":"문제","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"문제","position":{"start":{"line":6,"column":3,"offset":88},"end":{"line":6,"column":5,"offset":90},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":86},"end":{"line":6,"column":7,"offset":92},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":6,"column":7,"offset":92},"end":{"line":6,"column":11,"offset":96},"indent":[]}},{"type":"text","value":"\n여러분도 알다시피 여러분의 프린터 기기는 여러분이 인쇄하고자 하는 문서를 인쇄 명령을 받은 ‘순서대로’, 즉 먼저 요청된 것을 먼저 인쇄한다. 여러 개의 문서가 쌓인다면 Queue 자료구조에 쌓여서 FIFO - First In First Out - 에 따라 인쇄가 되게 된다. 하지만 상근이는 새로운 프린터기 내부 소프트웨어를 개발하였는데, 이 프린터기는 다음과 같은 조건에 따라 인쇄를 하게 된다.","position":{"start":{"line":6,"column":11,"offset":96},"end":{"line":7,"column":224,"offset":320},"indent":[1]}}],"position":{"start":{"line":6,"column":1,"offset":86},"end":{"line":7,"column":224,"offset":320},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"현재 Queue의 가장 앞에 있는 문서의 ‘중요도’를 확인한다.\n나머지 문서들 중 현재 문서보다 중요도가 높은 문서가 하나라도 있다면, 이 문서를 인쇄하지 않고 Queue의 가장 뒤에 재배치 한다. 그렇지 않다면 바로 인쇄를 한다.\n예를 들어 Queue에 4개의 문서(A B C D)가 있고, 중요도가 2 1 4 3 라면 C를 인쇄하고, 다음으로 D를 인쇄하고 A, B를 인쇄하게 된다.","position":{"start":{"line":9,"column":1,"offset":322},"end":{"line":11,"column":87,"offset":538},"indent":[1,1]}}],"position":{"start":{"line":9,"column":1,"offset":322},"end":{"line":11,"column":87,"offset":538},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"여러분이 할 일은, 현재 Queue에 있는 문서의 수와 중요도가 주어졌을 때, 어떤 한 문서가 몇 번째로 인쇄되는지 알아내는 것이다. 예를 들어 위의 예에서 C문서는 1번째로, A문서는 3번째로 인쇄되게 된다.","position":{"start":{"line":13,"column":1,"offset":540},"end":{"line":13,"column":118,"offset":657},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":540},"end":{"line":13,"column":118,"offset":657},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"입력","position":{"start":{"line":15,"column":3,"offset":661},"end":{"line":15,"column":5,"offset":663},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":659},"end":{"line":15,"column":7,"offset":665},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":15,"column":7,"offset":665},"end":{"line":15,"column":11,"offset":669},"indent":[]}},{"type":"text","value":"\n첫 줄에 테스트케이스의 수가 주어진다. 각 테스트케이스는 두 줄로 이루어져 있다.","position":{"start":{"line":15,"column":11,"offset":669},"end":{"line":16,"column":46,"offset":715},"indent":[1]}}],"position":{"start":{"line":15,"column":1,"offset":659},"end":{"line":16,"column":46,"offset":715},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"테스트케이스의 첫 번째 줄에는 문서의 개수 N(1 ≤ N ≤ 100)과, 몇 번째로 인쇄되었는지 궁금한 문서가 현재 Queue에서 몇 번째에 놓여 있는지를 나타내는 정수 M(0 ≤ M < N)이 주어진다. 이때 맨 왼쪽은 0번째라고 하자. 두 번째 줄에는 N개 문서의 중요도가 차례대로 주어진다. 중요도는 1 이상 9 이하의 정수이고, 중요도가 같은 문서가 여러 개 있을 수도 있다.","position":{"start":{"line":18,"column":1,"offset":717},"end":{"line":18,"column":215,"offset":931},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":717},"end":{"line":18,"column":215,"offset":931},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"출력","position":{"start":{"line":20,"column":3,"offset":935},"end":{"line":20,"column":5,"offset":937},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":933},"end":{"line":20,"column":7,"offset":939},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":20,"column":7,"offset":939},"end":{"line":20,"column":11,"offset":943},"indent":[]}},{"type":"text","value":"\n각 테스트 케이스에 대해 문서가 몇 번째로 인쇄되는지 출력한다.","position":{"start":{"line":20,"column":11,"offset":943},"end":{"line":21,"column":36,"offset":979},"indent":[1]}}],"position":{"start":{"line":20,"column":1,"offset":933},"end":{"line":21,"column":36,"offset":979},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#풀이","title":null,"children":[],"data":{"hProperties":{"aria-label":"풀이 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"풀이","position":{"start":{"line":23,"column":4,"offset":984},"end":{"line":23,"column":6,"offset":986},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":981},"end":{"line":23,"column":6,"offset":986},"indent":[]},"data":{"id":"풀이","htmlAttributes":{"id":"풀이"},"hProperties":{"id":"풀이","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"문제를 보자마자 ","position":{"start":{"line":25,"column":1,"offset":988},"end":{"line":25,"column":10,"offset":997},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&quot;어 이거 우선순위 큐 아니야?&quot;</code>","position":{"start":{"line":25,"column":10,"offset":997},"end":{"line":25,"column":30,"offset":1017},"indent":[]}},{"type":"text","value":" 라고 생각했다. 그리고 덕분에 코드를 싹 지우고 다시 짜게 되었다.. 우선순위 큐를 사용할 수 없는 이유는 단순하다. 같은 우선순위의 문서들이 중복되어서 나오면 어떤 문서가 먼저 등록되고 뒤로 밀려났는지 알 수가 없다. 그래서 문제에서 요구하는대로 그대로 풀어야하는 시뮬레이션 문제라는 생각이 들었고, 컨테이너의 가장 앞과 맨 뒤 위치에 대한 push 와 pop이 용이한 ","position":{"start":{"line":25,"column":30,"offset":1017},"end":{"line":25,"column":239,"offset":1226},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">deque</code>","position":{"start":{"line":25,"column":239,"offset":1226},"end":{"line":25,"column":246,"offset":1233},"indent":[]}},{"type":"text","value":" 자료구조를 사용하기로 했다. 풀이는 단순하다. 제일 앞 기준이 되는 문서를 제외하고 덱 안에 있는 모든 문서들을 확인 한 뒤에 만약 우선순위가 높은 문서가 있다면 제일 앞에 있는 문서를 push","position":{"start":{"line":25,"column":246,"offset":1233},"end":{"line":25,"column":355,"offset":1342},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"back(front()) 로 옮겨주고 pop","position":{"start":{"line":25,"column":356,"offset":1343},"end":{"line":25,"column":380,"offset":1367},"indent":[]}}],"position":{"start":{"line":25,"column":355,"offset":1342},"end":{"line":25,"column":381,"offset":1368},"indent":[]}},{"type":"text","value":"front()를 해준다.","position":{"start":{"line":25,"column":381,"offset":1368},"end":{"line":25,"column":394,"offset":1381},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":988},"end":{"line":25,"column":394,"offset":1381},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#코드","title":null,"children":[],"data":{"hProperties":{"aria-label":"코드 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"코드","position":{"start":{"line":27,"column":4,"offset":1386},"end":{"line":27,"column":6,"offset":1388},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1383},"end":{"line":27,"column":6,"offset":1388},"indent":[]},"data":{"id":"코드","htmlAttributes":{"id":"코드"},"hProperties":{"id":"코드","style":"position:relative;"}}},{"type":"html","lang":"cpp","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> T<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        deque<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">>></span> dq<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            dq<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dq<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">auto</span> turn <span class=\"token operator\">=</span> dq<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> dq<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dq<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second <span class=\"token operator\">></span> turn<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    dq<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>dq<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    dq<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dq<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first <span class=\"token operator\">==</span> turn<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dq<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first <span class=\"token operator\">==</span> M<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                dq<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":29,"column":1,"offset":1390},"end":{"line":71,"column":4,"offset":2339},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":72,"column":1,"offset":2340}}}}