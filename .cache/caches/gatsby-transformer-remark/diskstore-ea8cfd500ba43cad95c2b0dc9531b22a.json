{"expireTime":9007200877354938000,"key":"transformer-remark-markdown-html-ast-3a61f128336bf32436ec075acf71e309-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":{"type":"root","children":[{"type":"element","tagName":"h3","properties":{"id":"448-find-all-numbers-disappeared-in-an-array","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#448-find-all-numbers-disappeared-in-an-array","aria-label":"448 find all numbers disappeared in an array permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/"},"children":[{"type":"text","value":"448. Find All Numbers Disappeared in an Array","position":{"start":{"line":2,"column":6,"offset":6},"end":{"line":2,"column":51,"offset":51}}}],"position":{"start":{"line":2,"column":5,"offset":5},"end":{"line":2,"column":125,"offset":125}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":125,"offset":125}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">문제\n김진영이 듣도 못한 사람의 명단과, 보도 못한 사람의 명단이 주어질 때, 듣도 보도 못한 사람의 명단을 구하는 프로그램을 작성하시오.\n\n입력\n첫째 줄에 듣도 못한 사람의 수 N, 보도 못한 사람의 수 M이 주어진다. 이어서 둘째 줄부터 N개의 줄에 걸쳐 듣도 못한 사람의 이름과, N+2째 줄부터 보도 못한 사람의 이름이 순서대로 주어진다. 이름은 띄어쓰기 없이 영어 소문자로만 이루어지며, 그 길이는 20 이하이다. N, M은 500,000 이하의 자연수이다.\n\n출력\n듣보잡의 수와 그 명단을 사전순으로 출력한다.</code></pre></div>","position":{"start":{"line":4,"column":1,"offset":127},"end":{"line":13,"column":4,"offset":426}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"접근-방법","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%EC%A0%91%EA%B7%BC-%EB%B0%A9%EB%B2%95","aria-label":"접근 방법 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"접근 방법:","position":{"start":{"line":15,"column":5,"offset":432},"end":{"line":15,"column":11,"offset":438}}}],"position":{"start":{"line":15,"column":1,"offset":428},"end":{"line":15,"column":11,"offset":438}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"처음에는 벡터를 두개 사용해서 find함수를 통해 해결하려고 했는데, std::find 함수는 모든 배열 요소를 검사하는 O(N^2) 의 복잡도를 가진다. 그래서 시간초과를 해결하기 위해 set을 사용하기로 했다. set 자료구조는 아이템이 들어갈 때마다 자동으로 정렬이 되고 이미 정렬된 배열이기 때문에 find함수도 이진탐색을 기반으로 한 O(log n) 의 복잡도를 가진다.","position":{"start":{"line":17,"column":1,"offset":440},"end":{"line":17,"column":213,"offset":652}}}],"position":{"start":{"line":17,"column":1,"offset":440},"end":{"line":17,"column":213,"offset":652}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"통과-코드","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%ED%86%B5%EA%B3%BC-%EC%BD%94%EB%93%9C","aria-label":"통과 코드 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"통과 코드:","position":{"start":{"line":19,"column":5,"offset":658},"end":{"line":19,"column":11,"offset":664}}}],"position":{"start":{"line":19,"column":1,"offset":654},"end":{"line":19,"column":11,"offset":664}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ios_base<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    set<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> dnames<span class=\"token punctuation\">;</span>\n    set<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> bnames<span class=\"token punctuation\">;</span>\n    set<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> result<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> N <span class=\"token operator\">>></span> M<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> N<span class=\"token operator\">+</span>M<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        string name<span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">>=</span> M<span class=\"token punctuation\">)</span> dnames<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 듣도 못한 이름들 넣기</span>\n        <span class=\"token keyword\">else</span> bnames<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 보도 못한 이름들 넣기</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 셋은 넣을 때 자동으로 소팅이 되기 때문에 셋에 사용되는 find는 바이너리 서치(O(log n))를 사용한다. 일반 std::find 는 모든 원소를 다 검사하기 떄문에 O(n^2).</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>set<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token operator\">::</span> iterator dit <span class=\"token operator\">=</span> dnames<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> dit <span class=\"token operator\">!=</span> dnames<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> dit<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bnames<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>dit<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> bnames<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>dit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 듣고 못한 이름중에 보도 못한 이름에 이름이 있는지 확인하고 결과셋에 넣기</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 결과 출력 //</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>string r <span class=\"token operator\">:</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> r <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":21,"column":1,"offset":666},"end":{"line":57,"column":4,"offset":1544}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":58,"column":1,"offset":1545}}}}