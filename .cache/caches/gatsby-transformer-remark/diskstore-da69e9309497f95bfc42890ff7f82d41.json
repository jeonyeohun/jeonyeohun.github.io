{"expireTime":9007200877354303000,"key":"transformer-remark-markdown-html-ast-862a4fcfce37626725916d58808d325d-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://programmers.co.kr/learn/courses/30/lessons/42627"},"children":[{"type":"text","value":"https://programmers.co.kr/learn/courses/30/lessons/42627","position":{"start":{"line":2,"column":2,"offset":2},"end":{"line":2,"column":58,"offset":58}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":117,"offset":117}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":117,"offset":117}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"문제","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%EB%AC%B8%EC%A0%9C","aria-label":"문제 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"문제","position":{"start":{"line":4,"column":4,"offset":122},"end":{"line":4,"column":6,"offset":124}}}],"position":{"start":{"line":4,"column":1,"offset":119},"end":{"line":4,"column":6,"offset":124}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"문제","position":{"start":{"line":6,"column":3,"offset":128},"end":{"line":6,"column":5,"offset":130}}}],"position":{"start":{"line":6,"column":1,"offset":126},"end":{"line":6,"column":7,"offset":132}}},{"type":"raw","value":"<br>","position":{"start":{"line":6,"column":7,"offset":132},"end":{"line":6,"column":11,"offset":136}}}],"position":{"start":{"line":6,"column":1,"offset":126},"end":{"line":6,"column":11,"offset":136}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"하드디스크는 한 번에 하나의 작업만 수행할 수 있습니다. 디스크 컨트롤러를 구현하는 방법은 여러 가지가 있습니다. 가장 일반적인 방법은 요청이 들어온 순서대로 처리하는 것입니다.","position":{"start":{"line":8,"column":1,"offset":138},"end":{"line":8,"column":100,"offset":237}}}],"position":{"start":{"line":8,"column":1,"offset":138},"end":{"line":8,"column":100,"offset":237}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"예를들어","position":{"start":{"line":10,"column":1,"offset":239},"end":{"line":10,"column":5,"offset":243}}}],"position":{"start":{"line":10,"column":1,"offset":239},"end":{"line":10,"column":5,"offset":243}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"0ms 시점에 3ms가 소요되는 A작업 요청","position":{"start":{"line":12,"column":3,"offset":247},"end":{"line":12,"column":27,"offset":271}}}],"position":{"start":{"line":12,"column":1,"offset":245},"end":{"line":12,"column":27,"offset":271}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"1ms 시점에 9ms가 소요되는 B작업 요청","position":{"start":{"line":13,"column":3,"offset":274},"end":{"line":13,"column":27,"offset":298}}}],"position":{"start":{"line":13,"column":1,"offset":272},"end":{"line":13,"column":27,"offset":298}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"2ms 시점에 6ms가 소요되는 C작업 요청","position":{"start":{"line":14,"column":3,"offset":301},"end":{"line":14,"column":27,"offset":325}}}],"position":{"start":{"line":14,"column":1,"offset":299},"end":{"line":14,"column":27,"offset":325}}},{"type":"text","value":"\n"}],"position":{"start":{"line":12,"column":1,"offset":245},"end":{"line":14,"column":27,"offset":325}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"한 번에 하나의 요청만을 수행할 수 있기 때문에 각각의 작업을 요청받은 순서대로 처리하면 다음과 같이 처리 됩니다.","position":{"start":{"line":16,"column":1,"offset":327},"end":{"line":16,"column":65,"offset":391}}}],"position":{"start":{"line":16,"column":1,"offset":327},"end":{"line":16,"column":65,"offset":391}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"A: 3ms 시점에 작업 완료 (요청에서 종료까지 : 3ms)","position":{"start":{"line":18,"column":3,"offset":395},"end":{"line":18,"column":37,"offset":429}}}],"position":{"start":{"line":18,"column":1,"offset":393},"end":{"line":18,"column":37,"offset":429}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"B: 1ms부터 대기하다가, 3ms 시점에 작업을 시작해서 12ms 시점에 작업 완료(요청에서 종료까지 : 11ms)","position":{"start":{"line":19,"column":3,"offset":432},"end":{"line":19,"column":68,"offset":497}}}],"position":{"start":{"line":19,"column":1,"offset":430},"end":{"line":19,"column":68,"offset":497}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"C: 2ms부터 대기하다가, 12ms 시점에 작업을 시작해서 18ms 시점에 작업 완료(요청에서 종료까지 : 16ms)\n이 때 각 작업의 요청부터 종료까지 걸린 시간의 평균은 10ms(= (3 + 11 + 16) / 3)가 됩니다.","position":{"start":{"line":20,"column":3,"offset":500},"end":{"line":21,"column":65,"offset":631}}}],"position":{"start":{"line":20,"column":1,"offset":498},"end":{"line":21,"column":65,"offset":631}}},{"type":"text","value":"\n"}],"position":{"start":{"line":18,"column":1,"offset":393},"end":{"line":21,"column":65,"offset":631}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"하지만 A → C → B 순서대로 처리하면","position":{"start":{"line":23,"column":1,"offset":633},"end":{"line":23,"column":24,"offset":656}}}],"position":{"start":{"line":23,"column":1,"offset":633},"end":{"line":23,"column":24,"offset":656}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"A: 3ms 시점에 작업 완료(요청에서 종료까지 : 3ms)","position":{"start":{"line":25,"column":3,"offset":660},"end":{"line":25,"column":36,"offset":693}}}],"position":{"start":{"line":25,"column":1,"offset":658},"end":{"line":25,"column":36,"offset":693}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"C: 2ms부터 대기하다가, 3ms 시점에 작업을 시작해서 9ms 시점에 작업 완료(요청에서 종료까지 : 7ms)","position":{"start":{"line":26,"column":3,"offset":696},"end":{"line":26,"column":66,"offset":759}}}],"position":{"start":{"line":26,"column":1,"offset":694},"end":{"line":26,"column":66,"offset":759}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"B: 1ms부터 대기하다가, 9ms 시점에 작업을 시작해서 18ms 시점에 작업 완료(요청에서 종료까지 : 17ms)\n이렇게 A → C → B의 순서로 처리하면 각 작업의 요청부터 종료까지 걸린 시간의 평균은 9ms(= (3 + 7 + 17) / 3)가 됩니다.","position":{"start":{"line":27,"column":3,"offset":762},"end":{"line":28,"column":83,"offset":910}}}],"position":{"start":{"line":27,"column":1,"offset":760},"end":{"line":28,"column":83,"offset":910}}},{"type":"text","value":"\n"}],"position":{"start":{"line":25,"column":1,"offset":658},"end":{"line":28,"column":83,"offset":910}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"각 작업에 대해 ","position":{"start":{"line":30,"column":1,"offset":912},"end":{"line":30,"column":10,"offset":921}}},{"type":"text","value":"[작업이 요청되는 시점, 작업의 소요시간]","position":{"start":{"line":30,"column":11,"offset":922},"end":{"line":30,"column":32,"offset":943}}},{"type":"text","value":"을 담은 2차원 배열 jobs가 매개변수로 주어질 때, 작업의 요청부터 종료까지 걸린 시간의 평균을 가장 줄이는 방법으로 처리하면 평균이 얼마가 되는지 return 하도록 solution 함수를 작성해주세요. (단, 소수점 이하의 수는 버립니다)","position":{"start":{"line":30,"column":33,"offset":944},"end":{"line":30,"column":170,"offset":1081}}}],"position":{"start":{"line":30,"column":1,"offset":912},"end":{"line":30,"column":170,"offset":1081}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"풀이","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%ED%92%80%EC%9D%B4","aria-label":"풀이 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"풀이","position":{"start":{"line":32,"column":4,"offset":1086},"end":{"line":32,"column":6,"offset":1088}}}],"position":{"start":{"line":32,"column":1,"offset":1083},"end":{"line":32,"column":6,"offset":1088}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Shortest Job First 알고리즘을 구현하는 문제였다. 알고리즘은 다음과 같다.","position":{"start":{"line":34,"column":1,"offset":1090},"end":{"line":34,"column":50,"offset":1139}}}],"position":{"start":{"line":34,"column":1,"offset":1090},"end":{"line":34,"column":50,"offset":1139}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"작업을 도착시간 순으로 정렬하고, 도착시간이 같다면 작업의 시간이 더 짧은 작업을 선택한다.","position":{"start":{"line":36,"column":4,"offset":1144},"end":{"line":36,"column":55,"offset":1195}}}],"position":{"start":{"line":36,"column":1,"offset":1141},"end":{"line":36,"column":55,"offset":1195}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"아무작업이 없을 때 가장 먼저 요청을 보내는 작업을 처리한다.","position":{"start":{"line":37,"column":4,"offset":1199},"end":{"line":37,"column":38,"offset":1233}}}],"position":{"start":{"line":37,"column":1,"offset":1196},"end":{"line":37,"column":38,"offset":1233}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"이때 이 작업이 끝나기 전 시간에 요청이 오는 작업들이 있다면, 모두 우선순위 큐에 넣는다.","position":{"start":{"line":38,"column":4,"offset":1237},"end":{"line":38,"column":55,"offset":1288}}}],"position":{"start":{"line":38,"column":1,"offset":1234},"end":{"line":38,"column":55,"offset":1288}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"다음 작업을 선택할 때는 우선순위 큐에 있는 작업들 중 작업의 소요시간이 가장 짧은 작업을 선택한다.","position":{"start":{"line":39,"column":4,"offset":1292},"end":{"line":39,"column":60,"offset":1348}}}],"position":{"start":{"line":39,"column":1,"offset":1289},"end":{"line":39,"column":60,"offset":1348}}},{"type":"text","value":"\n"}],"position":{"start":{"line":36,"column":1,"offset":1141},"end":{"line":39,"column":60,"offset":1348}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"위 알고리즘을 우선순위 큐가 빌 때까지 수행하면, 가장 효율적으로 작업을 스케줄링 할 수 있다.","position":{"start":{"line":41,"column":1,"offset":1350},"end":{"line":41,"column":54,"offset":1403}}}],"position":{"start":{"line":41,"column":1,"offset":1350},"end":{"line":41,"column":54,"offset":1403}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"한 가지 까다로웠던 것은 작업이 끝나는 시간을 계산하는 것이었는데, 마로 마지막 작업이 끝났던 시간에서 요청이 온 시간을 빼고 작업시간을 더하면 이번 작업이 끝나는 시간을 구할 수 있고 이를 코드로 나타낸 것이","position":{"start":{"line":43,"column":1,"offset":1405},"end":{"line":43,"column":118,"offset":1522}}}],"position":{"start":{"line":43,"column":1,"offset":1405},"end":{"line":43,"column":118,"offset":1522}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">timeSum <span class=\"token operator\">+=</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>endTime <span class=\"token operator\">-</span> now<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> now<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":45,"column":1,"offset":1524},"end":{"line":47,"column":4,"offset":1575}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"이 코드이다.","position":{"start":{"line":49,"column":1,"offset":1577},"end":{"line":49,"column":8,"offset":1584}}}],"position":{"start":{"line":49,"column":1,"offset":1577},"end":{"line":49,"column":8,"offset":1584}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"반례가 되는 케이스는 각각의 작업들이 작업 수행중에 요청이 들어오지 않고, 중간중간에 대기시간이 있는 경우였다. 이런 경우를 처리하기 위해서 요청이 들어온 작업을 모두 우선순위 큐에 넣은 뒤 우선순위 큐가 비어있다면 요청시간이 가장 가까운 바로 다음 작업을 우선순위 큐에 대신 넣어주었다.","position":{"start":{"line":51,"column":1,"offset":1586},"end":{"line":51,"column":162,"offset":1747}}}],"position":{"start":{"line":51,"column":1,"offset":1586},"end":{"line":51,"column":162,"offset":1747}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"코드","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%EC%BD%94%EB%93%9C","aria-label":"코드 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"코드","position":{"start":{"line":53,"column":4,"offset":1752},"end":{"line":53,"column":6,"offset":1754}}}],"position":{"start":{"line":53,"column":1,"offset":1749},"end":{"line":53,"column":6,"offset":1754}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> raw <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Compare</span> <span class=\"token punctuation\">{</span>\n    bool <span class=\"token function\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nbool <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> jobs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    priority_queue<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token punctuation\">,</span> Compare<span class=\"token operator\">></span> pq<span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span>bool<span class=\"token operator\">></span> <span class=\"token function\">isUsed</span><span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> jobs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    pq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> timeSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> endTime <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    isUsed<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> now <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        timeSum <span class=\"token operator\">+=</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>endTime <span class=\"token operator\">-</span> now<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> now<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        endTime <span class=\"token operator\">+=</span> now<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> jobs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> endTime <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>isUsed<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                pq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                isUsed<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> jobs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> endTime <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>isUsed<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    pq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    isUsed<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n                    endTime <span class=\"token operator\">=</span> jobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> timeSum <span class=\"token operator\">/</span> jobs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endraw <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":55,"column":1,"offset":1756},"end":{"line":116,"column":4,"offset":3144}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":117,"column":1,"offset":3145}}}}