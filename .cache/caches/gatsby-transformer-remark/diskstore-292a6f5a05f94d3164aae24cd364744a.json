{"expireTime":9007200877354308000,"key":"transformer-remark-markdown-ast-36080b15f4c819e6bc2f4d6caa809990-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"참고도서: ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":7,"offset":7},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Operating System Concepts (10/E) Abraham Silberschatz, Peter B. Galvin, Greg Gagne","position":{"start":{"line":2,"column":8,"offset":8},"end":{"line":2,"column":90,"offset":90},"indent":[]}}],"position":{"start":{"line":2,"column":7,"offset":7},"end":{"line":2,"column":91,"offset":91},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":91,"offset":91},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#독자와-저자-문제","title":null,"children":[],"data":{"hProperties":{"aria-label":"독자와 저자 문제 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"독자와 저자 문제","position":{"start":{"line":4,"column":4,"offset":96},"end":{"line":4,"column":13,"offset":105},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":93},"end":{"line":4,"column":13,"offset":105},"indent":[]},"data":{"id":"독자와-저자-문제","htmlAttributes":{"id":"독자와-저자-문제"},"hProperties":{"id":"독자와-저자-문제","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"한국어로 직역해서 독자와 저자라고 했지만, 우리에게 더 편한 데이터베이스를 한번 생각해보자. 독자는 데이터베이스를 read 하는 요청, 저자는 데이터베이스를 write 하는 요청이라고 한다면 우리는 다음과 같은 충돌 상황에 대한 대체가 필요하다.","position":{"start":{"line":6,"column":1,"offset":107},"end":{"line":6,"column":138,"offset":244},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":107},"end":{"line":6,"column":138,"offset":244},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Write 하고 있는 중에 Read가 되는 경우","position":{"start":{"line":8,"column":4,"offset":249},"end":{"line":8,"column":30,"offset":275},"indent":[]}}],"position":{"start":{"line":8,"column":4,"offset":249},"end":{"line":8,"column":30,"offset":275},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":246},"end":{"line":8,"column":30,"offset":275},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Write 하고 있는 중에 또 다른 Write 가 요청된 경우","position":{"start":{"line":9,"column":4,"offset":279},"end":{"line":9,"column":38,"offset":313},"indent":[]}}],"position":{"start":{"line":9,"column":4,"offset":279},"end":{"line":9,"column":38,"offset":313},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":276},"end":{"line":9,"column":38,"offset":313},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":246},"end":{"line":9,"column":38,"offset":313},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"위 두가지 충돌 상황을 보게되면 가장 문제를 크게 야기하는 부분이 write라는 생각이 들었을 것이다. 상식적으로 생각했을 때도, 동시에 여러 읽기 작업이 일어나는 것은 데이터의 변형을 일으키지 않으니 전혀 문제가 될 것이 없다. 결국 이 문제를 해결하기 위해서는 다음과 같은 대처가 필요하다.","position":{"start":{"line":11,"column":1,"offset":315},"end":{"line":11,"column":165,"offset":479},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":315},"end":{"line":11,"column":165,"offset":479},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Write가 수행되고 있는 동안에는 Read가 접근하지 못하게 한다.","position":{"start":{"line":13,"column":4,"offset":484},"end":{"line":13,"column":42,"offset":522},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":484},"end":{"line":13,"column":42,"offset":522},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":481},"end":{"line":13,"column":42,"offset":522},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"한번에 하나의 Write 만 접근을 허용한다.","position":{"start":{"line":14,"column":4,"offset":526},"end":{"line":14,"column":29,"offset":551},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":526},"end":{"line":14,"column":29,"offset":551},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":523},"end":{"line":14,"column":29,"offset":551},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":481},"end":{"line":14,"column":29,"offset":551},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"그럼 이 내용을 세마포어를 이용해서 구현해보자.","position":{"start":{"line":16,"column":1,"offset":553},"end":{"line":16,"column":27,"offset":579},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":553},"end":{"line":16,"column":27,"offset":579},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#자료구조data-structure","title":null,"children":[],"data":{"hProperties":{"aria-label":"자료구조data structure permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"자료구조(Data Structure)","position":{"start":{"line":18,"column":4,"offset":584},"end":{"line":18,"column":24,"offset":604},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":581},"end":{"line":18,"column":24,"offset":604},"indent":[]},"data":{"id":"자료구조data-structure","htmlAttributes":{"id":"자료구조data-structure"},"hProperties":{"id":"자료구조data-structure","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"동기화를 위한 변수는 다음과 같이 사용한다","position":{"start":{"line":20,"column":1,"offset":606},"end":{"line":20,"column":24,"offset":629},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":606},"end":{"line":20,"column":24,"offset":629},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">semaphore rw_mutex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nsemaphore mutex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> read_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":22,"column":1,"offset":631},"end":{"line":26,"column":4,"offset":704},"indent":[1,1,1,1]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">rw_mutex</code>","position":{"start":{"line":28,"column":4,"offset":709},"end":{"line":28,"column":14,"offset":719},"indent":[]}},{"type":"text","value":" : Writer 와 Reader 사이에 공유되는 변수이다. 공유 데이터에 Writer와 Reader 가 함께 존재하는 경우는 있으면 안되기 때문에 semaphore 값을 1로 초기화 한다. lock을 획득할 수 있는 프로세스의 개수가 최대 한 개라는 뜻이다.","position":{"start":{"line":28,"column":14,"offset":719},"end":{"line":28,"column":159,"offset":864},"indent":[]}}],"position":{"start":{"line":28,"column":4,"offset":709},"end":{"line":28,"column":159,"offset":864},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":706},"end":{"line":28,"column":159,"offset":864},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">mutex</code>","position":{"start":{"line":29,"column":4,"offset":868},"end":{"line":29,"column":11,"offset":875},"indent":[]}},{"type":"text","value":" : read_count 의 값 갱신이 atomic 하게 일어날 수 있게끔 writer 의 접근을 차단하기 위한 lock이다.","position":{"start":{"line":29,"column":11,"offset":875},"end":{"line":29,"column":81,"offset":945},"indent":[]}}],"position":{"start":{"line":29,"column":4,"offset":868},"end":{"line":29,"column":81,"offset":945},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":865},"end":{"line":29,"column":81,"offset":945},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">read_count</code>","position":{"start":{"line":30,"column":4,"offset":949},"end":{"line":30,"column":16,"offset":961},"indent":[]}},{"type":"text","value":" : 현재 Read 를 수행하는 프로세스의 개수를 기록하는 변수이다.","position":{"start":{"line":30,"column":16,"offset":961},"end":{"line":30,"column":54,"offset":999},"indent":[]}}],"position":{"start":{"line":30,"column":4,"offset":949},"end":{"line":30,"column":54,"offset":999},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":946},"end":{"line":30,"column":54,"offset":999},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":706},"end":{"line":30,"column":54,"offset":999},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#writer","title":null,"children":[],"data":{"hProperties":{"aria-label":"writer permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Writer","position":{"start":{"line":32,"column":4,"offset":1004},"end":{"line":32,"column":10,"offset":1010},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1001},"end":{"line":32,"column":10,"offset":1010},"indent":[]},"data":{"id":"writer","htmlAttributes":{"id":"writer"},"hProperties":{"id":"writer","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"쓰기 작업을 수행하는 Writer 의 구조는 다음과 같다.","position":{"start":{"line":34,"column":1,"offset":1012},"end":{"line":34,"column":33,"offset":1044},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1012},"end":{"line":34,"column":33,"offset":1044},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">wait</span> <span class=\"token punctuation\">(</span>rw_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 쓰기를 위한 lock 획득</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token comment\">/* 쓰기 작업 수행 */</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token function\">signal</span> <span class=\"token punctuation\">(</span>rw_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// lock 반납</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":36,"column":1,"offset":1046},"end":{"line":44,"column":4,"offset":1169},"indent":[1,1,1,1,1,1,1,1]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Writer는 일단 ","position":{"start":{"line":46,"column":4,"offset":1174},"end":{"line":46,"column":15,"offset":1185},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">rw_mutex</code>","position":{"start":{"line":46,"column":15,"offset":1185},"end":{"line":46,"column":25,"offset":1195},"indent":[]}},{"type":"text","value":"가 사용가능한 상태인지 확인한다. 만약 Reader가 데이터를 읽고 있다면, ","position":{"start":{"line":46,"column":25,"offset":1195},"end":{"line":46,"column":68,"offset":1238},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">rw_mutex</code>","position":{"start":{"line":46,"column":68,"offset":1238},"end":{"line":46,"column":78,"offset":1248},"indent":[]}},{"type":"text","value":"의 값이 음수가 되기 때문에 Writer는 대기하게 된다.","position":{"start":{"line":46,"column":78,"offset":1248},"end":{"line":46,"column":110,"offset":1280},"indent":[]}}],"position":{"start":{"line":46,"column":4,"offset":1174},"end":{"line":46,"column":110,"offset":1280},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1171},"end":{"line":46,"column":110,"offset":1280},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"lock을 획득하게 되면 임계구역으로 진입해서 쓰기 작업을 수행한다. ","position":{"start":{"line":47,"column":4,"offset":1284},"end":{"line":47,"column":43,"offset":1323},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">rw_mutex</code>","position":{"start":{"line":47,"column":43,"offset":1323},"end":{"line":47,"column":53,"offset":1333},"indent":[]}},{"type":"text","value":"는 ","position":{"start":{"line":47,"column":53,"offset":1333},"end":{"line":47,"column":55,"offset":1335},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">binary semaphore</code>","position":{"start":{"line":47,"column":55,"offset":1335},"end":{"line":47,"column":73,"offset":1353},"indent":[]}},{"type":"text","value":"이기 때문에 만약 Writer가 lock을 획득했다면, Reader는 임계구역에 접근할 수 없게된다.","position":{"start":{"line":47,"column":73,"offset":1353},"end":{"line":47,"column":129,"offset":1409},"indent":[]}}],"position":{"start":{"line":47,"column":4,"offset":1284},"end":{"line":47,"column":129,"offset":1409},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1281},"end":{"line":47,"column":129,"offset":1409},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"쓰기 작업을 마치면 signal을 실행하면서 lock을 방출하고 작업을 종료한다.","position":{"start":{"line":48,"column":4,"offset":1413},"end":{"line":48,"column":49,"offset":1458},"indent":[]}}],"position":{"start":{"line":48,"column":4,"offset":1413},"end":{"line":48,"column":49,"offset":1458},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1410},"end":{"line":48,"column":49,"offset":1458},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1171},"end":{"line":48,"column":49,"offset":1458},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#reader","title":null,"children":[],"data":{"hProperties":{"aria-label":"reader permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Reader","position":{"start":{"line":50,"column":4,"offset":1463},"end":{"line":50,"column":10,"offset":1469},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1460},"end":{"line":50,"column":10,"offset":1469},"indent":[]},"data":{"id":"reader","htmlAttributes":{"id":"reader"},"hProperties":{"id":"reader","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"읽기 작업을 수행하는 Reader 의 구조는 다음과 같다.","position":{"start":{"line":52,"column":1,"offset":1471},"end":{"line":52,"column":33,"offset":1503},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":1471},"end":{"line":52,"column":33,"offset":1503},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">wait</span> <span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// read_count 의 증가 연산이 다른 프로세스의 영향을 받지 않게 하기 위해 lock 획득</span>\n    read_count<span class=\"token operator\">++</span>            <span class=\"token comment\">// 증가. mutex 세마포어 덕분에 한번에 하나의 증가만 일어난다</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>read_count <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>   <span class=\"token comment\">// read_count 가 1이라면 제일 처음 읽기를 시도하는 프로세스</span>\n        <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>rw_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Writer 가 작업중인지 확인하고 작업중이면 대기상태로 넣기</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// lock 반환</span>\n\n    <span class=\"token comment\">/* 읽기 작업 수행 */</span>\n\n    <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// read_count 의 값을 줄이기 위해 lock 획득</span>\n    read_count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 연산 수행</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>read_count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>    <span class=\"token comment\">// 만약 read_count가 0이라면, 현재 읽기 작업을 수행중인 프로세스가 없다</span>\n        <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>rw_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 대기중인 Writer 에 signal을 보낸다</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// lock 반환</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":54,"column":1,"offset":1505},"end":{"line":72,"column":4,"offset":2163},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Writer 는 매우 직관적이고 단순한 구조였지만, Reader 는 조금 복잡해졌다. 임계구역 앞뒤로 나누어서 과정을 한번 따라가 보자.","position":{"start":{"line":74,"column":1,"offset":2165},"end":{"line":74,"column":77,"offset":2241},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":2165},"end":{"line":74,"column":77,"offset":2241},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#읽기-작업-진입-전","title":null,"children":[],"data":{"hProperties":{"aria-label":"읽기 작업 진입 전 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"읽기 작업 진입 전","position":{"start":{"line":76,"column":5,"offset":2247},"end":{"line":76,"column":15,"offset":2257},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":2243},"end":{"line":76,"column":15,"offset":2257},"indent":[]},"data":{"id":"읽기-작업-진입-전","htmlAttributes":{"id":"읽기-작업-진입-전"},"hProperties":{"id":"읽기-작업-진입-전","style":"position:relative;"}}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">    <span class=\"token function\">wait</span> <span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// read_count 의 증가 연산이 다른 프로세스의 영향을 받지 않게 하기 위해 lock 획득</span>\n    read_count<span class=\"token operator\">++</span>            <span class=\"token comment\">// 증가. mutex 세마포어 덕분에 한번에 하나의 증가만 일어난다</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>read_count <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>   <span class=\"token comment\">// read_count 가 1이라면 제일 처음 읽기를 시도하는 프로세스</span>\n        <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>rw_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Writer 가 작업중인지 확인하고 작업중이면 대기상태로 넣기</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// lock 반환</span>\n\n    <span class=\"token comment\">/* 읽기 작업 수행 */</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>","position":{"start":{"line":78,"column":1,"offset":2259},"end":{"line":89,"column":4,"offset":2627},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"다수의 Reader가 임계구역 진입을 시도할 수 있다. 이때 read_count 의 값을 증가시키는 것이 atomic 하게 수행되어야 하는데 ","position":{"start":{"line":91,"column":4,"offset":2632},"end":{"line":91,"column":83,"offset":2711},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">++</code>","position":{"start":{"line":91,"column":83,"offset":2711},"end":{"line":91,"column":87,"offset":2715},"indent":[]}},{"type":"text","value":" 연산은 atomic 한 연산이 아니다.","position":{"start":{"line":91,"column":87,"offset":2715},"end":{"line":91,"column":109,"offset":2737},"indent":[]}}],"position":{"start":{"line":91,"column":4,"offset":2632},"end":{"line":91,"column":109,"offset":2737},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":2629},"end":{"line":91,"column":109,"offset":2737},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"따라서 mutex로 lock을 획득해서 read_count 를 한번에 한 프로세스에서만 증가시킬 수 있게 한다.","position":{"start":{"line":92,"column":4,"offset":2741},"end":{"line":92,"column":66,"offset":2803},"indent":[]}}],"position":{"start":{"line":92,"column":4,"offset":2741},"end":{"line":92,"column":66,"offset":2803},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":2738},"end":{"line":92,"column":66,"offset":2803},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"read","position":{"start":{"line":93,"column":4,"offset":2807},"end":{"line":93,"column":8,"offset":2811},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"count 를 증가시킨 시점에서 read","position":{"start":{"line":93,"column":9,"offset":2812},"end":{"line":93,"column":31,"offset":2834},"indent":[]}}],"position":{"start":{"line":93,"column":8,"offset":2811},"end":{"line":93,"column":32,"offset":2835},"indent":[]}},{"type":"text","value":"count의 값이 ","position":{"start":{"line":93,"column":32,"offset":2835},"end":{"line":93,"column":42,"offset":2845},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">1</code>","position":{"start":{"line":93,"column":42,"offset":2845},"end":{"line":93,"column":45,"offset":2848},"indent":[]}},{"type":"text","value":"이라면, 해당 프로세스가 임계구역에 진입하는 ","position":{"start":{"line":93,"column":45,"offset":2848},"end":{"line":93,"column":70,"offset":2873},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">최초의 Reader</code>","position":{"start":{"line":93,"column":70,"offset":2873},"end":{"line":93,"column":82,"offset":2885},"indent":[]}},{"type":"text","value":"임을 의미한다. lock 을 획득해서 read","position":{"start":{"line":93,"column":82,"offset":2885},"end":{"line":93,"column":107,"offset":2910},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"count 값을 올리는 이유가 바로 여기에 있다. 만약 lock이 없었다면 여러 Reader가 read","position":{"start":{"line":93,"column":108,"offset":2911},"end":{"line":93,"column":165,"offset":2968},"indent":[]}}],"position":{"start":{"line":93,"column":107,"offset":2910},"end":{"line":93,"column":166,"offset":2969},"indent":[]}},{"type":"text","value":"count의 값을 증가시켜서 최초의 프로세스가 누구였는지 판단할 수 없게 될 것이다.","position":{"start":{"line":93,"column":166,"offset":2969},"end":{"line":93,"column":213,"offset":3016},"indent":[]}}],"position":{"start":{"line":93,"column":4,"offset":2807},"end":{"line":93,"column":213,"offset":3016},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":2804},"end":{"line":93,"column":213,"offset":3016},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"진입을 시도하는 프로세스가 최초의 Reader 라면 Writer가 작업중일 가능성이 있기 때문에 ","position":{"start":{"line":94,"column":4,"offset":3020},"end":{"line":94,"column":58,"offset":3074},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">rw_mutex</code>","position":{"start":{"line":94,"column":58,"offset":3074},"end":{"line":94,"column":68,"offset":3084},"indent":[]}},{"type":"text","value":" 를 확인해서 Writer가 작업중이라면 Reader를 대기 큐에 넣는다.","position":{"start":{"line":94,"column":68,"offset":3084},"end":{"line":94,"column":109,"offset":3125},"indent":[]}}],"position":{"start":{"line":94,"column":4,"offset":3020},"end":{"line":94,"column":109,"offset":3125},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":3017},"end":{"line":94,"column":109,"offset":3125},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"만약 이 프로세스가 읽기를 처음 시작하는 프로세스가 아니라면 이미 임계구역 내에서 읽기 작업을 수행중인 프로세스가 있다는 것이기 때문에 ","position":{"start":{"line":95,"column":4,"offset":3129},"end":{"line":95,"column":80,"offset":3205},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">rw_mutex</code>","position":{"start":{"line":95,"column":80,"offset":3205},"end":{"line":95,"column":90,"offset":3215},"indent":[]}},{"type":"text","value":"를 검사할 필요없이 곧바로 임계구역으로 진입한다.","position":{"start":{"line":95,"column":90,"offset":3215},"end":{"line":95,"column":117,"offset":3242},"indent":[]}}],"position":{"start":{"line":95,"column":4,"offset":3129},"end":{"line":95,"column":117,"offset":3242},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":3126},"end":{"line":95,"column":117,"offset":3242},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"임계구역으로 진입하면서 다른 Reader 의 접근을 허용하기 위해 ","position":{"start":{"line":96,"column":4,"offset":3246},"end":{"line":96,"column":41,"offset":3283},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">signal(mutex)</code>","position":{"start":{"line":96,"column":41,"offset":3283},"end":{"line":96,"column":56,"offset":3298},"indent":[]}},{"type":"text","value":"를 실행한다.","position":{"start":{"line":96,"column":56,"offset":3298},"end":{"line":96,"column":63,"offset":3305},"indent":[]}}],"position":{"start":{"line":96,"column":4,"offset":3246},"end":{"line":96,"column":63,"offset":3305},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":3243},"end":{"line":96,"column":63,"offset":3305},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":2629},"end":{"line":96,"column":63,"offset":3305},"indent":[1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#읽기-작업-후","title":null,"children":[],"data":{"hProperties":{"aria-label":"읽기 작업 후 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"읽기 작업 후","position":{"start":{"line":98,"column":5,"offset":3311},"end":{"line":98,"column":12,"offset":3318},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":3307},"end":{"line":98,"column":12,"offset":3318},"indent":[]},"data":{"id":"읽기-작업-후","htmlAttributes":{"id":"읽기-작업-후"},"hProperties":{"id":"읽기-작업-후","style":"position:relative;"}}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token comment\">/* 읽기 작업 수행 */</span>\n\n    <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// read_count 의 값을 줄이기 위해 lock 획득</span>\n    read_count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 연산 수행</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>read_count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>    <span class=\"token comment\">// 만약 read_count가 0이라면, 현재 읽기 작업을 수행중인 프로세스가 없다</span>\n        <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>rw_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 대기중인 Writer 에 signal을 보낸다</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// lock 반환</span></code></pre></div>","position":{"start":{"line":100,"column":1,"offset":3320},"end":{"line":111,"column":4,"offset":3634},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"읽기 작업이 끝나면, Reader는 임계구역을 빠져나오면서 reader_count 를 하나 감소시켜야 한다.","position":{"start":{"line":113,"column":4,"offset":3639},"end":{"line":113,"column":64,"offset":3699},"indent":[]}}],"position":{"start":{"line":113,"column":4,"offset":3639},"end":{"line":113,"column":64,"offset":3699},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":3636},"end":{"line":113,"column":64,"offset":3699},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"이때 역시 reader_count 의 감소연산을 atomic하게 만들기 위해 mutex 세마포어를 통해 다른 Reader의 접근을 제한한다.","position":{"start":{"line":114,"column":4,"offset":3703},"end":{"line":114,"column":82,"offset":3781},"indent":[]}}],"position":{"start":{"line":114,"column":4,"offset":3703},"end":{"line":114,"column":82,"offset":3781},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":3700},"end":{"line":114,"column":82,"offset":3781},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"reader_count의 값을 하나 줄였을 때 결과 값이 0이 된다면 방금 임계구역을 빠져나온 프로세스가 실행중이던 ","position":{"start":{"line":115,"column":4,"offset":3785},"end":{"line":115,"column":69,"offset":3850},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">마지막 Reader</code>","position":{"start":{"line":115,"column":69,"offset":3850},"end":{"line":115,"column":81,"offset":3862},"indent":[]}},{"type":"text","value":"가 된다.","position":{"start":{"line":115,"column":81,"offset":3862},"end":{"line":115,"column":86,"offset":3867},"indent":[]}}],"position":{"start":{"line":115,"column":4,"offset":3785},"end":{"line":115,"column":86,"offset":3867},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":3782},"end":{"line":115,"column":86,"offset":3867},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"따라서 rw_mutex의 값을 증가시켜서 Writer가 lock을 획득할 수 있게한다.","position":{"start":{"line":116,"column":4,"offset":3871},"end":{"line":116,"column":52,"offset":3919},"indent":[]}}],"position":{"start":{"line":116,"column":4,"offset":3871},"end":{"line":116,"column":52,"offset":3919},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":3868},"end":{"line":116,"column":52,"offset":3919},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"마지막 Reader가 아니라면 아직 임계구역에서 작업중인 Reader가 있다는 것을 의미하고 Writer 의 접근이 제한되어야 하기 때문에 다른 mutex만 signal 해주고 종료된다.","position":{"start":{"line":117,"column":4,"offset":3923},"end":{"line":117,"column":108,"offset":4027},"indent":[]}}],"position":{"start":{"line":117,"column":4,"offset":3923},"end":{"line":117,"column":108,"offset":4027},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":3920},"end":{"line":117,"column":108,"offset":4027},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":3636},"end":{"line":117,"column":108,"offset":4027},"indent":[1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":118,"column":1,"offset":4028}}}}