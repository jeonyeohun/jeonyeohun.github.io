{"expireTime":9007200877354305000,"key":"transformer-remark-markdown-ast-be15a81e5f997f9bf261062061cf9e88-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.acmicpc.net/problem/14503","children":[{"type":"text","value":"https://www.acmicpc.net/problem/14503","position":{"start":{"line":2,"column":2,"offset":2},"end":{"line":2,"column":39,"offset":39},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":79,"offset":79},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":79,"offset":79},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#문제","title":null,"children":[],"data":{"hProperties":{"aria-label":"문제 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"문제","position":{"start":{"line":4,"column":4,"offset":84},"end":{"line":4,"column":6,"offset":86},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":81},"end":{"line":4,"column":6,"offset":86},"indent":[]},"data":{"id":"문제","htmlAttributes":{"id":"문제"},"hProperties":{"id":"문제","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"문제","position":{"start":{"line":6,"column":3,"offset":90},"end":{"line":6,"column":5,"offset":92},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":88},"end":{"line":6,"column":7,"offset":94},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":6,"column":7,"offset":94},"end":{"line":6,"column":11,"offset":98},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":88},"end":{"line":6,"column":11,"offset":98},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"로봇 청소기가 주어졌을 때, 청소하는 영역의 개수를 구하는 프로그램을 작성하시오.","position":{"start":{"line":8,"column":1,"offset":100},"end":{"line":8,"column":46,"offset":145},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":100},"end":{"line":8,"column":46,"offset":145},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"로봇 청소기가 있는 장소는 N×M 크기의 직사각형으로 나타낼 수 있으며, 1×1크기의 정사각형 칸으로 나누어져 있다. 각각의 칸은 벽 또는 빈 칸이다. 청소기는 바라보는 방향이 있으며, 이 방향은 동, 서, 남, 북중 하나이다. 지도의 각 칸은 (r, c)로 나타낼 수 있고, r은 북쪽으로부터 떨어진 칸의 개수, c는 서쪽으로 부터 떨어진 칸의 개수이다.","position":{"start":{"line":10,"column":1,"offset":147},"end":{"line":10,"column":200,"offset":346},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":147},"end":{"line":10,"column":200,"offset":346},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"로봇 청소기는 다음과 같이 작동한다.","position":{"start":{"line":12,"column":1,"offset":348},"end":{"line":12,"column":21,"offset":368},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":348},"end":{"line":12,"column":21,"offset":368},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"현재 위치를 청소한다.","position":{"start":{"line":14,"column":4,"offset":373},"end":{"line":14,"column":16,"offset":385},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":373},"end":{"line":14,"column":16,"offset":385},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":370},"end":{"line":14,"column":16,"offset":385},"indent":[]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"현재 위치에서 현재 방향을 기준으로 왼쪽방향부터 차례대로 탐색을 진행한다.","position":{"start":{"line":15,"column":4,"offset":389},"end":{"line":15,"column":45,"offset":430},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":389},"end":{"line":15,"column":45,"offset":430},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"왼쪽 방향에 아직 청소하지 않은 공간이 존재한다면, 그 방향으로 회전한 다음 한 칸을 전진하고 1번부터 진행한다.","position":{"start":{"line":17,"column":6,"offset":437},"end":{"line":17,"column":69,"offset":500},"indent":[]}}],"position":{"start":{"line":17,"column":6,"offset":437},"end":{"line":17,"column":69,"offset":500},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":435},"end":{"line":17,"column":69,"offset":500},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"왼쪽 방향에 청소할 공간이 없다면, 그 방향으로 회전하고 2번으로 돌아간다.","position":{"start":{"line":18,"column":6,"offset":506},"end":{"line":18,"column":48,"offset":548},"indent":[]}}],"position":{"start":{"line":18,"column":6,"offset":506},"end":{"line":18,"column":48,"offset":548},"indent":[]}}],"position":{"start":{"line":18,"column":4,"offset":504},"end":{"line":18,"column":48,"offset":548},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"네 방향 모두 청소가 이미 되어있거나 벽인 경우에는, 바라보는 방향을 유지한 채로 한 칸 후진을 하고 2번으로 돌아간다.","position":{"start":{"line":19,"column":6,"offset":554},"end":{"line":19,"column":73,"offset":621},"indent":[]}}],"position":{"start":{"line":19,"column":6,"offset":554},"end":{"line":19,"column":73,"offset":621},"indent":[]}}],"position":{"start":{"line":19,"column":4,"offset":552},"end":{"line":19,"column":73,"offset":621},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"네 방향 모두 청소가 이미 되어있거나 벽이면서, 뒤쪽 방향이 벽이라 후진도 할 수 없는 경우에는 작동을 멈춘다.","position":{"start":{"line":20,"column":6,"offset":627},"end":{"line":20,"column":68,"offset":689},"indent":[]}}],"position":{"start":{"line":20,"column":6,"offset":627},"end":{"line":20,"column":68,"offset":689},"indent":[]}}],"position":{"start":{"line":20,"column":4,"offset":625},"end":{"line":20,"column":68,"offset":689},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":435},"end":{"line":20,"column":68,"offset":689},"indent":[4,4,4]}}],"position":{"start":{"line":15,"column":1,"offset":386},"end":{"line":20,"column":68,"offset":689},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":14,"column":1,"offset":370},"end":{"line":20,"column":68,"offset":689},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"로봇 청소기는 이미 청소되어있는 칸을 또 청소하지 않으며, 벽을 통과할 수 없다.","position":{"start":{"line":22,"column":1,"offset":691},"end":{"line":22,"column":46,"offset":736},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":691},"end":{"line":22,"column":46,"offset":736},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"입력","position":{"start":{"line":24,"column":3,"offset":740},"end":{"line":24,"column":5,"offset":742},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":738},"end":{"line":24,"column":7,"offset":744},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":24,"column":7,"offset":744},"end":{"line":24,"column":11,"offset":748},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":738},"end":{"line":24,"column":11,"offset":748},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"첫째 줄에 세로 크기 N과 가로 크기 M이 주어진다. (3 ≤ N, M ≤ 50)","position":{"start":{"line":26,"column":1,"offset":750},"end":{"line":26,"column":46,"offset":795},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":750},"end":{"line":26,"column":46,"offset":795},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"둘째 줄에 로봇 청소기가 있는 칸의 좌표 (r, c)와 바라보는 방향 d가 주어진다. d가 0인 경우에는 북쪽을, 1인 경우에는 동쪽을, 2인 경우에는 남쪽을, 3인 경우에는 서쪽을 바라보고 있는 것이다.","position":{"start":{"line":28,"column":1,"offset":797},"end":{"line":28,"column":115,"offset":911},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":797},"end":{"line":28,"column":115,"offset":911},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"셋째 줄부터 N개의 줄에 장소의 상태가 북쪽부터 남쪽 순서대로, 각 줄은 서쪽부터 동쪽 순서대로 주어진다. 빈 칸은 0, 벽은 1로 주어진다. 지도의 첫 행, 마지막 행, 첫 열, 마지막 열에 있는 모든 칸은 벽이다.","position":{"start":{"line":30,"column":1,"offset":913},"end":{"line":30,"column":122,"offset":1034},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":913},"end":{"line":30,"column":122,"offset":1034},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"로봇 청소기가 있는 칸의 상태는 항상 빈 칸이다.","position":{"start":{"line":32,"column":1,"offset":1036},"end":{"line":32,"column":28,"offset":1063},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1036},"end":{"line":32,"column":28,"offset":1063},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"출력","position":{"start":{"line":34,"column":3,"offset":1067},"end":{"line":34,"column":5,"offset":1069},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1065},"end":{"line":34,"column":7,"offset":1071},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":34,"column":7,"offset":1071},"end":{"line":34,"column":11,"offset":1075},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1065},"end":{"line":34,"column":11,"offset":1075},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"로봇 청소기가 청소하는 칸의 개수를 출력한다.","position":{"start":{"line":36,"column":1,"offset":1077},"end":{"line":36,"column":26,"offset":1102},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1077},"end":{"line":36,"column":26,"offset":1102},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#풀이","title":null,"children":[],"data":{"hProperties":{"aria-label":"풀이 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"풀이","position":{"start":{"line":38,"column":4,"offset":1107},"end":{"line":38,"column":6,"offset":1109},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1104},"end":{"line":38,"column":6,"offset":1109},"indent":[]},"data":{"id":"풀이","htmlAttributes":{"id":"풀이"},"hProperties":{"id":"풀이","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"처음에는 문제에서 요구하는대로 그대로 구현해보려고 했는데, 테스트케이스는 통과하지만 틀렸습니다를 계속 받았다. 하루종일 이리저리 고쳐보다가 포기하고 dfs로 방향을 틀어서 다시 구현하기 시작했다. dfs는 어떻게 할지 대충 감은 오지만 계속 변경되는 방향을 처리하는 로직을 짜는데 어려움을 많이 겪었고 하루종일 붙잡고 씨름하다가 결국에는 블로그글들을 보고 풀게되었다.","position":{"start":{"line":40,"column":1,"offset":1111},"end":{"line":40,"column":206,"offset":1316},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1111},"end":{"line":40,"column":206,"offset":1316},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"일반적인 dfs 를 사용하지만 방향을 설정할때 아무방향이나 순서대로 넣으면 안된다. 따라서 일단 방향을 왼쪽으로 한번 돌려놓고(","position":{"start":{"line":42,"column":1,"offset":1318},"end":{"line":42,"column":72,"offset":1389},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">i = dir - 1</code>","position":{"start":{"line":42,"column":72,"offset":1389},"end":{"line":42,"column":85,"offset":1402},"indent":[]}},{"type":"text","value":") 방향을 왼쪽으로 돌리면서(","position":{"start":{"line":42,"column":85,"offset":1402},"end":{"line":42,"column":101,"offset":1418},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">i--</code>","position":{"start":{"line":42,"column":101,"offset":1418},"end":{"line":42,"column":106,"offset":1423},"indent":[]}},{"type":"text","value":") 네 번 반복하도록 한다. 그리고 다음 dfs 재귀호출에 사용할 방향은 ( i + 4 ) % 4 로 얻어낸다. 이렇게 하면 특정한 방향에서부터 왼쪽방향으로 방향을 변경ㄹ하면서 재귀호출을 할 수 있다. 해당 방향에 0이 있다면 곧바로 청소를 해야하기 때문에 0이 아닌 숫자로 채우고 (나는 디버깅할때 방문 순서를 쉽게 파악하기 위해서 정수를 계속 증가시키며 넣었다.), 만약 더 이상 청소할 곳이 없다면, 현재 방향은 그대로 유지한 채로 뒷방향으로 이동하는 재귀호출을 수행한다.","position":{"start":{"line":42,"column":106,"offset":1423},"end":{"line":42,"column":373,"offset":1690},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1318},"end":{"line":42,"column":373,"offset":1690},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"나는 벽과의 구분을 위해 청소된 구역을 의미하는 값을 2부터 시작했기 때문에, 최종적으로 값을 출력할 때는 ","position":{"start":{"line":44,"column":1,"offset":1692},"end":{"line":44,"column":61,"offset":1752},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">최종 이동횟수 - 1</code>","position":{"start":{"line":44,"column":61,"offset":1752},"end":{"line":44,"column":74,"offset":1765},"indent":[]}},{"type":"text","value":" 을 출력해주었다.","position":{"start":{"line":44,"column":74,"offset":1765},"end":{"line":44,"column":84,"offset":1775},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":1692},"end":{"line":44,"column":84,"offset":1775},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#코드","title":null,"children":[],"data":{"hProperties":{"aria-label":"코드 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"코드","position":{"start":{"line":46,"column":4,"offset":1780},"end":{"line":46,"column":6,"offset":1782},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1777},"end":{"line":46,"column":6,"offset":1782},"indent":[]},"data":{"id":"코드","htmlAttributes":{"id":"코드"},"hProperties":{"id":"코드","style":"position:relative;"}}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token string\">' '</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;utility></span></span>\n\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> map <span class=\"token punctuation\">[</span><span class=\"token number\">51</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">51</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> steps <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\nbool <span class=\"token function\">isInMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> row <span class=\"token operator\">>=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> row <span class=\"token operator\">&lt;=</span> N <span class=\"token operator\">&amp;&amp;</span> col <span class=\"token operator\">>=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> col <span class=\"token operator\">&lt;=</span> M<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">int</span> rowDir <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> colDir <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> rowRearDir <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> colRearDir <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        steps <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> steps<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> dir<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> dir<span class=\"token operator\">-</span><span class=\"token number\">5</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> nextDir <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> nextRow <span class=\"token operator\">=</span> row <span class=\"token operator\">+</span> rowDir<span class=\"token punctuation\">[</span>nextDir<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> nextCol <span class=\"token operator\">=</span> col <span class=\"token operator\">+</span> colDir<span class=\"token punctuation\">[</span>nextDir<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isInMap</span><span class=\"token punctuation\">(</span>nextRow<span class=\"token punctuation\">,</span> nextCol<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>nextRow<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>nextCol<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>nextRow<span class=\"token punctuation\">,</span> nextCol<span class=\"token punctuation\">,</span> nextDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> nextRearRow <span class=\"token operator\">=</span> row <span class=\"token operator\">+</span> rowRearDir<span class=\"token punctuation\">[</span>dir<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> nextRearCol <span class=\"token operator\">=</span> col <span class=\"token operator\">+</span> colRearDir<span class=\"token punctuation\">[</span>dir<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>nextRearRow<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>nextRearCol<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>nextRearRow<span class=\"token punctuation\">,</span> nextRearCol<span class=\"token punctuation\">,</span> dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> dir<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> M <span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> steps<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":48,"column":1,"offset":1784},"end":{"line":112,"column":4,"offset":3056},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":113,"column":1,"offset":3057}}}}