{"expireTime":9007200877354939000,"key":"transformer-remark-markdown-html-ast-ebbbefdbb0ab6a31f8bc2e03a4004281-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"참고도서: ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":7,"offset":7}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Operating System Concepts (10/E) Abraham Silberschatz, Peter B. Galvin, Greg Gagne","position":{"start":{"line":2,"column":8,"offset":8},"end":{"line":2,"column":90,"offset":90}}}],"position":{"start":{"line":2,"column":7,"offset":7},"end":{"line":2,"column":91,"offset":91}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":91,"offset":91}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"resource-deadlock","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#resource-deadlock","aria-label":"resource deadlock permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Resource Deadlock","position":{"start":{"line":4,"column":4,"offset":96},"end":{"line":4,"column":21,"offset":113}}}],"position":{"start":{"line":4,"column":1,"offset":93},"end":{"line":4,"column":21,"offset":113}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"교착상태는 일반적으로 지금까지 다뤄왔던 자원을 점유하는 상황 속에서 발생하는 ","position":{"start":{"line":6,"column":1,"offset":115},"end":{"line":6,"column":44,"offset":158}}},{"type":"raw","value":"<code class=\"language-text\">resource deadlock</code>","position":{"start":{"line":6,"column":44,"offset":158},"end":{"line":6,"column":63,"offset":177}}},{"type":"text","value":" 과 스레드간 통신 상황에서 발생하는 ","position":{"start":{"line":6,"column":63,"offset":177},"end":{"line":6,"column":84,"offset":198}}},{"type":"raw","value":"<code class=\"language-text\">communication deadlock</code>","position":{"start":{"line":6,"column":84,"offset":198},"end":{"line":6,"column":108,"offset":222}}},{"type":"text","value":" 으로 나뉜다. Communication deadlock은 정형화된 해결안이나 알고리즘이 없어 우리는 이번에도 역시 resource deadlock을 해결하는 방법에 대해서 다루게될 것이다.","position":{"start":{"line":6,"column":108,"offset":222},"end":{"line":6,"column":214,"offset":328}}}],"position":{"start":{"line":6,"column":1,"offset":115},"end":{"line":6,"column":214,"offset":328}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"cyclic-deadlock-monitoring-algorithm","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#cyclic-deadlock-monitoring-algorithm","aria-label":"cyclic deadlock monitoring algorithm permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Cyclic Deadlock Monitoring Algorithm","position":{"start":{"line":8,"column":4,"offset":333},"end":{"line":8,"column":40,"offset":369}}}],"position":{"start":{"line":8,"column":1,"offset":330},"end":{"line":8,"column":40,"offset":369}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"이 알고리즘은 프로세스가 자원을 점유할 때마다 그래프를 만들어서 사이클이 존재하는지 확인하는 방법이다. 뜬금없이 사이클이 왜 나오나 싶겠지만 이 알고리즘에서 사이클이 존재한다는 것은 자원을 점유한 상태에서 두 프로세스가 서로에게 자원을 요청하는 상태를 가르킨다. 알고리즘을 조금 더 자세히 보면 이해가 될 것이다. 프로세스가 실행중에 자원을 점유하고 해제할 때, 다음과 같은 과정으로 그래프를 만들게 된다.","position":{"start":{"line":10,"column":1,"offset":371},"end":{"line":10,"column":228,"offset":598}}}],"position":{"start":{"line":10,"column":1,"offset":371},"end":{"line":10,"column":228,"offset":598}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"프로세스 N이 자원을 lock X를 통해 자원을 획득하게 되면, N","position":{"start":{"line":12,"column":4,"offset":603},"end":{"line":12,"column":41,"offset":640}}},{"type":"raw","value":"<sub>","position":{"start":{"line":12,"column":41,"offset":640},"end":{"line":12,"column":46,"offset":645}}},{"type":"text","value":"x","position":{"start":{"line":12,"column":46,"offset":645},"end":{"line":12,"column":47,"offset":646}}},{"type":"raw","value":"</sub>","position":{"start":{"line":12,"column":47,"offset":646},"end":{"line":12,"column":53,"offset":652}}},{"type":"text","value":" 라는 노드를 하나 만든다.","position":{"start":{"line":12,"column":53,"offset":652},"end":{"line":12,"column":68,"offset":667}}}],"position":{"start":{"line":12,"column":1,"offset":600},"end":{"line":12,"column":68,"offset":667}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"만약 이 프로세스가 lock X를 점유하는 중에 lock Y를 점유하려고 하게되면 (N","position":{"start":{"line":13,"column":4,"offset":671},"end":{"line":13,"column":52,"offset":719}}},{"type":"raw","value":"<sub>","position":{"start":{"line":13,"column":52,"offset":719},"end":{"line":13,"column":57,"offset":724}}},{"type":"text","value":"x","position":{"start":{"line":13,"column":57,"offset":724},"end":{"line":13,"column":58,"offset":725}}},{"type":"raw","value":"</sub>","position":{"start":{"line":13,"column":58,"offset":725},"end":{"line":13,"column":64,"offset":731}}},{"type":"text","value":", N","position":{"start":{"line":13,"column":64,"offset":731},"end":{"line":13,"column":67,"offset":734}}},{"type":"raw","value":"<sub>","position":{"start":{"line":13,"column":67,"offset":734},"end":{"line":13,"column":72,"offset":739}}},{"type":"text","value":"y","position":{"start":{"line":13,"column":72,"offset":739},"end":{"line":13,"column":73,"offset":740}}},{"type":"raw","value":"</sub>","position":{"start":{"line":13,"column":73,"offset":740},"end":{"line":13,"column":79,"offset":746}}},{"type":"text","value":") 의 간선을 하나 만든다.","position":{"start":{"line":13,"column":79,"offset":746},"end":{"line":13,"column":94,"offset":761}}}],"position":{"start":{"line":13,"column":1,"offset":668},"end":{"line":13,"column":94,"offset":761}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"lock X가 해제되면 N","position":{"start":{"line":14,"column":4,"offset":765},"end":{"line":14,"column":18,"offset":779}}},{"type":"raw","value":"<sub>","position":{"start":{"line":14,"column":18,"offset":779},"end":{"line":14,"column":23,"offset":784}}},{"type":"text","value":"x","position":{"start":{"line":14,"column":23,"offset":784},"end":{"line":14,"column":24,"offset":785}}},{"type":"raw","value":"</sub>","position":{"start":{"line":14,"column":24,"offset":785},"end":{"line":14,"column":30,"offset":791}}},{"type":"text","value":"와 연결된 모든 간선을 삭제한다.","position":{"start":{"line":14,"column":30,"offset":791},"end":{"line":14,"column":48,"offset":809}}}],"position":{"start":{"line":14,"column":1,"offset":762},"end":{"line":14,"column":48,"offset":809}}},{"type":"text","value":"\n"}],"position":{"start":{"line":12,"column":1,"offset":600},"end":{"line":14,"column":48,"offset":809}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"다음 예시를 통해 교착상태가 발생할 가능성이 있는지 확인해보자.","position":{"start":{"line":16,"column":1,"offset":811},"end":{"line":16,"column":36,"offset":846}}}],"position":{"start":{"line":16,"column":1,"offset":811},"end":{"line":16,"column":36,"offset":846}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"example","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#example","aria-label":"example permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Example","position":{"start":{"line":18,"column":5,"offset":852},"end":{"line":18,"column":12,"offset":859}}}],"position":{"start":{"line":18,"column":1,"offset":848},"end":{"line":18,"column":12,"offset":859}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Thread 1","position":{"start":{"line":20,"column":1,"offset":861},"end":{"line":20,"column":9,"offset":869}}}],"position":{"start":{"line":20,"column":1,"offset":861},"end":{"line":20,"column":9,"offset":869}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span>Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":22,"column":1,"offset":871},"end":{"line":29,"column":4,"offset":929}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Thread 2","position":{"start":{"line":31,"column":1,"offset":931},"end":{"line":31,"column":9,"offset":939}}}],"position":{"start":{"line":31,"column":1,"offset":931},"end":{"line":31,"column":9,"offset":939}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span>Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":33,"column":1,"offset":941},"end":{"line":40,"column":4,"offset":999}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"먼저 두 스레드가 실행되면서 각 명령어가 실행되는 순서에는 차이가 있을 수 있다. 그렇기 때문에 교착상태는 항상 발생하는 것이 아니고 특정한 상황이 성립되었을 때만 발생한다. 위 두 개의 스레드도 얼마든지 다른 순서로 실행될 수 있지만 다음과 같이 실행되는 상황을 생각해보자","position":{"start":{"line":42,"column":1,"offset":1001},"end":{"line":42,"column":154,"offset":1154}}}],"position":{"start":{"line":42,"column":1,"offset":1001},"end":{"line":42,"column":154,"offset":1154}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Thread 1이 lock X를 점유한다(","position":{"start":{"line":44,"column":4,"offset":1159},"end":{"line":44,"column":27,"offset":1182}}},{"type":"raw","value":"<code class=\"language-text\">lock(X)</code>","position":{"start":{"line":44,"column":27,"offset":1182},"end":{"line":44,"column":36,"offset":1191}}},{"type":"text","value":") : 이때 Cyclic Deadlock Monitoring Algorithm에 의해 N","position":{"start":{"line":44,"column":36,"offset":1191},"end":{"line":44,"column":85,"offset":1240}}},{"type":"raw","value":"<sub>","position":{"start":{"line":44,"column":85,"offset":1240},"end":{"line":44,"column":90,"offset":1245}}},{"type":"text","value":"x","position":{"start":{"line":44,"column":90,"offset":1245},"end":{"line":44,"column":91,"offset":1246}}},{"type":"raw","value":"</sub>","position":{"start":{"line":44,"column":91,"offset":1246},"end":{"line":44,"column":97,"offset":1252}}},{"type":"text","value":" 의 노드가 하나 만들어진다.","position":{"start":{"line":44,"column":97,"offset":1252},"end":{"line":44,"column":113,"offset":1268}}}],"position":{"start":{"line":44,"column":1,"offset":1156},"end":{"line":44,"column":113,"offset":1268}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Thread 2가 lock Y를 점유한다(","position":{"start":{"line":45,"column":4,"offset":1272},"end":{"line":45,"column":27,"offset":1295}}},{"type":"raw","value":"<code class=\"language-text\">lock(Y)</code>","position":{"start":{"line":45,"column":27,"offset":1295},"end":{"line":45,"column":36,"offset":1304}}},{"type":"text","value":") : 이때 역시 새로운 점유가 발생했기 때문에 N","position":{"start":{"line":45,"column":36,"offset":1304},"end":{"line":45,"column":64,"offset":1332}}},{"type":"raw","value":"<sub>","position":{"start":{"line":45,"column":64,"offset":1332},"end":{"line":45,"column":69,"offset":1337}}},{"type":"text","value":"y","position":{"start":{"line":45,"column":69,"offset":1337},"end":{"line":45,"column":70,"offset":1338}}},{"type":"raw","value":"</sub>","position":{"start":{"line":45,"column":70,"offset":1338},"end":{"line":45,"column":76,"offset":1344}}},{"type":"text","value":" 노드를 하나 생성한다.","position":{"start":{"line":45,"column":76,"offset":1344},"end":{"line":45,"column":89,"offset":1357}}}],"position":{"start":{"line":45,"column":1,"offset":1269},"end":{"line":45,"column":89,"offset":1357}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Thread 1이 lock Y를 점유하려고 시도한다(","position":{"start":{"line":46,"column":4,"offset":1361},"end":{"line":46,"column":33,"offset":1390}}},{"type":"raw","value":"<code class=\"language-text\">lock(Y)</code>","position":{"start":{"line":46,"column":33,"offset":1390},"end":{"line":46,"column":42,"offset":1399}}},{"type":"text","value":") : 이미 lock X 를 점유한 상태에서 lock Y의 점유를 시도하기 때문에, 알고리즘에 따라 N","position":{"start":{"line":46,"column":42,"offset":1399},"end":{"line":46,"column":99,"offset":1456}}},{"type":"raw","value":"<sub>","position":{"start":{"line":46,"column":99,"offset":1456},"end":{"line":46,"column":104,"offset":1461}}},{"type":"text","value":"x","position":{"start":{"line":46,"column":104,"offset":1461},"end":{"line":46,"column":105,"offset":1462}}},{"type":"raw","value":"</sub>","position":{"start":{"line":46,"column":105,"offset":1462},"end":{"line":46,"column":111,"offset":1468}}},{"type":"text","value":"와 N","position":{"start":{"line":46,"column":111,"offset":1468},"end":{"line":46,"column":114,"offset":1471}}},{"type":"raw","value":"<sub>","position":{"start":{"line":46,"column":114,"offset":1471},"end":{"line":46,"column":119,"offset":1476}}},{"type":"text","value":"y","position":{"start":{"line":46,"column":119,"offset":1476},"end":{"line":46,"column":120,"offset":1477}}},{"type":"raw","value":"</sub>","position":{"start":{"line":46,"column":120,"offset":1477},"end":{"line":46,"column":126,"offset":1483}}},{"type":"text","value":" 사이에 간선을 만든다.","position":{"start":{"line":46,"column":126,"offset":1483},"end":{"line":46,"column":139,"offset":1496}}}],"position":{"start":{"line":46,"column":1,"offset":1358},"end":{"line":46,"column":139,"offset":1496}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Thread 2가 lock X를 점유하려고 시도한다(","position":{"start":{"line":47,"column":4,"offset":1500},"end":{"line":47,"column":33,"offset":1529}}},{"type":"raw","value":"<code class=\"language-text\">lock(X)</code>","position":{"start":{"line":47,"column":33,"offset":1529},"end":{"line":47,"column":42,"offset":1538}}},{"type":"text","value":") : 이미 lock Y 를 점유한 상태에서 lock X의 점유를 시도하기 때문에, 알고리즘에 따라 N","position":{"start":{"line":47,"column":42,"offset":1538},"end":{"line":47,"column":99,"offset":1595}}},{"type":"raw","value":"<sub>","position":{"start":{"line":47,"column":99,"offset":1595},"end":{"line":47,"column":104,"offset":1600}}},{"type":"text","value":"y","position":{"start":{"line":47,"column":104,"offset":1600},"end":{"line":47,"column":105,"offset":1601}}},{"type":"raw","value":"</sub>","position":{"start":{"line":47,"column":105,"offset":1601},"end":{"line":47,"column":111,"offset":1607}}},{"type":"text","value":"와 N","position":{"start":{"line":47,"column":111,"offset":1607},"end":{"line":47,"column":114,"offset":1610}}},{"type":"raw","value":"<sub>","position":{"start":{"line":47,"column":114,"offset":1610},"end":{"line":47,"column":119,"offset":1615}}},{"type":"text","value":"x","position":{"start":{"line":47,"column":119,"offset":1615},"end":{"line":47,"column":120,"offset":1616}}},{"type":"raw","value":"</sub>","position":{"start":{"line":47,"column":120,"offset":1616},"end":{"line":47,"column":126,"offset":1622}}},{"type":"text","value":" 사이에 간선을 만든다.","position":{"start":{"line":47,"column":126,"offset":1622},"end":{"line":47,"column":139,"offset":1635}}}],"position":{"start":{"line":47,"column":1,"offset":1497},"end":{"line":47,"column":139,"offset":1635}}},{"type":"text","value":"\n"}],"position":{"start":{"line":44,"column":1,"offset":1156},"end":{"line":47,"column":139,"offset":1635}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"이때 두 스레드가 만든 그래프 안에 사이클이 발생했기 때문에, 프로그램은 교착상태에 대한 경고를 사용자에게 알릴 수 있다.","position":{"start":{"line":49,"column":1,"offset":1637},"end":{"line":49,"column":69,"offset":1705}}}],"position":{"start":{"line":49,"column":1,"offset":1637},"end":{"line":49,"column":69,"offset":1705}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"potential-cyclic-deadlock-detection-algorithm","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#potential-cyclic-deadlock-detection-algorithm","aria-label":"potential cyclic deadlock detection algorithm permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Potential Cyclic Deadlock Detection Algorithm","position":{"start":{"line":51,"column":4,"offset":1710},"end":{"line":51,"column":49,"offset":1755}}}],"position":{"start":{"line":51,"column":1,"offset":1707},"end":{"line":51,"column":49,"offset":1755}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"위에서 사용한 알고리즘은 실제로 교착상태가 발생하는 순서로 프로세스가 실행됐을 때만 교착상태를 판단할 수 있다. 그렇다면 잠재되어 있는 교착상태의 위험에 대해 대처할 수 있는 알고리즘은 없을까? Potentail Cyclic Deadlock Detection Algorithm 은 이름이 말해주는 것처럼 교착상태가 일어날 수 있는 상황을 판별하는 알고리즘이다. 위 알고리즘과 큰 차이는 없지만 lock을 해제할 때, 간선을 삭제해주지 않고 그대로 유지한다는 점이 다르다. 따라서 이 알고리즘의 흐름을 정리해보면 다음과 같다.","position":{"start":{"line":53,"column":1,"offset":1757},"end":{"line":53,"column":294,"offset":2050}}}],"position":{"start":{"line":53,"column":1,"offset":1757},"end":{"line":53,"column":294,"offset":2050}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"프로세스 N이 lock X를 점유하게 되면, 노드 N","position":{"start":{"line":55,"column":4,"offset":2055},"end":{"line":55,"column":33,"offset":2084}}},{"type":"raw","value":"<sub>","position":{"start":{"line":55,"column":33,"offset":2084},"end":{"line":55,"column":38,"offset":2089}}},{"type":"text","value":"x","position":{"start":{"line":55,"column":38,"offset":2089},"end":{"line":55,"column":39,"offset":2090}}},{"type":"raw","value":"</sub>","position":{"start":{"line":55,"column":39,"offset":2090},"end":{"line":55,"column":45,"offset":2096}}},{"type":"text","value":" 를 생성한다.","position":{"start":{"line":55,"column":45,"offset":2096},"end":{"line":55,"column":53,"offset":2104}}}],"position":{"start":{"line":55,"column":1,"offset":2052},"end":{"line":55,"column":53,"offset":2104}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"프로세스 N이 lock X를 점유한 상태에서 lock Y를 점유하려고 하면 (N","position":{"start":{"line":56,"column":4,"offset":2108},"end":{"line":56,"column":48,"offset":2152}}},{"type":"raw","value":"<sub>","position":{"start":{"line":56,"column":48,"offset":2152},"end":{"line":56,"column":53,"offset":2157}}},{"type":"text","value":"x","position":{"start":{"line":56,"column":53,"offset":2157},"end":{"line":56,"column":54,"offset":2158}}},{"type":"raw","value":"</sub>","position":{"start":{"line":56,"column":54,"offset":2158},"end":{"line":56,"column":60,"offset":2164}}},{"type":"text","value":", N","position":{"start":{"line":56,"column":60,"offset":2164},"end":{"line":56,"column":63,"offset":2167}}},{"type":"raw","value":"<sub>","position":{"start":{"line":56,"column":63,"offset":2167},"end":{"line":56,"column":68,"offset":2172}}},{"type":"text","value":"y","position":{"start":{"line":56,"column":68,"offset":2172},"end":{"line":56,"column":69,"offset":2173}}},{"type":"raw","value":"</sub>","position":{"start":{"line":56,"column":69,"offset":2173},"end":{"line":56,"column":75,"offset":2179}}},{"type":"text","value":") 의 간선을 하나 만든다.","position":{"start":{"line":56,"column":75,"offset":2179},"end":{"line":56,"column":90,"offset":2194}}}],"position":{"start":{"line":56,"column":1,"offset":2105},"end":{"line":56,"column":90,"offset":2194}}},{"type":"text","value":"\n"}],"position":{"start":{"line":55,"column":1,"offset":2052},"end":{"line":56,"column":90,"offset":2194}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"이렇게 하면 한번 만들어진 사이클은 프로세스가 종료될 때까지 남아있기 때문에, 실제로 교착상태가 발생하지 않았다고 해도 사용자에게 교착상태가 일어날 위험성이 있다는 것을 알릴 수 있다.","position":{"start":{"line":58,"column":1,"offset":2196},"end":{"line":58,"column":104,"offset":2299}}}],"position":{"start":{"line":58,"column":1,"offset":2196},"end":{"line":58,"column":104,"offset":2299}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"false-positive-cases","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#false-positive-cases","aria-label":"false positive cases permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"False Positive Cases","position":{"start":{"line":60,"column":4,"offset":2304},"end":{"line":60,"column":24,"offset":2324}}}],"position":{"start":{"line":60,"column":1,"offset":2301},"end":{"line":60,"column":24,"offset":2324}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"기존 알고리즘을 보완한 Potential Cyclic Deadlock Detection Algorithm을 사용하면 완벽하게 교착상태의 발생 가능성을 막을 수 있을 것 같지만, 실상은 그렇지 않다. 실제로는 교착상태가 일어날 일이 없는데, 사이클 알고리즘이 교착상태로 오탐지할 수 있는 경우를 알아보자.","position":{"start":{"line":62,"column":1,"offset":2326},"end":{"line":62,"column":170,"offset":2495}}}],"position":{"start":{"line":62,"column":1,"offset":2326},"end":{"line":62,"column":170,"offset":2495}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"1-같은-스레드-안에서-만들어진-사이클","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#1-%EA%B0%99%EC%9D%80-%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%95%88%EC%97%90%EC%84%9C-%EB%A7%8C%EB%93%A4%EC%96%B4%EC%A7%84-%EC%82%AC%EC%9D%B4%ED%81%B4","aria-label":"1 같은 스레드 안에서 만들어진 사이클 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"1. 같은 스레드 안에서 만들어진 사이클","position":{"start":{"line":64,"column":5,"offset":2501},"end":{"line":64,"column":27,"offset":2523}}}],"position":{"start":{"line":64,"column":1,"offset":2497},"end":{"line":64,"column":27,"offset":2523}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Thread 1","position":{"start":{"line":66,"column":1,"offset":2525},"end":{"line":66,"column":9,"offset":2533}}}],"position":{"start":{"line":66,"column":1,"offset":2525},"end":{"line":66,"column":9,"offset":2533}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span>Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span>Y<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":68,"column":1,"offset":2535},"end":{"line":80,"column":4,"offset":2657}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"위와 같이 한 스레드 안에서 두 번에 걸쳐 자원을 점유하는 로직이 있다고 해보자. 이 스레드는 가장 처음에 lock X를 점유한 채로 lock Y을 획득하려고 하기 때문에 X에 대한 노드와 해당 노드로 부터 Y노드로 향하는 간선을 가지게 된다. 그리고 작업을 마친 뒤 X와 Y를 해제하게 되는데, 이때 Potential Cyclic Deadlock Detection Algorithm 은 만들어진 간선을 해제하지 않기 때문에 노드와 간선이 남아있는 채로 계속 스레드가 실행된다.","position":{"start":{"line":82,"column":1,"offset":2659},"end":{"line":82,"column":268,"offset":2926}}}],"position":{"start":{"line":82,"column":1,"offset":2659},"end":{"line":82,"column":268,"offset":2926}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"실행되던 스레드는 lock Y 를 획득하고 lock X를 점유하려고 한다. 이때 노드 Y가 생성되고 노드 Y로부터 노드 X로 연결되는 간선이 만들어진다. 즉, 사이클이 만들어지는 것이다.","position":{"start":{"line":84,"column":1,"offset":2928},"end":{"line":84,"column":105,"offset":3032}}}],"position":{"start":{"line":84,"column":1,"offset":2928},"end":{"line":84,"column":105,"offset":3032}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"하지만 한 스레드 안에서는 교착상태가 발생할 수 없다. 따라서 이 경우에는 교착상태가 아니지만 알고리즘이 교착상태라고 오인하는 False Positive 가 발생한다.","position":{"start":{"line":86,"column":1,"offset":3034},"end":{"line":86,"column":94,"offset":3127}}}],"position":{"start":{"line":86,"column":1,"offset":3034},"end":{"line":86,"column":94,"offset":3127}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"2-게이트-락gate-lock이-있는-상황","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#2-%EA%B2%8C%EC%9D%B4%ED%8A%B8-%EB%9D%BDgate-lock%EC%9D%B4-%EC%9E%88%EB%8A%94-%EC%83%81%ED%99%A9","aria-label":"2 게이트 락gate lock이 있는 상황 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"2. 게이트 락(Gate Lock)이 있는 상황","position":{"start":{"line":88,"column":5,"offset":3133},"end":{"line":88,"column":31,"offset":3159}}}],"position":{"start":{"line":88,"column":1,"offset":3129},"end":{"line":88,"column":31,"offset":3159}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Thread 1","position":{"start":{"line":90,"column":1,"offset":3161},"end":{"line":90,"column":9,"offset":3169}}}],"position":{"start":{"line":90,"column":1,"offset":3161},"end":{"line":90,"column":9,"offset":3169}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>Z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n        <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span>Z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span>Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":92,"column":1,"offset":3171},"end":{"line":102,"column":4,"offset":3279}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Thread 2","position":{"start":{"line":104,"column":1,"offset":3281},"end":{"line":104,"column":9,"offset":3289}}}],"position":{"start":{"line":104,"column":1,"offset":3281},"end":{"line":104,"column":9,"offset":3289}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>Z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n            <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span>Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span>Z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span>Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":106,"column":1,"offset":3291},"end":{"line":118,"column":4,"offset":3435}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"위 같이 두 개의 스레드가 실행되고 있다고 해보자. 중첩된 lock들을 보면 우리가 흔히 알고 있는 교착상태 패턴이다. Thread 1은 Y를 점유하는 중에 Z를 요구하게되고, Thread 2는 Z를 점유하는 중에 Y를 요구하게 된다.","position":{"start":{"line":120,"column":1,"offset":3437},"end":{"line":120,"column":132,"offset":3568}}}],"position":{"start":{"line":120,"column":1,"offset":3437},"end":{"line":120,"column":132,"offset":3568}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"하지만 두 스레드 모두 중첩된 lock을 동일한 lock X 로 감싸고 있다. 따라서 Thread 1 이 lock을 획득하게되면, Thread 2는 lock Y 와 Z가 있는 구간에 절대 도달하지 못하기 때문에 상호배제가 보장되게 된다. 이렇게 두 스레드에서 사용되는 lock 들의 상호배제를 보장하는 lock을 ","position":{"start":{"line":122,"column":1,"offset":3570},"end":{"line":122,"column":176,"offset":3745}}},{"type":"raw","value":"<code class=\"language-text\">Gate Lock(혹은 Guard Lock)</code>","position":{"start":{"line":122,"column":176,"offset":3745},"end":{"line":122,"column":202,"offset":3771}}},{"type":"text","value":" 이라고 한다.","position":{"start":{"line":122,"column":202,"offset":3771},"end":{"line":122,"column":210,"offset":3779}}}],"position":{"start":{"line":122,"column":1,"offset":3570},"end":{"line":122,"column":210,"offset":3779}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"이 경우에도 교착상태는 절대로 발생하지 않지만, 알고리즘으로 사이클을 검사하게 되면 X와 Y의 관계 때문에 사이클이 발생하게된다.","position":{"start":{"line":124,"column":1,"offset":3781},"end":{"line":124,"column":73,"offset":3853}}}],"position":{"start":{"line":124,"column":1,"offset":3781},"end":{"line":124,"column":73,"offset":3853}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"3-스레드가-스레드를-생성하는-상황","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#3-%EC%8A%A4%EB%A0%88%EB%93%9C%EA%B0%80-%EC%8A%A4%EB%A0%88%EB%93%9C%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EC%83%81%ED%99%A9","aria-label":"3 스레드가 스레드를 생성하는 상황 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"3. 스레드가 스레드를 생성하는 상황","position":{"start":{"line":126,"column":5,"offset":3859},"end":{"line":126,"column":25,"offset":3879}}}],"position":{"start":{"line":126,"column":1,"offset":3855},"end":{"line":126,"column":25,"offset":3879}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Thread 1","position":{"start":{"line":128,"column":1,"offset":3881},"end":{"line":128,"column":9,"offset":3889}}}],"position":{"start":{"line":128,"column":1,"offset":3881},"end":{"line":128,"column":9,"offset":3889}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">lock(X);\n    lock(Y);\n    unlock(Y);\nunlock(X);\nstart(f2);</code></pre></div>","position":{"start":{"line":130,"column":1,"offset":3891},"end":{"line":136,"column":4,"offset":3957}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Thread 2","position":{"start":{"line":138,"column":1,"offset":3959},"end":{"line":138,"column":9,"offset":3967}}}],"position":{"start":{"line":138,"column":1,"offset":3959},"end":{"line":138,"column":9,"offset":3967}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">lock(Y);\n    lock(X);\n    unlock(X);\nunlock(Y);</code></pre></div>","position":{"start":{"line":140,"column":1,"offset":3969},"end":{"line":145,"column":4,"offset":4024}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"위 경우에서도 X 와 Y 사이에서 교착상태가 일어나는 패턴이 발견된다. 그렇기 때문에 알고리즘은 여전히 사이클이 있는 그래프를 만들게 될 것이다.","position":{"start":{"line":147,"column":1,"offset":4026},"end":{"line":147,"column":82,"offset":4107}}}],"position":{"start":{"line":147,"column":1,"offset":4026},"end":{"line":147,"column":82,"offset":4107}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"하지만 상식적으로 생각해보자. 교착상태는 실행 중인 두 프로세스나 스레드가 서로의 자원을 기다리게 되기 때문에 발생한다. 위 코드를 보면 Thread 1의 자원 점유와 해제 가 모두 끝난 뒤에 Thread 2를 생성한다. 따라서 Thread 1 과 Thread 2는 절대 병렬적으로 실행될 수 없는 스레드이지만 교착상태가 있을 것이라고 오탐지하는 것이다.","position":{"start":{"line":149,"column":1,"offset":4109},"end":{"line":149,"column":199,"offset":4307}}}],"position":{"start":{"line":149,"column":1,"offset":4109},"end":{"line":149,"column":199,"offset":4307}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"goodlock-algorithm","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#goodlock-algorithm","aria-label":"goodlock algorithm permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"GoodLock Algorithm","position":{"start":{"line":151,"column":4,"offset":4312},"end":{"line":151,"column":22,"offset":4330}}}],"position":{"start":{"line":151,"column":1,"offset":4309},"end":{"line":151,"column":22,"offset":4330}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"GoodLock 알고리즘은 기존 Cyclic Deadlock Detection 알고리즘의 문제점이었던 오탐지 상황을 모두 보완한 알고리즘이다. 사이클을 탐지한다는 점에서 큰 그림은 비슷하지만 몇가지 다른 부분들이 있다.","position":{"start":{"line":153,"column":1,"offset":4332},"end":{"line":153,"column":123,"offset":4454}}}],"position":{"start":{"line":153,"column":1,"offset":4332},"end":{"line":153,"column":123,"offset":4454}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"GoodLock 알고리즘은 앞서 설명했던 사이클의 세 가지 예외상황을 탐지하기 위해서 간선을 만들 때 몇가지 정보를 더 추가해서 간선은 만들게 되는데, 다음과 같이 정보를 구성한다.","position":{"start":{"line":155,"column":1,"offset":4456},"end":{"line":155,"column":102,"offset":4557}}}],"position":{"start":{"line":155,"column":1,"offset":4456},"end":{"line":155,"column":102,"offset":4557}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"(노드1, (노드1의 코드 섹션, 간선을 만든 스레드의 아이디, Guard Lock 위치, 노드2의 코드 섹션) 노드2)","position":{"start":{"line":157,"column":1,"offset":4559},"end":{"line":157,"column":68,"offset":4626}}}],"position":{"start":{"line":157,"column":1,"offset":4559},"end":{"line":157,"column":68,"offset":4626}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"헷갈리니까 좀 더 자세히 보자. 그리고 기억해야할 것은 사이클이 발생했다는 것은 위 간선 정보가 한 쌍으로 만들어진다는 것이다.","position":{"start":{"line":159,"column":1,"offset":4628},"end":{"line":159,"column":72,"offset":4699}}}],"position":{"start":{"line":159,"column":1,"offset":4628},"end":{"line":159,"column":72,"offset":4699}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"노드 1, 노드 2: 사이클을 만드는 두 개의 노드","position":{"start":{"line":161,"column":4,"offset":4704},"end":{"line":161,"column":32,"offset":4732}}}],"position":{"start":{"line":161,"column":1,"offset":4701},"end":{"line":161,"column":32,"offset":4732}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"코드 섹션: 두 노드간의 간선이 만들어진 코드블럭.","position":{"start":{"line":162,"column":4,"offset":4736},"end":{"line":162,"column":32,"offset":4764}}}],"position":{"start":{"line":162,"column":1,"offset":4733},"end":{"line":162,"column":32,"offset":4764}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"간선을 만든 스레드 아이디","position":{"start":{"line":163,"column":4,"offset":4768},"end":{"line":163,"column":18,"offset":4782}}}],"position":{"start":{"line":163,"column":1,"offset":4765},"end":{"line":163,"column":18,"offset":4782}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Guard Lock 위치: 간선을 만든 lock들을 감싸고 있는 lock의 위치","position":{"start":{"line":164,"column":4,"offset":4786},"end":{"line":164,"column":48,"offset":4830}}}],"position":{"start":{"line":164,"column":1,"offset":4783},"end":{"line":164,"column":48,"offset":4830}}},{"type":"text","value":"\n"}],"position":{"start":{"line":161,"column":1,"offset":4701},"end":{"line":164,"column":48,"offset":4830}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"GoodLock 알고리즘은 그래프에서 사이클이 발생했을 때 위 정보를 가지고 해당 사이클이 교착상태에 유효한 사이클인지 확인하게 된다. 그럼 앞서서 지적되었던 false positive 상황들을 검사해보자.","position":{"start":{"line":166,"column":1,"offset":4832},"end":{"line":166,"column":116,"offset":4947}}}],"position":{"start":{"line":166,"column":1,"offset":4832},"end":{"line":166,"column":116,"offset":4947}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"1-같은-스레드-안에서-만들어진-사이클-1","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#1-%EA%B0%99%EC%9D%80-%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%95%88%EC%97%90%EC%84%9C-%EB%A7%8C%EB%93%A4%EC%96%B4%EC%A7%84-%EC%82%AC%EC%9D%B4%ED%81%B4-1","aria-label":"1 같은 스레드 안에서 만들어진 사이클 1 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"1. 같은 스레드 안에서 만들어진 사이클","position":{"start":{"line":168,"column":5,"offset":4953},"end":{"line":168,"column":27,"offset":4975}}}],"position":{"start":{"line":168,"column":1,"offset":4949},"end":{"line":168,"column":27,"offset":4975}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"(m","position":{"start":{"line":170,"column":1,"offset":4977},"end":{"line":170,"column":3,"offset":4979}}},{"type":"raw","value":"<sub>","position":{"start":{"line":170,"column":3,"offset":4979},"end":{"line":170,"column":8,"offset":4984}}},{"type":"text","value":"11","position":{"start":{"line":170,"column":8,"offset":4984},"end":{"line":170,"column":10,"offset":4986}}},{"type":"raw","value":"</sub>","position":{"start":{"line":170,"column":10,"offset":4986},"end":{"line":170,"column":16,"offset":4992}}},{"type":"text","value":", (s","position":{"start":{"line":170,"column":16,"offset":4992},"end":{"line":170,"column":20,"offset":4996}}},{"type":"raw","value":"<sub>","position":{"start":{"line":170,"column":20,"offset":4996},"end":{"line":170,"column":25,"offset":5001}}},{"type":"text","value":"11","position":{"start":{"line":170,"column":25,"offset":5001},"end":{"line":170,"column":27,"offset":5003}}},{"type":"raw","value":"</sub>","position":{"start":{"line":170,"column":27,"offset":5003},"end":{"line":170,"column":33,"offset":5009}}},{"type":"text","value":", t","position":{"start":{"line":170,"column":33,"offset":5009},"end":{"line":170,"column":36,"offset":5012}}},{"type":"raw","value":"<sub>","position":{"start":{"line":170,"column":36,"offset":5012},"end":{"line":170,"column":41,"offset":5017}}},{"type":"text","value":"1","position":{"start":{"line":170,"column":41,"offset":5017},"end":{"line":170,"column":42,"offset":5018}}},{"type":"raw","value":"</sub>","position":{"start":{"line":170,"column":42,"offset":5018},"end":{"line":170,"column":48,"offset":5024}}},{"type":"text","value":", G","position":{"start":{"line":170,"column":48,"offset":5024},"end":{"line":170,"column":51,"offset":5027}}},{"type":"raw","value":"<sub>","position":{"start":{"line":170,"column":51,"offset":5027},"end":{"line":170,"column":56,"offset":5032}}},{"type":"text","value":"1","position":{"start":{"line":170,"column":56,"offset":5032},"end":{"line":170,"column":57,"offset":5033}}},{"type":"raw","value":"</sub>","position":{"start":{"line":170,"column":57,"offset":5033},"end":{"line":170,"column":63,"offset":5039}}},{"type":"text","value":", s","position":{"start":{"line":170,"column":63,"offset":5039},"end":{"line":170,"column":66,"offset":5042}}},{"type":"raw","value":"<sub>","position":{"start":{"line":170,"column":66,"offset":5042},"end":{"line":170,"column":71,"offset":5047}}},{"type":"text","value":"12","position":{"start":{"line":170,"column":71,"offset":5047},"end":{"line":170,"column":73,"offset":5049}}},{"type":"raw","value":"</sub>","position":{"start":{"line":170,"column":73,"offset":5049},"end":{"line":170,"column":79,"offset":5055}}},{"type":"text","value":"),\nm","position":{"start":{"line":170,"column":79,"offset":5055},"end":{"line":171,"column":2,"offset":5059}}},{"type":"raw","value":"<sub>","position":{"start":{"line":171,"column":2,"offset":5059},"end":{"line":171,"column":7,"offset":5064}}},{"type":"text","value":"12","position":{"start":{"line":171,"column":7,"offset":5064},"end":{"line":171,"column":9,"offset":5066}}},{"type":"raw","value":"</sub>","position":{"start":{"line":171,"column":9,"offset":5066},"end":{"line":171,"column":15,"offset":5072}}},{"type":"text","value":") ","position":{"start":{"line":171,"column":15,"offset":5072},"end":{"line":171,"column":17,"offset":5074}}},{"type":"raw","value":"<br>","position":{"start":{"line":171,"column":17,"offset":5074},"end":{"line":171,"column":21,"offset":5078}}},{"type":"text","value":"\n(m","position":{"start":{"line":171,"column":21,"offset":5078},"end":{"line":172,"column":3,"offset":5081}}},{"type":"raw","value":"<sub>","position":{"start":{"line":172,"column":3,"offset":5081},"end":{"line":172,"column":8,"offset":5086}}},{"type":"text","value":"21","position":{"start":{"line":172,"column":8,"offset":5086},"end":{"line":172,"column":10,"offset":5088}}},{"type":"raw","value":"</sub>","position":{"start":{"line":172,"column":10,"offset":5088},"end":{"line":172,"column":16,"offset":5094}}},{"type":"text","value":", (s","position":{"start":{"line":172,"column":16,"offset":5094},"end":{"line":172,"column":20,"offset":5098}}},{"type":"raw","value":"<sub>","position":{"start":{"line":172,"column":20,"offset":5098},"end":{"line":172,"column":25,"offset":5103}}},{"type":"text","value":"21","position":{"start":{"line":172,"column":25,"offset":5103},"end":{"line":172,"column":27,"offset":5105}}},{"type":"raw","value":"</sub>","position":{"start":{"line":172,"column":27,"offset":5105},"end":{"line":172,"column":33,"offset":5111}}},{"type":"text","value":", t","position":{"start":{"line":172,"column":33,"offset":5111},"end":{"line":172,"column":36,"offset":5114}}},{"type":"raw","value":"<sub>","position":{"start":{"line":172,"column":36,"offset":5114},"end":{"line":172,"column":41,"offset":5119}}},{"type":"text","value":"2","position":{"start":{"line":172,"column":41,"offset":5119},"end":{"line":172,"column":42,"offset":5120}}},{"type":"raw","value":"</sub>","position":{"start":{"line":172,"column":42,"offset":5120},"end":{"line":172,"column":48,"offset":5126}}},{"type":"text","value":", G","position":{"start":{"line":172,"column":48,"offset":5126},"end":{"line":172,"column":51,"offset":5129}}},{"type":"raw","value":"<sub>","position":{"start":{"line":172,"column":51,"offset":5129},"end":{"line":172,"column":56,"offset":5134}}},{"type":"text","value":"2","position":{"start":{"line":172,"column":56,"offset":5134},"end":{"line":172,"column":57,"offset":5135}}},{"type":"raw","value":"</sub>","position":{"start":{"line":172,"column":57,"offset":5135},"end":{"line":172,"column":63,"offset":5141}}},{"type":"text","value":",\ns","position":{"start":{"line":172,"column":63,"offset":5141},"end":{"line":173,"column":2,"offset":5144}}},{"type":"raw","value":"<sub>","position":{"start":{"line":173,"column":2,"offset":5144},"end":{"line":173,"column":7,"offset":5149}}},{"type":"text","value":"22","position":{"start":{"line":173,"column":7,"offset":5149},"end":{"line":173,"column":9,"offset":5151}}},{"type":"raw","value":"</sub>","position":{"start":{"line":173,"column":9,"offset":5151},"end":{"line":173,"column":15,"offset":5157}}},{"type":"text","value":"), m","position":{"start":{"line":173,"column":15,"offset":5157},"end":{"line":173,"column":19,"offset":5161}}},{"type":"raw","value":"<sub>","position":{"start":{"line":173,"column":19,"offset":5161},"end":{"line":173,"column":24,"offset":5166}}},{"type":"text","value":"22","position":{"start":{"line":173,"column":24,"offset":5166},"end":{"line":173,"column":26,"offset":5168}}},{"type":"raw","value":"</sub>","position":{"start":{"line":173,"column":26,"offset":5168},"end":{"line":173,"column":32,"offset":5174}}},{"type":"text","value":")","position":{"start":{"line":173,"column":32,"offset":5174},"end":{"line":173,"column":33,"offset":5175}}}],"position":{"start":{"line":170,"column":1,"offset":4977},"end":{"line":173,"column":33,"offset":5175}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"위와 같이 두개의 노드가 사이클을 만들었다고 해보자. 한 스레드 안에서는 병렬적으로 작업이 실행되는 것이 불가능하기 때문에 한 스레드안에서 만들어지는 사이클은 무의미하다. 따라서 두 간선 정보에서 스레드 아이디를 의미하는 t","position":{"start":{"line":175,"column":1,"offset":5177},"end":{"line":175,"column":126,"offset":5302}}},{"type":"raw","value":"<sub>","position":{"start":{"line":175,"column":126,"offset":5302},"end":{"line":175,"column":131,"offset":5307}}},{"type":"text","value":"1","position":{"start":{"line":175,"column":131,"offset":5307},"end":{"line":175,"column":132,"offset":5308}}},{"type":"raw","value":"</sub>","position":{"start":{"line":175,"column":132,"offset":5308},"end":{"line":175,"column":138,"offset":5314}}},{"type":"text","value":"과 t","position":{"start":{"line":175,"column":138,"offset":5314},"end":{"line":175,"column":141,"offset":5317}}},{"type":"raw","value":"<sub>","position":{"start":{"line":175,"column":141,"offset":5317},"end":{"line":175,"column":146,"offset":5322}}},{"type":"text","value":"2","position":{"start":{"line":175,"column":146,"offset":5322},"end":{"line":175,"column":147,"offset":5323}}},{"type":"raw","value":"</sub>","position":{"start":{"line":175,"column":147,"offset":5323},"end":{"line":175,"column":153,"offset":5329}}},{"type":"text","value":" 가 같은 값을 가지는지 확인하면 false positive 상황인지 쉽게 판별할 수 있게된다.","position":{"start":{"line":175,"column":153,"offset":5329},"end":{"line":175,"column":206,"offset":5382}}}],"position":{"start":{"line":175,"column":1,"offset":5177},"end":{"line":175,"column":206,"offset":5382}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"2-게이트-락gate-lock이-있는-상황-1","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#2-%EA%B2%8C%EC%9D%B4%ED%8A%B8-%EB%9D%BDgate-lock%EC%9D%B4-%EC%9E%88%EB%8A%94-%EC%83%81%ED%99%A9-1","aria-label":"2 게이트 락gate lock이 있는 상황 1 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"2. 게이트 락(Gate Lock)이 있는 상황","position":{"start":{"line":177,"column":5,"offset":5388},"end":{"line":177,"column":31,"offset":5414}}}],"position":{"start":{"line":177,"column":1,"offset":5384},"end":{"line":177,"column":31,"offset":5414}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"게이트 락의 여부역시 두 간선이 가지는 G의 값을 확인하는 것으로 해결할 수 있다. 만약 두 G가 가지는 위치가 겹친다면, 둘은 같은 곳에 위치해 있다는 의미이기 때문에 스레드간의 상호배제를 보장하는 게이트 락의 역할을 하게된다.","position":{"start":{"line":179,"column":1,"offset":5416},"end":{"line":179,"column":129,"offset":5544}}}],"position":{"start":{"line":179,"column":1,"offset":5416},"end":{"line":179,"column":129,"offset":5544}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"3-스레드가-스레드를-생성하는-상황-1","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#3-%EC%8A%A4%EB%A0%88%EB%93%9C%EA%B0%80-%EC%8A%A4%EB%A0%88%EB%93%9C%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EC%83%81%ED%99%A9-1","aria-label":"3 스레드가 스레드를 생성하는 상황 1 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"3. 스레드가 스레드를 생성하는 상황","position":{"start":{"line":181,"column":5,"offset":5550},"end":{"line":181,"column":25,"offset":5570}}}],"position":{"start":{"line":181,"column":1,"offset":5546},"end":{"line":181,"column":25,"offset":5570}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"간선정보에 포함된 s 값은 간선이 만들어진 코드섹션을 의미한다. 만약에 먼저 만들어진 간선의 코드섹션이 뒤에 만들어진 간선보다 앞에 있다면 두 간선은 병렬적으로 처리되면서 만들어진 것이 아니라 순차적으로 처리된 코드에서 만들어졌음을 의미한다. 따라서 이런 경우에는 false positive 상황으로 판단하게 된다.","position":{"start":{"line":183,"column":1,"offset":5572},"end":{"line":183,"column":177,"offset":5748}}}],"position":{"start":{"line":183,"column":1,"offset":5572},"end":{"line":183,"column":177,"offset":5748}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":184,"column":1,"offset":5749}}}}