{"expireTime":9007200877354310000,"key":"transformer-remark-markdown-html-ast-54fec43f446d64dcee6e2aaef6cc20d2-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"참고도서: ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":7,"offset":7}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Operating System Concepts (10/E) Abraham Silberschatz, Peter B. Galvin, Greg Gagne","position":{"start":{"line":2,"column":8,"offset":8},"end":{"line":2,"column":90,"offset":90}}}],"position":{"start":{"line":2,"column":7,"offset":7},"end":{"line":2,"column":91,"offset":91}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":91,"offset":91}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{"id":"cpu-scheduling","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#cpu-scheduling","aria-label":"cpu scheduling permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"CPU Scheduling","position":{"start":{"line":4,"column":3,"offset":95},"end":{"line":4,"column":17,"offset":109}}}],"position":{"start":{"line":4,"column":1,"offset":93},"end":{"line":4,"column":17,"offset":109}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"학기초에 개괄적인 내용을 다루면서 CPU Scheduling 에 대해 논의한 바가 있다. CPU의 한 코어는 한번에 하나의 process만을 가질 수 있고, 여러 프로세스들을 효과적으로 작업하기 위해서 Time-sharing 전략을 사용해왔다. 다수의 프로그램을 메모리에 적재해서 프로세스로 만들고 CPU에 이 프로세스들을 번갈아가며 빠르게 할당하는 전략이다. 그렇다면 여러 프로세스를 어떻게 관리하는 것이 가장 효과적인 방법일까?","position":{"start":{"line":6,"column":1,"offset":111},"end":{"line":6,"column":242,"offset":352}}}],"position":{"start":{"line":6,"column":1,"offset":111},"end":{"line":6,"column":242,"offset":352}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"io-and-cpu-burst","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#io-and-cpu-burst","aria-label":"io and cpu burst permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"I/O and CPU Burst","position":{"start":{"line":8,"column":4,"offset":357},"end":{"line":8,"column":21,"offset":374}}}],"position":{"start":{"line":8,"column":1,"offset":354},"end":{"line":8,"column":21,"offset":374}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"프로세스의 실행은 항상 두 단계로 이루어진다.","position":{"start":{"line":10,"column":1,"offset":376},"end":{"line":10,"column":26,"offset":401}}}],"position":{"start":{"line":10,"column":1,"offset":376},"end":{"line":10,"column":26,"offset":401}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"CPU burst","position":{"start":{"line":12,"column":4,"offset":406},"end":{"line":12,"column":13,"offset":415}}}],"position":{"start":{"line":12,"column":1,"offset":403},"end":{"line":12,"column":13,"offset":415}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"I/O burst","position":{"start":{"line":13,"column":4,"offset":419},"end":{"line":13,"column":13,"offset":428}}}],"position":{"start":{"line":13,"column":1,"offset":416},"end":{"line":13,"column":13,"offset":428}}},{"type":"text","value":"\n"}],"position":{"start":{"line":12,"column":1,"offset":403},"end":{"line":13,"column":13,"offset":428}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"의 순환이다. CPU-burst 는 프로세스가 CPU에 의해 실제로 실행되는 것을 말한다. 그리고 I/O-burst 는 I/O 를 위해 대기하는 것을 말한다. 어떤 프로세스가 실행되면, 해당 프로세스는 CPU-burst 로 시작된다. 그리고 어떤 I/O burst 가 되었다가 다시 CPU-burst 가 된다. 프로세스가 종료되는 시점에서도 CPU-burst 이후에 I/O-burst가 방생하고 이 시점에서 system call이 발생하며 프로세스가 종료되게 된다. 일반적으로 CPU-bound 프로그램은 긴 CPU-burst 를 가지고, I/O-bound 프로그램은 I/O 요청이 많기 때문에 짧은 CPU-burst 를 가지게 된다.","position":{"start":{"line":15,"column":1,"offset":430},"end":{"line":15,"column":356,"offset":785}}}],"position":{"start":{"line":15,"column":1,"offset":430},"end":{"line":15,"column":356,"offset":785}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"cpu-scheduler","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#cpu-scheduler","aria-label":"cpu scheduler permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"CPU Scheduler","position":{"start":{"line":17,"column":4,"offset":790},"end":{"line":17,"column":17,"offset":803}}}],"position":{"start":{"line":17,"column":1,"offset":787},"end":{"line":17,"column":17,"offset":803}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"메모리에 적재되어 ready queue에 대기 중인 프로세스를 선택해서 CPU에 할당해주는 작업을 해주는 운영체제의 일부를 short-term schduler, 혹은 CPU scheduler 라고 한다. 여기서 다시 정리하자면, long-term scheduler, 혹은 job scheduler는 저장장치에 있는 프로세스를 메모리에 적재해주는 역할을 하고, short-term scheduler, 혹은 CPU scheduler 는 메모리에 적재되어 있는 프로세스 중 CPU에 할당할 프로세스를 고르는 역할을 한다.","position":{"start":{"line":19,"column":1,"offset":805},"end":{"line":19,"column":289,"offset":1093}}}],"position":{"start":{"line":19,"column":1,"offset":805},"end":{"line":19,"column":289,"offset":1093}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"메모리에 적재되엉 있는 프로세스의 PCB를 모아두는 공간을 Ready Queue 라고 하지만, 우리가 알고 있는 특성처럼 항상 FIFO 원칙으로 PCB가 관리되는 것이 아니라는 것을 기억하자.","position":{"start":{"line":21,"column":1,"offset":1095},"end":{"line":21,"column":108,"offset":1202}}}],"position":{"start":{"line":21,"column":1,"offset":1095},"end":{"line":21,"column":108,"offset":1202}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"preemptive-and-nonpreemptive-scheduling","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#preemptive-and-nonpreemptive-scheduling","aria-label":"preemptive and nonpreemptive scheduling permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Preemptive and Nonpreemptive Scheduling","position":{"start":{"line":23,"column":4,"offset":1207},"end":{"line":23,"column":43,"offset":1246}}}],"position":{"start":{"line":23,"column":1,"offset":1204},"end":{"line":23,"column":43,"offset":1246}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"CPU 스케줄링은 다음과 같은 상황에서 이루어진다.","position":{"start":{"line":25,"column":1,"offset":1248},"end":{"line":25,"column":29,"offset":1276}}}],"position":{"start":{"line":25,"column":1,"offset":1248},"end":{"line":25,"column":29,"offset":1276}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"프로세스의 상태가 wait system call 이나 I/O 요청에 의해 running 에서 waiting 으로 변경된 경우.","position":{"start":{"line":27,"column":4,"offset":1281},"end":{"line":27,"column":74,"offset":1351}}}],"position":{"start":{"line":27,"column":1,"offset":1278},"end":{"line":27,"column":74,"offset":1351}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"프로세스의 상태가 interrupt 등에 의해 running 에서 ready 로 변경된 경우.","position":{"start":{"line":28,"column":4,"offset":1355},"end":{"line":28,"column":56,"offset":1407}}}],"position":{"start":{"line":28,"column":1,"offset":1352},"end":{"line":28,"column":56,"offset":1407}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"프로세스의 상태가 I/O 처리가 끝나서 waiting 에서 ready 로 변경된 경우.","position":{"start":{"line":29,"column":4,"offset":1411},"end":{"line":29,"column":52,"offset":1459}}}],"position":{"start":{"line":29,"column":1,"offset":1408},"end":{"line":29,"column":52,"offset":1459}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"프로세스가 종료된 경우.","position":{"start":{"line":30,"column":4,"offset":1463},"end":{"line":30,"column":17,"offset":1476}}}],"position":{"start":{"line":30,"column":1,"offset":1460},"end":{"line":30,"column":17,"offset":1476}}},{"type":"text","value":"\n"}],"position":{"start":{"line":27,"column":1,"offset":1278},"end":{"line":30,"column":17,"offset":1476}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"nonpreemptive-scheduling","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#nonpreemptive-scheduling","aria-label":"nonpreemptive scheduling permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Nonpreemptive Scheduling","position":{"start":{"line":32,"column":5,"offset":1482},"end":{"line":32,"column":29,"offset":1506}}}],"position":{"start":{"line":32,"column":1,"offset":1478},"end":{"line":32,"column":29,"offset":1506}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"비선점형 스케줄링 이라고도 하는 Nonpreemptive scheduling 은 1, 4번 상황에서만 스케줄링을 하는 스케줄링 방법이다. 한번 CPU에 할당된 프로세스는 해당 프로세스가 종료되거나 waiting 상태가 되어 스스로 ready queue 로 돌아가지 않는 이상 CPU에서 계속 유지된다.","position":{"start":{"line":34,"column":1,"offset":1508},"end":{"line":34,"column":169,"offset":1676}}}],"position":{"start":{"line":34,"column":1,"offset":1508},"end":{"line":34,"column":169,"offset":1676}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"preemptive-scheduling","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#preemptive-scheduling","aria-label":"preemptive scheduling permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Preemptive Scheduling","position":{"start":{"line":36,"column":5,"offset":1682},"end":{"line":36,"column":26,"offset":1703}}}],"position":{"start":{"line":36,"column":1,"offset":1678},"end":{"line":36,"column":26,"offset":1703}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"선점형 스케줄링 이라고도 하는 Preemptive scheduling 은 1번부터 4번까지의 모든 상황에서 스케줄링을 진행하는 방법이다. CPU에 할당된 프로세스가 스스로 해제되지 않는다고 하더라도 스케줄러가 강제가 현재 프로세스를 CPU에서 해제하고 새로운 프로세스를 할당할 수 있다. 대부분의 운영체제들이 이 방법을 채택하여 사용하고 있다.","position":{"start":{"line":38,"column":1,"offset":1705},"end":{"line":38,"column":193,"offset":1897}}}],"position":{"start":{"line":38,"column":1,"offset":1705},"end":{"line":38,"column":193,"offset":1897}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"dispatcher","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#dispatcher","aria-label":"dispatcher permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Dispatcher","position":{"start":{"line":40,"column":4,"offset":1902},"end":{"line":40,"column":14,"offset":1912}}}],"position":{"start":{"line":40,"column":1,"offset":1899},"end":{"line":40,"column":14,"offset":1912}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Dispatcher 는 CPU 스케줄러에 의해 선택된 프로세스에게 CPU의 제어를 전해주는 기능을 하는 모듈이이다. 디스패처를 통해 context switching, user mode로의 전환, PCB로부터 이전에 중단한 위치를 복구하는 것이 관리된다. 디스패처는 context switching 이 발생할 때 항상 호출된다. 이미 우리가 알고있는 것처럼 context switching 은 교환될 두 PCB에 데이터를 저장하고 불러오는 pure overhead 를 가지고 있다. 따라서 디스패처는 가능한 최고 속도로 수행될 필요가 있다. 이때 디스패처가 시작되고 끝나는데까지 발생하는 시간을 dispath latency 라고 한다.","position":{"start":{"line":42,"column":1,"offset":1914},"end":{"line":42,"column":355,"offset":2268}}}],"position":{"start":{"line":42,"column":1,"offset":1914},"end":{"line":42,"column":355,"offset":2268}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{"id":"scheduling-criteria","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#scheduling-criteria","aria-label":"scheduling criteria permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Scheduling Criteria","position":{"start":{"line":44,"column":3,"offset":2272},"end":{"line":44,"column":22,"offset":2291}}}],"position":{"start":{"line":44,"column":1,"offset":2270},"end":{"line":44,"column":22,"offset":2291}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"여러 CPU Scheduling 알고리즘을 비교하기 위해서 필요한 기준들이 있다.","position":{"start":{"line":46,"column":1,"offset":2293},"end":{"line":46,"column":46,"offset":2338}}}],"position":{"start":{"line":46,"column":1,"offset":2293},"end":{"line":46,"column":46,"offset":2338}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"CPU Utilization (CPU 이용률): CPU를 사용하는 정도를 말한다. CPU 스케줄링의 목적은 결국 CPU를 최대한으로 사용할 수 있도록 프로세스를 분배하는 것이다.","position":{"start":{"line":48,"column":4,"offset":2343},"end":{"line":48,"column":103,"offset":2442}}}],"position":{"start":{"line":48,"column":1,"offset":2340},"end":{"line":49,"column":1,"offset":2443}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Throughput (처리량): 단위 시간 당 CPU가 완료하는 프로세스의 수를 말한다.","position":{"start":{"line":50,"column":4,"offset":2447},"end":{"line":50,"column":53,"offset":2496}}}],"position":{"start":{"line":50,"column":1,"offset":2444},"end":{"line":51,"column":1,"offset":2497}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Turnaround Time (총처리 시간): 특정한 프로세스가 실행하고 종료되는데까지 소요되는 시간을 말한다. 총 처리시간은 프로세스가 제출되고 완료되기까지의 시간을 말하기 때문에, ready queue 에서 머무른 시간, 실제로 실행된 시간, I/O 를 위해 대기한 시간까지 모두 포함한다.","position":{"start":{"line":52,"column":4,"offset":2501},"end":{"line":52,"column":168,"offset":2665}}}],"position":{"start":{"line":52,"column":1,"offset":2498},"end":{"line":53,"column":1,"offset":2666}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Waiting Time (대기 시간): 대기 시간은 프로세스가 종료되기까지 ready queue 에서 대기한 시간의 총합을 말한다.","position":{"start":{"line":54,"column":4,"offset":2670},"end":{"line":54,"column":77,"offset":2743}}}],"position":{"start":{"line":54,"column":1,"offset":2667},"end":{"line":55,"column":1,"offset":2744}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Response Time (응답 시간): 응답시간은 프로세스에게 어떤 결과를 요청하고 응답을 받기까지 걸리는 시간을 말한다. 유의할 점은 응답시간은 요청 이후에 응답을 시작하기 까지 걸리는 시간을 말하기 때문에 화면에 출력하는데 걸리는 시간은 포함하지 않는다.","position":{"start":{"line":56,"column":4,"offset":2748},"end":{"line":56,"column":149,"offset":2893}}}],"position":{"start":{"line":56,"column":1,"offset":2745},"end":{"line":56,"column":149,"offset":2893}}},{"type":"text","value":"\n"}],"position":{"start":{"line":48,"column":1,"offset":2340},"end":{"line":56,"column":149,"offset":2893}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{"id":"scheduling-algorithm","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#scheduling-algorithm","aria-label":"scheduling algorithm permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Scheduling Algorithm","position":{"start":{"line":58,"column":3,"offset":2897},"end":{"line":58,"column":23,"offset":2917}}}],"position":{"start":{"line":58,"column":1,"offset":2895},"end":{"line":58,"column":23,"offset":2917}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"first-come-first-served-fcfs","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#first-come-first-served-fcfs","aria-label":"first come first served fcfs permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"First-Come, First Served (FCFS)","position":{"start":{"line":60,"column":4,"offset":2922},"end":{"line":60,"column":35,"offset":2953}}}],"position":{"start":{"line":60,"column":1,"offset":2919},"end":{"line":60,"column":35,"offset":2953}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"이 알고리즘은 단순하게 가장 먼저 ready queue 에 도착한 프로세스가 가장 먼저 CPU에 할당되도록 하는 알고리즘이다. 큐를 통해 구현되고 ready queue 에 새로운 프로세스의 PCB가 들어올 때마다 PCB를 앞에 있는 PCB를 가르키도록 링크 해준다.","position":{"start":{"line":62,"column":1,"offset":2955},"end":{"line":62,"column":149,"offset":3103}}}],"position":{"start":{"line":62,"column":1,"offset":2955},"end":{"line":62,"column":149,"offset":3103}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"이 알고리즘은 구현하기가 쉽고 내부 동작을 이해하기 쉽지만, 프로세스들의 평균 waiting time 이 길어질 수 있다는 단점이 된다. 만약 burst 시간이 긴 프로세스가 먼저 ready queue에 들어오고 상대적으로 시간이 짧은 프로세스가 다음에 들어온다면, 뒤에 들어온 프로세스는 빨리 끝날 수 있는 작업임에도 불구하고 먼저 들어온 프로세스가 모두 종료되기 까지 기다려야 하게 된다. 이렇게 모든 프로세스가 현재 실행중인 프로세스가 끝날때까지 기다리고 있는 현상을 convoy effect 라고 한다.","position":{"start":{"line":64,"column":1,"offset":3105},"end":{"line":64,"column":286,"offset":3390}}}],"position":{"start":{"line":64,"column":1,"offset":3105},"end":{"line":64,"column":286,"offset":3390}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"FCFS 스케줄링은 nonpreemptive 스케줄링이다. 따라서 한번 CPU에 할당된 프로세스는 스스로 해제되기전까지 계속 CPU를 차지하고 있게 된다. 따라서 Interactive system 에서는 불리하게 작용할 것이다.","position":{"start":{"line":66,"column":1,"offset":3392},"end":{"line":66,"column":128,"offset":3519}}}],"position":{"start":{"line":66,"column":1,"offset":3392},"end":{"line":66,"column":128,"offset":3519}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"shortest-job-first-sjf","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#shortest-job-first-sjf","aria-label":"shortest job first sjf permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Shortest-Job First (SJF)","position":{"start":{"line":68,"column":4,"offset":3524},"end":{"line":68,"column":28,"offset":3548}}}],"position":{"start":{"line":68,"column":1,"offset":3521},"end":{"line":68,"column":28,"offset":3548}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"SFJ 알고리즘을 통한 스케줄링은 주어진 프로세스들 중에서 burst 시간이 가장 짧은 프로세스를 우선적으로 선택하는 알고리즘이다. FCFS에서 발생했던 문제가 상대적으로 burst 시간이 긴 프로세스가 실행중일 때, 다른 프로세스들의 waiting time이 비효율적으로 증가하는 문제가 있었는데, 가장 빨리 끝나는 프로세스를 맨 앞에 넣으면 그런 문제가 사라진다. 따라서 평균 waiting time이 크게 줄어들게 된다.","position":{"start":{"line":70,"column":1,"offset":3550},"end":{"line":70,"column":239,"offset":3788}}}],"position":{"start":{"line":70,"column":1,"offset":3550},"end":{"line":70,"column":239,"offset":3788}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"SFJ 알고리즘은 스케줄링을 위한 최적의 알고리즘처럼 보인다. 알고리즘 내에서 다음에 올 프로세스의 burst 시간을 알 수 있는 방법이 없기 때문에 구현이 불가능하다. 따라서 이 알고리즘을 구현하기 위해서 다음에 올 CPU burst 가 바로 이전의 CPU burst 와 소요시간이 비슷할 것이라고 가정하고 다음 CPU burst 예측한다.","position":{"start":{"line":72,"column":1,"offset":3790},"end":{"line":72,"column":192,"offset":3981}}}],"position":{"start":{"line":72,"column":1,"offset":3790},"end":{"line":72,"column":192,"offset":3981}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"burst-time-prediction","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#burst-time-prediction","aria-label":"burst time prediction permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Burst Time Prediction","position":{"start":{"line":74,"column":5,"offset":3987},"end":{"line":74,"column":26,"offset":4008}}}],"position":{"start":{"line":74,"column":1,"offset":3983},"end":{"line":74,"column":26,"offset":4008}}},{"type":"text","value":"\n"},{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mi>α</mi><msub><mi>t</mi><mi>n</mi></msub><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>α</mi><mo stretchy=\"false\">)</mo><msub><mi>T</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_{n+1}=\\alpha t_n + (1- \\alpha)T_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>","position":{"start":{"line":76,"column":1,"offset":4010},"end":{"line":78,"column":3,"offset":4051}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"위 수식을 통해 다음번에 올 burst 시간을 예측한다. t","position":{"start":{"line":80,"column":1,"offset":4053},"end":{"line":80,"column":34,"offset":4086}}},{"type":"raw","value":"<sub>","position":{"start":{"line":80,"column":34,"offset":4086},"end":{"line":80,"column":39,"offset":4091}}},{"type":"text","value":"n","position":{"start":{"line":80,"column":39,"offset":4091},"end":{"line":80,"column":40,"offset":4092}}},{"type":"raw","value":"</sub>","position":{"start":{"line":80,"column":40,"offset":4092},"end":{"line":80,"column":46,"offset":4098}}},{"type":"text","value":" 은 째 burst 의 길이이고, T","position":{"start":{"line":80,"column":46,"offset":4098},"end":{"line":80,"column":66,"offset":4118}}},{"type":"raw","value":"<sub>","position":{"start":{"line":80,"column":66,"offset":4118},"end":{"line":80,"column":71,"offset":4123}}},{"type":"text","value":"n+1","position":{"start":{"line":80,"column":71,"offset":4123},"end":{"line":80,"column":74,"offset":4126}}},{"type":"raw","value":"</sub>","position":{"start":{"line":80,"column":74,"offset":4126},"end":{"line":80,"column":80,"offset":4132}}},{"type":"text","value":" 은 다음에 올 burst 의 예측 값이다. 알파 값은 최근 값과 이전 값의 가중치를 의미한다. 따라서 만약 알파가 0이라면, T","position":{"start":{"line":80,"column":80,"offset":4132},"end":{"line":80,"column":152,"offset":4204}}},{"type":"raw","value":"<sub>","position":{"start":{"line":80,"column":152,"offset":4204},"end":{"line":80,"column":157,"offset":4209}}},{"type":"text","value":"n+1","position":{"start":{"line":80,"column":157,"offset":4209},"end":{"line":80,"column":160,"offset":4212}}},{"type":"raw","value":"</sub>","position":{"start":{"line":80,"column":160,"offset":4212},"end":{"line":80,"column":166,"offset":4218}}},{"type":"text","value":" = T","position":{"start":{"line":80,"column":166,"offset":4218},"end":{"line":80,"column":170,"offset":4222}}},{"type":"raw","value":"<sub>","position":{"start":{"line":80,"column":170,"offset":4222},"end":{"line":80,"column":175,"offset":4227}}},{"type":"text","value":"n","position":{"start":{"line":80,"column":175,"offset":4227},"end":{"line":80,"column":176,"offset":4228}}},{"type":"raw","value":"</sub>","position":{"start":{"line":80,"column":176,"offset":4228},"end":{"line":80,"column":182,"offset":4234}}},{"type":"text","value":" 의 식이 만들어지기 때문에 최근 값들을 사용하지 않는 다는 것을 의미한다. 만약 알파가 1이라면, T","position":{"start":{"line":80,"column":182,"offset":4234},"end":{"line":80,"column":239,"offset":4291}}},{"type":"raw","value":"<sub>","position":{"start":{"line":80,"column":239,"offset":4291},"end":{"line":80,"column":244,"offset":4296}}},{"type":"text","value":"n+1","position":{"start":{"line":80,"column":244,"offset":4296},"end":{"line":80,"column":247,"offset":4299}}},{"type":"raw","value":"</sub>","position":{"start":{"line":80,"column":247,"offset":4299},"end":{"line":80,"column":253,"offset":4305}}},{"type":"text","value":" = t","position":{"start":{"line":80,"column":253,"offset":4305},"end":{"line":80,"column":257,"offset":4309}}},{"type":"raw","value":"<sub>","position":{"start":{"line":80,"column":257,"offset":4309},"end":{"line":80,"column":262,"offset":4314}}},{"type":"text","value":"n","position":{"start":{"line":80,"column":262,"offset":4314},"end":{"line":80,"column":263,"offset":4315}}},{"type":"raw","value":"</sub>","position":{"start":{"line":80,"column":263,"offset":4315},"end":{"line":80,"column":269,"offset":4321}}},{"type":"text","value":" 의 식이 만들어지기 때문에 가장 최근의 burst 정보만 예측에 사용하겠다는 것을 의미한다. 일반적으로는 알파값을 1/2 로 둔다.","position":{"start":{"line":80,"column":269,"offset":4321},"end":{"line":80,"column":343,"offset":4395}}}],"position":{"start":{"line":80,"column":1,"offset":4053},"end":{"line":80,"column":343,"offset":4395}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"shortest-remaining-time-first","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#shortest-remaining-time-first","aria-label":"shortest remaining time first permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Shortest Remaining Time First","position":{"start":{"line":82,"column":4,"offset":4400},"end":{"line":82,"column":33,"offset":4429}}}],"position":{"start":{"line":82,"column":1,"offset":4397},"end":{"line":82,"column":33,"offset":4429}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"SFJ에서 조금 변형된 형태읭 스케줄링 알고리즘이다. 이 알고리즘에서는 각 프로세스들의 burst 의 남은 시간을 계산하게 된다. 따라서 어떤 프로세스가 실행되는 중에 남은 burst 시간보다 짧은 시간을 가진 프로세스가 등장하면 해당 프로세스를 CPU에 할당해주게 된다.","position":{"start":{"line":84,"column":1,"offset":4431},"end":{"line":84,"column":153,"offset":4583}}}],"position":{"start":{"line":84,"column":1,"offset":4431},"end":{"line":84,"column":153,"offset":4583}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"round-robin-scheduling-rr","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#round-robin-scheduling-rr","aria-label":"round robin scheduling rr permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Round-Robin Scheduling (RR)","position":{"start":{"line":86,"column":4,"offset":4588},"end":{"line":86,"column":31,"offset":4615}}}],"position":{"start":{"line":86,"column":1,"offset":4585},"end":{"line":86,"column":31,"offset":4615}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"라운드 로빈 스케줄링 알고리즘은 time quantum 이라는 타임스탬프를 사용하는 알고리즘이다. time quantum 이 정해지면 모든 프로세스는 ready queue에 준비된 순서대로 CPU에 할당되면서 정확히 time quantum 만큼만 burst 하고 다음 프로세스와 교체된다. 할당된 프로세스의 burst 시간이 time quantum 보다 작다면, 프로세스를 종료하고 곧바로 다음 프로세스를 동일한 time quantum을 가지고 실행하게 된다.","position":{"start":{"line":88,"column":1,"offset":4617},"end":{"line":88,"column":258,"offset":4874}}}],"position":{"start":{"line":88,"column":1,"offset":4617},"end":{"line":88,"column":258,"offset":4874}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"프로세스가 정확히 time quantum 만큼만 수행되고 강제적으로 교체되기 때문에 preemptive scheduling 이라고 할 수 있다. 라운드 로빈 알고리즘의 평균 대기시간이 다른 알고리즘보다 길 때도 있지만, 라운드 로빈은 준비된 모든 프로세스를 빠르게 돌아가면서 스케줄링하게 되기 때문에 interactive 한 시스템에서는 효과적이다.","position":{"start":{"line":90,"column":1,"offset":4876},"end":{"line":90,"column":196,"offset":5071}}}],"position":{"start":{"line":90,"column":1,"offset":4876},"end":{"line":90,"column":196,"offset":5071}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"하지만 라운드 로빈 스케줄링은 time quantum 에 큰 영향을 받는다. 프로세스의 burst time에 비해 time quantum이 터무니 없이 크다면, 라운드 로빈은 FCFS 알고리즘과 다를 것이 없어진다. 모든 프로세스가 time quantum 안으로 끝나기 때문이다. 또, time quantum이 너무 짧게 되면 그만큼 context switching 의 횟수가 증가하기 때문에 overhead 가 늘어나게 된다.","position":{"start":{"line":92,"column":1,"offset":5073},"end":{"line":92,"column":240,"offset":5312}}}],"position":{"start":{"line":92,"column":1,"offset":5073},"end":{"line":92,"column":240,"offset":5312}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"priority-scheduling","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#priority-scheduling","aria-label":"priority scheduling permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Priority Scheduling","position":{"start":{"line":94,"column":4,"offset":5317},"end":{"line":94,"column":23,"offset":5336}}}],"position":{"start":{"line":94,"column":1,"offset":5314},"end":{"line":94,"column":23,"offset":5336}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Priority scheduling 은 프로세스마다 우선순위를 두고 우선순위가 높은 프로세스를 우선적으로 할당하는 방법이다. 만약 우선순위가 같은 프로세스가 여럿 있다면 FCFS 방식을 적용하게 된다. 여기서 우선순위는 사용하는 리소스나 그 양 혹은 사용자에 요청 등 다양한 요소에 의해 정의될 수 있다.","position":{"start":{"line":96,"column":1,"offset":5338},"end":{"line":96,"column":171,"offset":5508}}}],"position":{"start":{"line":96,"column":1,"offset":5338},"end":{"line":96,"column":171,"offset":5508}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"이 방법을 구현할 때, preemptive 하게, nonpreemptvie 하게 모두 구현될 수 있다. 만약 preemptive 스케줄링으로 구현되었다면, 새로운 프로세스가 queue 에 들어왔을 때, 그 우선순위가 현재 실행중인 프로세스의 우선순위보다 높다면 곧바로 CPU로 디스패치될 것이다. Nonpreeptive 스케줄링에서는 새로운 프로세스가 queue 에 들어왔을 때 해당 프로세스의 우선순위가 현재 실행중인 프로세스의 우선순위보다 높다면, ready queue 에 가장 앞 자리로 위치하게 될 것이다.","position":{"start":{"line":98,"column":1,"offset":5510},"end":{"line":98,"column":288,"offset":5797}}}],"position":{"start":{"line":98,"column":1,"offset":5510},"end":{"line":98,"column":288,"offset":5797}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"indefinite-blocking-starvation","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#indefinite-blocking-starvation","aria-label":"indefinite blocking starvation permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Indefinite Blocking (Starvation)","position":{"start":{"line":100,"column":5,"offset":5803},"end":{"line":100,"column":37,"offset":5835}}}],"position":{"start":{"line":100,"column":1,"offset":5799},"end":{"line":100,"column":37,"offset":5835}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Priority Scheduling 에서 발생하는 문제가 있다. 우선순위에 의해 프로세스들이 할당되기 때문에 어떤 프로세스의 우선순위가 너무 낮은 경우에는 해당 프로세스가 ready queue 에서 절대 빠져나오지 못하고 계속 다른 프로세스에 순서를 뻬았기는 현상이 발생한다. 이런 문제를 indefinite blocking, 혹은 starvation 이라고 한다.","position":{"start":{"line":102,"column":1,"offset":5837},"end":{"line":102,"column":205,"offset":6041}}}],"position":{"start":{"line":102,"column":1,"offset":5837},"end":{"line":102,"column":205,"offset":6041}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{"id":"aging","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#aging","aria-label":"aging permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"aging","position":{"start":{"line":104,"column":6,"offset":6048},"end":{"line":104,"column":11,"offset":6053}}}],"position":{"start":{"line":104,"column":1,"offset":6043},"end":{"line":104,"column":11,"offset":6053}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Indefinite blocking 문제를 해결하기 위한 방법으로 각 프로세스마다 aging 이라는 개념을 도입할 수 있다. 각 프로세스는 ready queue 에 들어온 이후에 주기적으로 우선순위가 조금씩 증가된다. 이렇게 하면 낮은 우선순위를 가진 프로세스도 시간이 지남에 따라 높은 우선순위를 가지게 되어 CPU에 할당될 수 있게 된다.","position":{"start":{"line":106,"column":1,"offset":6055},"end":{"line":106,"column":192,"offset":6246}}}],"position":{"start":{"line":106,"column":1,"offset":6055},"end":{"line":106,"column":192,"offset":6246}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{"id":"mix-with-rr","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#mix-with-rr","aria-label":"mix with rr permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Mix with RR","position":{"start":{"line":108,"column":6,"offset":6253},"end":{"line":108,"column":17,"offset":6264}}}],"position":{"start":{"line":108,"column":1,"offset":6248},"end":{"line":108,"column":17,"offset":6264}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"또 다른 해결 방법으로는 Round Robind 스케줄링을 함께 적용하는 것이다. 라운드 로빈 스케줄링을 적용하게 되면 같은 우선 순위를 가진 프로세스들이 라운드 로빈에 의해 빠르게 진행되면서 우선순위가 낮은 프로세스까지 실행시킬 수 있게 된다.","position":{"start":{"line":110,"column":1,"offset":6266},"end":{"line":110,"column":138,"offset":6403}}}],"position":{"start":{"line":110,"column":1,"offset":6266},"end":{"line":110,"column":138,"offset":6403}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"multilevel-queue-scheduling","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#multilevel-queue-scheduling","aria-label":"multilevel queue scheduling permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Multilevel Queue Scheduling","position":{"start":{"line":112,"column":4,"offset":6408},"end":{"line":112,"column":31,"offset":6435}}}],"position":{"start":{"line":112,"column":1,"offset":6405},"end":{"line":112,"column":31,"offset":6435}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"지금까지 정리한 방법들은 모두 프로세스를 단일한 ready queue 에서 관리한다. Multilevel queue scheduling 은 우선순위마다 각각의 ready queue 를 만들어서 스케줄링을 하는 방법이다.","position":{"start":{"line":114,"column":1,"offset":6437},"end":{"line":114,"column":123,"offset":6559}}}],"position":{"start":{"line":114,"column":1,"offset":6437},"end":{"line":114,"column":123,"offset":6559}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"우선 순위가 낮은 큐에 있는 프로세스들은 상위 우선순위의 큐가 비워질 때까지는 실행되지 않는다. 일반적으로 각 큐는 RR에 의해 스케줄링된다.","position":{"start":{"line":116,"column":1,"offset":6561},"end":{"line":116,"column":80,"offset":6640}}}],"position":{"start":{"line":116,"column":1,"offset":6561},"end":{"line":116,"column":80,"offset":6640}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"어떤 경우에서는 프로세스에 유형에 따라 Multilevel을 만들어서 스케줄링을 관리하기도 한다. 응답시간이 얼마나 요구되냐에 따라서 foreground process 와 background process 로 나누어서 큐를 구성하기도 한다.","position":{"start":{"line":118,"column":1,"offset":6642},"end":{"line":118,"column":135,"offset":6776}}}],"position":{"start":{"line":118,"column":1,"offset":6642},"end":{"line":118,"column":135,"offset":6776}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"각 우선순위가 가지는 queue 의 스케줄링도 적절히 관리되어야 하는데, 위에서 설명한 것처럼 우선순위가 더 높은 단계의 큐가 완전히 비워질 때까지 우선순위가 낮은 큐는 스케줄링을 진행하지 않게 할 수도 있고, CPU의 시간을 나누어서 각 레벨이 각각 비율에 맞게 스케줄 되도록 할 수도 있다.","position":{"start":{"line":120,"column":1,"offset":6778},"end":{"line":120,"column":165,"offset":6942}}}],"position":{"start":{"line":120,"column":1,"offset":6778},"end":{"line":120,"column":165,"offset":6942}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"multilevel-feedback-queue-scheduling","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#multilevel-feedback-queue-scheduling","aria-label":"multilevel feedback queue scheduling permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Multilevel Feedback Queue Scheduling","position":{"start":{"line":122,"column":4,"offset":6947},"end":{"line":122,"column":40,"offset":6983}}}],"position":{"start":{"line":122,"column":1,"offset":6944},"end":{"line":122,"column":40,"offset":6983}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Multilevel feedback queue scheduling 은 multilevel queue scheduling 을 조금 더 강화한 형태이다. 다른 스케줄링 알고리즘은 프로세스들이 각 단계별 큐에 진입했을 때, 큐와 큐 사이의 이동을 허용하지 않지만, 다단계 피드백 큐 스케줄링에서는 프로세스를 한 큐에서 다른 큐로 이동시킬 수 있다. 낮은 우선순위의 큐에서 프로세스가 너무 오랫동안 대기하고 있는 상태라면 윗 우선순위 큐로 올릴 수도 있다.","position":{"start":{"line":124,"column":1,"offset":6985},"end":{"line":124,"column":252,"offset":7236}}}],"position":{"start":{"line":124,"column":1,"offset":6985},"end":{"line":124,"column":252,"offset":7236}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"만약 각 단계의 큐마다 time quantum 을 두고 프로세스를 넣을 때, 이 프로세스가 최상층 큐의 time quantum 안으로 끝나지 않는다면 다음 큐로 이동시키는 방식으로 진행된다.","position":{"start":{"line":126,"column":1,"offset":7238},"end":{"line":126,"column":107,"offset":7344}}}],"position":{"start":{"line":126,"column":1,"offset":7238},"end":{"line":126,"column":107,"offset":7344}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"다단계 피드백 큐 스케줄링은 효과적이지만 그만큼 고려해야할 요소들이 많다. 일반적으로 이 스케줄링은 다음과 같은 매개변수들에 의해 결정된다.","position":{"start":{"line":128,"column":1,"offset":7346},"end":{"line":128,"column":79,"offset":7424}}}],"position":{"start":{"line":128,"column":1,"offset":7346},"end":{"line":128,"column":79,"offset":7424}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"큐의 개수","position":{"start":{"line":130,"column":4,"offset":7429},"end":{"line":130,"column":9,"offset":7434}}}],"position":{"start":{"line":130,"column":1,"offset":7426},"end":{"line":130,"column":9,"offset":7434}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"큐들 사이에 적용할 스케줄링 알고리즘","position":{"start":{"line":131,"column":4,"offset":7438},"end":{"line":131,"column":24,"offset":7458}}}],"position":{"start":{"line":131,"column":1,"offset":7435},"end":{"line":131,"column":24,"offset":7458}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"프로세스의 우선순위를 올려주는 기준","position":{"start":{"line":132,"column":4,"offset":7462},"end":{"line":132,"column":23,"offset":7481}}}],"position":{"start":{"line":132,"column":1,"offset":7459},"end":{"line":132,"column":23,"offset":7481}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"프로세스의 우선순위를 낮추는 기준","position":{"start":{"line":133,"column":4,"offset":7485},"end":{"line":133,"column":22,"offset":7503}}}],"position":{"start":{"line":133,"column":1,"offset":7482},"end":{"line":133,"column":22,"offset":7503}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"새로운 프로세스가 들어갈 큐를 결정할 기준","position":{"start":{"line":134,"column":4,"offset":7507},"end":{"line":134,"column":27,"offset":7530}}}],"position":{"start":{"line":134,"column":1,"offset":7504},"end":{"line":134,"column":27,"offset":7530}}},{"type":"text","value":"\n"}],"position":{"start":{"line":130,"column":1,"offset":7426},"end":{"line":134,"column":27,"offset":7530}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":135,"column":1,"offset":7531}}}}