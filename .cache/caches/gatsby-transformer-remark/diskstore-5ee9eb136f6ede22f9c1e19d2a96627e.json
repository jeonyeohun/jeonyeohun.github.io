{"expireTime":9007200877354308000,"key":"transformer-remark-markdown-html-ast-42d784ce77793b07f794afe727e32056-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"참고도서: ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":7,"offset":7}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Operating System Concepts (10/E) Abraham Silberschatz, Peter B. Galvin, Greg Gagne","position":{"start":{"line":2,"column":8,"offset":8},"end":{"line":2,"column":90,"offset":90}}}],"position":{"start":{"line":2,"column":7,"offset":7},"end":{"line":2,"column":91,"offset":91}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":91,"offset":91}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"교착상태deadlock","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9Cdeadlock","aria-label":"교착상태deadlock permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"교착상태(Deadlock)","position":{"start":{"line":4,"column":4,"offset":96},"end":{"line":4,"column":18,"offset":110}}}],"position":{"start":{"line":4,"column":1,"offset":93},"end":{"line":4,"column":18,"offset":110}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"흔히 데드락이라고 우리가 부르는 교착상태는 프로세스나 스레드가 서로가 서로의 자원을 얻길 원하면서 무한정하게 대기하는 상태를 가르킨다. 이전에 세마포어를 공부하면서 경험했던 것 처럼, 두 프로세스가 signal 을 절대로 실행하지 못하는 상황에서 wait 을 하고 있는 상태이다. 데드락 문제는 컴파일 레벨에서는 오류를 잡아내지 않기 때문에 무심코 넘어가는 경우가 많고, 런타임에러로 이런 문제가 발생했을 때 여러사람이 고생(?)하게 된다.","position":{"start":{"line":6,"column":1,"offset":112},"end":{"line":6,"column":247,"offset":358}}}],"position":{"start":{"line":6,"column":1,"offset":112},"end":{"line":6,"column":247,"offset":358}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"교착상태의-발생조건necessary-conditions-of-deadlock","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C%EC%9D%98-%EB%B0%9C%EC%83%9D%EC%A1%B0%EA%B1%B4necessary-conditions-of-deadlock","aria-label":"교착상태의 발생조건necessary conditions of deadlock permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"교착상태의 발생조건(Necessary Conditions of Deadlock)","position":{"start":{"line":8,"column":4,"offset":363},"end":{"line":8,"column":48,"offset":407}}}],"position":{"start":{"line":8,"column":1,"offset":360},"end":{"line":8,"column":48,"offset":407}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"1-상호배제mutual-exclusion","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#1-%EC%83%81%ED%98%B8%EB%B0%B0%EC%A0%9Cmutual-exclusion","aria-label":"1 상호배제mutual exclusion permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"1. 상호배제(Mutual Exclusion)","position":{"start":{"line":10,"column":5,"offset":413},"end":{"line":10,"column":30,"offset":438}}}],"position":{"start":{"line":10,"column":1,"offset":409},"end":{"line":10,"column":30,"offset":438}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"교착상태가 일어날 때는 어떤 자원을 동시에 여러 프로세스가 점유해서 사용하는 것이 아니라 한번에 하나의 프로세스만 점유해서 자원을 사용하게 된다. 교착상태가 일어나는 이유는 프로세스가 자원을 독점하고 있는 상황에서 그것을 놔주지 않고 계속 다른 프로세스를 기다리고 있기 때문이기 때문에 동시에 여러 프로세스가 자원을 점유할 수 있다면, 교착상태는 발생하지 않을 것이다.","position":{"start":{"line":12,"column":1,"offset":440},"end":{"line":12,"column":207,"offset":646}}}],"position":{"start":{"line":12,"column":1,"offset":440},"end":{"line":12,"column":207,"offset":646}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"2-점유와-대기hold-and-wait","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#2-%EC%A0%90%EC%9C%A0%EC%99%80-%EB%8C%80%EA%B8%B0hold-and-wait","aria-label":"2 점유와 대기hold and wait permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"2. 점유와 대기(Hold and Wait)","position":{"start":{"line":14,"column":5,"offset":652},"end":{"line":14,"column":29,"offset":676}}}],"position":{"start":{"line":14,"column":1,"offset":648},"end":{"line":14,"column":29,"offset":676}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"교착상태가 일어날 때는 프로세스가 어떤 자원을 점유하고 있는 상태에서 또 다른 자원을 점유하고자 한다. 프로세스가 자원을 가지고 있는 상태에서 다른 자원을 wait 하게되기 때문에, wait 하는 동안 해당 프로세스에게 점유된 자원은 1번 조건(상호배제)에 의해 다른 자원들이 점유할 수 없게된다. 이 상황이 여러 프로세스에게 서로 일어났을 때, 교착상태가 발생한다.","position":{"start":{"line":16,"column":1,"offset":678},"end":{"line":16,"column":206,"offset":883}}}],"position":{"start":{"line":16,"column":1,"offset":678},"end":{"line":16,"column":206,"offset":883}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"식사하는 철학자 문제를 생각해보자, 모든 철학자가 왼쪽에 있는 젓가락(Hold)을 집은 상태에서 오른쪽 젓가락을 집어들려고 하면(Wait) 교착상태가 발생한다.","position":{"start":{"line":18,"column":1,"offset":885},"end":{"line":18,"column":90,"offset":974}}}],"position":{"start":{"line":18,"column":1,"offset":885},"end":{"line":18,"column":90,"offset":974}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"3-비전섬no-preemption","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#3-%EB%B9%84%EC%A0%84%EC%84%ACno-preemption","aria-label":"3 비전섬no preemption permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"3. 비전섬(No Preemption)","position":{"start":{"line":20,"column":5,"offset":980},"end":{"line":20,"column":26,"offset":1001}}}],"position":{"start":{"line":20,"column":1,"offset":976},"end":{"line":20,"column":26,"offset":1001}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"프로세스에 한번 점유된 자원은 프로세스가 스스로 자원을 해제할 때까지 선점되지 못한다. 다시 식사하는 철학자 문제를 생각해보자. 모든 철학자들이 왼손에 젓가락을 들고 교착상태에 빠져있을 때, 선점(Preemption)이 가능하다면, 그냥 강제로 철학자 한명의 젓가락을 내려놓게 하고 다른 철학자에게 주면 교착상태는 바로 해결된다. 따라서 교착상태가 발생하기 위해서는 자원의 선점이 일어나지 않는다.","position":{"start":{"line":22,"column":1,"offset":1003},"end":{"line":22,"column":223,"offset":1225}}}],"position":{"start":{"line":22,"column":1,"offset":1003},"end":{"line":22,"column":223,"offset":1225}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"4-환형대기circular-wait","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#4-%ED%99%98%ED%98%95%EB%8C%80%EA%B8%B0circular-wait","aria-label":"4 환형대기circular wait permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"4. 환형대기(Circular Wait)","position":{"start":{"line":24,"column":5,"offset":1231},"end":{"line":24,"column":27,"offset":1253}}}],"position":{"start":{"line":24,"column":1,"offset":1227},"end":{"line":24,"column":27,"offset":1253}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"교착상태는 프로세스가 서로에게 자원을 요구할 때 발생한다. 다수의 프로세스가 교착상태에 빠질때는 프로세스들의 자원 요구관계에 사이클이 생긴다. 식사하는 철학자 문제의 해결안으로 제시된 방법 중 하나인 짝수번째 철학자와 홀수번째 철학자가 서로 다른 쪽 젓가락을 들게하는 것인데, 환형 대기를 깨뜨려서 교착상태를 방지하는 접근인 것이다.","position":{"start":{"line":26,"column":1,"offset":1255},"end":{"line":26,"column":187,"offset":1441}}}],"position":{"start":{"line":26,"column":1,"offset":1255},"end":{"line":26,"column":187,"offset":1441}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":27,"column":1,"offset":1442}}}}