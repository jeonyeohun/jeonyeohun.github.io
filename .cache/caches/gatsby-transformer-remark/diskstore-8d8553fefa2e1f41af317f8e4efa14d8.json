{"expireTime":9007200877354939000,"key":"transformer-remark-markdown-html-ast-6144b4bac69c0ecaf16d65f7ae7756a5-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"참고도서: ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":7,"offset":7}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Operating System Concepts (10/E) Abraham Silberschatz, Peter B. Galvin, Greg Gagne","position":{"start":{"line":2,"column":8,"offset":8},"end":{"line":2,"column":90,"offset":90}}}],"position":{"start":{"line":2,"column":7,"offset":7},"end":{"line":2,"column":91,"offset":91}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":91,"offset":91}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"세마포어(Semaphore)는 여러 프로세스(혹은 스레드)가 공유자원을 사용할 때 생기는 임계구역 문제를 해결하기 위한 방법 중 하나이다. 앞서서 가장 간단한 ","position":{"start":{"line":4,"column":1,"offset":93},"end":{"line":4,"column":90,"offset":182}}},{"type":"element","tagName":"a","properties":{"href":"https://jeonyeohun.github.io/articles/2020-05/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EB%AE%A4%ED%85%8D%EC%8A%A4"},"children":[{"type":"text","value":"Mutex Lock","position":{"start":{"line":4,"column":91,"offset":183},"end":{"line":4,"column":101,"offset":193}}}],"position":{"start":{"line":4,"column":90,"offset":182},"end":{"line":4,"column":214,"offset":306}}},{"type":"text","value":" 기법을 보았는데, 여기서 좀 더 나아가서 다수의 프로세스들을 임계구역에 접근시킬 수 있는 기법이다.","position":{"start":{"line":4,"column":214,"offset":306},"end":{"line":4,"column":270,"offset":362}}}],"position":{"start":{"line":4,"column":1,"offset":93},"end":{"line":4,"column":270,"offset":362}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"concept","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#concept","aria-label":"concept permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Concept","position":{"start":{"line":6,"column":4,"offset":367},"end":{"line":6,"column":11,"offset":374}}}],"position":{"start":{"line":6,"column":1,"offset":364},"end":{"line":6,"column":11,"offset":374}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"세마포어는 기본적으로 그냥 ","position":{"start":{"line":8,"column":1,"offset":376},"end":{"line":8,"column":16,"offset":391}}},{"type":"raw","value":"<code class=\"language-text\">정수</code>","position":{"start":{"line":8,"column":16,"offset":391},"end":{"line":8,"column":20,"offset":395}}},{"type":"text","value":"이다. 그리고 이 정수가 의미하는 것은 ","position":{"start":{"line":8,"column":20,"offset":395},"end":{"line":8,"column":42,"offset":417}}},{"type":"raw","value":"<code class=\"language-text\">임계구역에 접근이 가능한 프로세스의 개수</code>","position":{"start":{"line":8,"column":42,"offset":417},"end":{"line":8,"column":66,"offset":441}}},{"type":"text","value":" 이다. 만약 어떤 공용화장실이 있고, 해당 화잘실에는 N개의 칸이 있다고 했을때, 이 N개의 해당하는 것이 세마포인 것이다.","position":{"start":{"line":8,"column":66,"offset":441},"end":{"line":8,"column":136,"offset":511}}}],"position":{"start":{"line":8,"column":1,"offset":376},"end":{"line":8,"column":136,"offset":511}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"세마포어가 값을 어떻게 가지는지에 따라서 우리는 ","position":{"start":{"line":10,"column":1,"offset":513},"end":{"line":10,"column":28,"offset":540}}},{"type":"raw","value":"<code class=\"language-text\">Counting Semaphore</code>","position":{"start":{"line":10,"column":28,"offset":540},"end":{"line":10,"column":48,"offset":560}}},{"type":"text","value":" 와 ","position":{"start":{"line":10,"column":48,"offset":560},"end":{"line":10,"column":51,"offset":563}}},{"type":"raw","value":"<code class=\"language-text\">Binary Semaphore</code>","position":{"start":{"line":10,"column":51,"offset":563},"end":{"line":10,"column":69,"offset":581}}},{"type":"text","value":"로 구분하는데, Counting Semaphore 는 semaphore의 값이 2 이상인, 즉 한번에 접근 가능한 프로세스가 다수인 경우를 의미하고, Binary Semaphore는 한번에 접근 가능한 프로세스가 하나뿐인 경우를 의미한다.","position":{"start":{"line":10,"column":69,"offset":581},"end":{"line":10,"column":202,"offset":714}}}],"position":{"start":{"line":10,"column":1,"offset":513},"end":{"line":10,"column":202,"offset":714}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"signal---임계구역에-빈자리-생겼어","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#signal---%EC%9E%84%EA%B3%84%EA%B5%AC%EC%97%AD%EC%97%90-%EB%B9%88%EC%9E%90%EB%A6%AC-%EC%83%9D%EA%B2%BC%EC%96%B4","aria-label":"signal   임계구역에 빈자리 생겼어 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"signal() - 임계구역에 빈자리 생겼어!","position":{"start":{"line":12,"column":4,"offset":719},"end":{"line":12,"column":29,"offset":744}}}],"position":{"start":{"line":12,"column":1,"offset":716},"end":{"line":12,"column":29,"offset":744}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"뮤텍스와 마찬가지로 세마포어 역시 임계구역의 진입과 탈출을 기준으로 모든 프로세스들에게 임계구역의 상태를 알리게된다. Signal 연산은 공용변수인 Semaphore 값을 하나 늘린다. 작업이 끝났으니 빈자리가 하나 생겼음을 알리는 것이다. 자세한 구현은 뒤에서 알아보자.","position":{"start":{"line":14,"column":1,"offset":746},"end":{"line":14,"column":153,"offset":898}}}],"position":{"start":{"line":14,"column":1,"offset":746},"end":{"line":14,"column":153,"offset":898}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"wait---임계구역에-자리-없으면-기다릴게","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#wait---%EC%9E%84%EA%B3%84%EA%B5%AC%EC%97%AD%EC%97%90-%EC%9E%90%EB%A6%AC-%EC%97%86%EC%9C%BC%EB%A9%B4-%EA%B8%B0%EB%8B%A4%EB%A6%B4%EA%B2%8C","aria-label":"wait   임계구역에 자리 없으면 기다릴게 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"wait() - 임계구역에 자리 없으면 기다릴게!","position":{"start":{"line":16,"column":4,"offset":903},"end":{"line":16,"column":31,"offset":930}}}],"position":{"start":{"line":16,"column":1,"offset":900},"end":{"line":16,"column":31,"offset":930}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"wait 연산은 Semaphore 값을 하나 줄이는 작업을 한다. 만약 임계구역에 정해진 숫자만큼의 프로세스가 모두 들어가있다면 Semaphore의 값은 ","position":{"start":{"line":18,"column":1,"offset":932},"end":{"line":18,"column":87,"offset":1018}}},{"type":"raw","value":"<code class=\"language-text\">0</code>","position":{"start":{"line":18,"column":87,"offset":1018},"end":{"line":18,"column":90,"offset":1021}}},{"type":"text","value":" 이 될 것이다. 이때 임계구역 진입을 요구하는 프로세스가 나타나게 되면 값이 하나 더 줄어들어서 ","position":{"start":{"line":18,"column":90,"offset":1021},"end":{"line":18,"column":145,"offset":1076}}},{"type":"raw","value":"<code class=\"language-text\">-1</code>","position":{"start":{"line":18,"column":145,"offset":1076},"end":{"line":18,"column":149,"offset":1080}}},{"type":"text","value":" 이 될텐테 잘생각해보면 결국 음수 값은 몇개의 프로세스가 임계구역 진입을 위해 대기하고 있는지 표시하게된다.","position":{"start":{"line":18,"column":149,"offset":1080},"end":{"line":18,"column":210,"offset":1141}}}],"position":{"start":{"line":18,"column":1,"offset":932},"end":{"line":18,"column":210,"offset":1141}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"큐를-이용한-semaphore-구현","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%ED%81%90%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-semaphore-%EA%B5%AC%ED%98%84","aria-label":"큐를 이용한 semaphore 구현 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"큐를 이용한 Semaphore 구현","position":{"start":{"line":20,"column":4,"offset":1146},"end":{"line":20,"column":23,"offset":1165}}}],"position":{"start":{"line":20,"column":1,"offset":1143},"end":{"line":20,"column":23,"offset":1165}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"뮤텍스에서 문제가 되었던 부분은 aquire 연산이 수행되는 과정에서 생기는 ","position":{"start":{"line":22,"column":1,"offset":1167},"end":{"line":22,"column":44,"offset":1210}}},{"type":"raw","value":"<code class=\"language-text\">Busy Waiting</code>","position":{"start":{"line":22,"column":44,"offset":1210},"end":{"line":22,"column":58,"offset":1224}}},{"type":"text","value":" 이었다. 하지만 임계구역 진입을 위해서 프로세스가 대기를 하긴 해야하는데, 항상 ","position":{"start":{"line":22,"column":58,"offset":1224},"end":{"line":22,"column":104,"offset":1270}}},{"type":"raw","value":"<code class=\"language-text\">Busy Waiting</code>","position":{"start":{"line":22,"column":104,"offset":1270},"end":{"line":22,"column":118,"offset":1284}}},{"type":"text","value":" 을 사용해야할까? 세마포어 접근법에서는 임계구역의 진입을 대기하는 프로세스를 반복문으로 대기시키지 않고 별도의 대기 큐를 만들어서 관리한다.","position":{"start":{"line":22,"column":118,"offset":1284},"end":{"line":22,"column":197,"offset":1363}}}],"position":{"start":{"line":22,"column":1,"offset":1167},"end":{"line":22,"column":197,"offset":1363}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"semaphore-설계","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#semaphore-%EC%84%A4%EA%B3%84","aria-label":"semaphore 설계 permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Semaphore 설계","position":{"start":{"line":24,"column":4,"offset":1368},"end":{"line":24,"column":16,"offset":1380}}}],"position":{"start":{"line":24,"column":1,"offset":1365},"end":{"line":24,"column":16,"offset":1380}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> value <span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">process</span> <span class=\"token operator\">*</span>list <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>semaphore</code></pre></div>","position":{"start":{"line":26,"column":1,"offset":1382},"end":{"line":31,"column":4,"offset":1463}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"공룡책의 구현예시를 살펴보자. 세마포어 뿐만 아니라 대기 큐의 사용을 위해서 링크드 리스트를 세마포어의 구조체로 만들어둔다.","position":{"start":{"line":33,"column":1,"offset":1465},"end":{"line":33,"column":70,"offset":1534}}}],"position":{"start":{"line":33,"column":1,"offset":1465},"end":{"line":33,"column":70,"offset":1534}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"wait","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#wait","aria-label":"wait permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"wait","position":{"start":{"line":35,"column":5,"offset":1540},"end":{"line":35,"column":9,"offset":1544}}}],"position":{"start":{"line":35,"column":1,"offset":1536},"end":{"line":35,"column":9,"offset":1544}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>semaphore <span class=\"token operator\">*</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    S <span class=\"token operator\">-></span> value<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 세마포어 값 줄이기</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>S <span class=\"token operator\">-></span> value <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>     <span class=\"token comment\">// 위에서 하나 줄였으니까 값이 음수면 자리가 없는거</span>\n        add <span class=\"token keyword\">this</span> process to S <span class=\"token operator\">-></span> list<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 준비 큐에 집어넣기</span>\n        <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 프로세스 대기상태로 만들기</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":37,"column":1,"offset":1546},"end":{"line":45,"column":4,"offset":1785}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"wait 연산은 세마포어가 가진 값을 하나 줄인다. 이때 세마포어의 값이 음수가 된다면, 해당 프로세스가 임계구역으로 진입할 자리가 없다는 것을 의미한다. 따라서 이 프로세스를 세마포어의 큐에 넣고 ","position":{"start":{"line":47,"column":1,"offset":1787},"end":{"line":47,"column":112,"offset":1898}}},{"type":"raw","value":"<code class=\"language-text\">block()</code>","position":{"start":{"line":47,"column":112,"offset":1898},"end":{"line":47,"column":121,"offset":1907}}},{"type":"text","value":" 명령을 통해서 프로세스의 상태를 ","position":{"start":{"line":47,"column":121,"offset":1907},"end":{"line":47,"column":140,"offset":1926}}},{"type":"raw","value":"<code class=\"language-text\">대기(waiting)</code>","position":{"start":{"line":47,"column":140,"offset":1926},"end":{"line":47,"column":153,"offset":1939}}},{"type":"text","value":" 상태로 만든다. 이제 이 프로세스는 누군가가 자신의 상태를 ","position":{"start":{"line":47,"column":153,"offset":1939},"end":{"line":47,"column":187,"offset":1973}}},{"type":"raw","value":"<code class=\"language-text\">준비(ready)</code>","position":{"start":{"line":47,"column":187,"offset":1973},"end":{"line":47,"column":198,"offset":1984}}},{"type":"text","value":" 상태로 만들 때까지 리스트에서 대기한다.","position":{"start":{"line":47,"column":198,"offset":1984},"end":{"line":47,"column":221,"offset":2007}}}],"position":{"start":{"line":47,"column":1,"offset":1787},"end":{"line":47,"column":221,"offset":2007}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">wait()</code>","position":{"start":{"line":49,"column":1,"offset":2009},"end":{"line":49,"column":9,"offset":2017}}},{"type":"text","value":" 연산은 프로세스가 임계구역 진입을 요청하는 연산이기 때문에 임계구역의 앞에서 실행이되어야 할 것이다.","position":{"start":{"line":49,"column":9,"offset":2017},"end":{"line":49,"column":66,"offset":2074}}}],"position":{"start":{"line":49,"column":1,"offset":2009},"end":{"line":49,"column":66,"offset":2074}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"signal","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#signal","aria-label":"signal permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"signal","position":{"start":{"line":51,"column":5,"offset":2080},"end":{"line":51,"column":11,"offset":2086}}}],"position":{"start":{"line":51,"column":1,"offset":2076},"end":{"line":51,"column":11,"offset":2086}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>semaphore <span class=\"token operator\">*</span>S<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    S <span class=\"token operator\">-></span> value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 세마포어 값 올리기</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>S <span class=\"token operator\">-></span> value <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>    <span class=\"token comment\">// 음수이거나 0이면 대기중인 프로세스가 있다는 것</span>\n        remove a process P from S <span class=\"token operator\">-></span> list<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 대기 큐에서 꺼내서</span>\n        <span class=\"token function\">wakeup</span><span class=\"token punctuation\">(</span>P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 깨운다</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":53,"column":1,"offset":2088},"end":{"line":61,"column":4,"offset":2323}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"signal 연산은 세마포어가 가진 값을 하나 증가시킨다. 개인적으로 ","position":{"start":{"line":63,"column":1,"offset":2325},"end":{"line":63,"column":40,"offset":2364}}},{"type":"raw","value":"<code class=\"language-text\">value &lt;= 0</code>","position":{"start":{"line":63,"column":40,"offset":2364},"end":{"line":63,"column":52,"offset":2376}}},{"type":"text","value":" 이 부분이 이해가 잘 안되었는데, 하나의 프로세스가 끝나고 임계구역에 빈자리가 생겼음을 요청했을 때, 세마포어의 값이 음수이거나 0이라면 대기 큐에서 대기중인 프로세스가 있다는 것을 의미한다. 따라서 대기 큐에서 프로세스를 꺼내서 ","position":{"start":{"line":63,"column":52,"offset":2376},"end":{"line":63,"column":182,"offset":2506}}},{"type":"raw","value":"<code class=\"language-text\">wakeup()</code>","position":{"start":{"line":63,"column":182,"offset":2506},"end":{"line":63,"column":192,"offset":2516}}},{"type":"text","value":" 명령을 수행한다. 프로세스를 깨우게 되면 해당 프로세스의 상태는 ","position":{"start":{"line":63,"column":192,"offset":2516},"end":{"line":63,"column":229,"offset":2553}}},{"type":"raw","value":"<code class=\"language-text\">대기(waiting)</code>","position":{"start":{"line":63,"column":229,"offset":2553},"end":{"line":63,"column":242,"offset":2566}}},{"type":"text","value":" 에서 ","position":{"start":{"line":63,"column":242,"offset":2566},"end":{"line":63,"column":246,"offset":2570}}},{"type":"raw","value":"<code class=\"language-text\">준비(ready)</code>","position":{"start":{"line":63,"column":246,"offset":2570},"end":{"line":63,"column":257,"offset":2581}}},{"type":"text","value":"로 변경되고, 운영체제의 준비 큐로 이동해서 스케줄링을 기다리게 된다.","position":{"start":{"line":63,"column":257,"offset":2581},"end":{"line":63,"column":296,"offset":2620}}}],"position":{"start":{"line":63,"column":1,"offset":2325},"end":{"line":63,"column":296,"offset":2620}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">signal()</code>","position":{"start":{"line":65,"column":1,"offset":2622},"end":{"line":65,"column":11,"offset":2632}}},{"type":"text","value":" 연산은 프로세스가 임계구역을 빠져나오면서 대기중인 프로세스에게 임계구역 진입을 신호하는 것이기 때문에 임계구역 뒤에서 실행되어야 할 것이다.","position":{"start":{"line":65,"column":11,"offset":2632},"end":{"line":65,"column":90,"offset":2711}}}],"position":{"start":{"line":65,"column":1,"offset":2622},"end":{"line":65,"column":90,"offset":2711}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"atomic-operation","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#atomic-operation","aria-label":"atomic operation permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Atomic Operation","position":{"start":{"line":67,"column":4,"offset":2716},"end":{"line":67,"column":20,"offset":2732}}}],"position":{"start":{"line":67,"column":1,"offset":2713},"end":{"line":67,"column":20,"offset":2732}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"세마포어에서 가장 중요한 것은 ","position":{"start":{"line":69,"column":1,"offset":2734},"end":{"line":69,"column":18,"offset":2751}}},{"type":"raw","value":"<code class=\"language-text\">wait()</code>","position":{"start":{"line":69,"column":18,"offset":2751},"end":{"line":69,"column":26,"offset":2759}}},{"type":"text","value":" 과 ","position":{"start":{"line":69,"column":26,"offset":2759},"end":{"line":69,"column":29,"offset":2762}}},{"type":"raw","value":"<code class=\"language-text\">signal()</code>","position":{"start":{"line":69,"column":29,"offset":2762},"end":{"line":69,"column":39,"offset":2772}}},{"type":"text","value":" 연산이 ","position":{"start":{"line":69,"column":39,"offset":2772},"end":{"line":69,"column":44,"offset":2777}}},{"type":"raw","value":"<code class=\"language-text\">Atomic</code>","position":{"start":{"line":69,"column":44,"offset":2777},"end":{"line":69,"column":52,"offset":2785}}},{"type":"text","value":"한 연산이 되어야 한다는 것이다. ","position":{"start":{"line":69,"column":52,"offset":2785},"end":{"line":69,"column":71,"offset":2804}}},{"type":"raw","value":"<code class=\"language-text\">Atomic</code>","position":{"start":{"line":69,"column":71,"offset":2804},"end":{"line":69,"column":79,"offset":2812}}},{"type":"text","value":" 한 연산이라는 것은 이 연산이 쪼개어지지 않고 한번 실행되면 무조건 다른 명령의 간섭없이 종료까지 실행된다는 것이다.","position":{"start":{"line":69,"column":79,"offset":2812},"end":{"line":69,"column":145,"offset":2878}}}],"position":{"start":{"line":69,"column":1,"offset":2734},"end":{"line":69,"column":145,"offset":2878}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Atomic한 연산이 되어야하는 이유는 wait 의 value가 감소되고 있는 중에 context switch 가 발생하게되면, 세마포어를 사용하는 것에 아무의미가 없어지기 때문이다. 그런데 위에서 구현된 내용을 보면 ","position":{"start":{"line":71,"column":1,"offset":2880},"end":{"line":71,"column":123,"offset":3002}}},{"type":"raw","value":"<code class=\"language-text\">wait()</code>","position":{"start":{"line":71,"column":123,"offset":3002},"end":{"line":71,"column":131,"offset":3010}}},{"type":"text","value":" 과 ","position":{"start":{"line":71,"column":131,"offset":3010},"end":{"line":71,"column":134,"offset":3013}}},{"type":"raw","value":"<code class=\"language-text\">signal()</code>","position":{"start":{"line":71,"column":134,"offset":3013},"end":{"line":71,"column":144,"offset":3023}}},{"type":"text","value":" 은 atomic하지 않고 몇단계에 걸쳐서 연산을 수행한다.","position":{"start":{"line":71,"column":144,"offset":3023},"end":{"line":71,"column":177,"offset":3056}}}],"position":{"start":{"line":71,"column":1,"offset":2880},"end":{"line":71,"column":177,"offset":3056}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"따라서 우리는 이 연산들이 atomic한 성격을 가지도록 해야하는데, 만약 세마포어를 사용하는 시스템이 single CPU 시스템이라면 단순하게 interrupt 를 disable 하는 방식으로 context switch 의 발생을 막을 수 있다. 하지만 다수의 프로세스가 동시에 동작하는 ","position":{"start":{"line":73,"column":1,"offset":3058},"end":{"line":73,"column":163,"offset":3220}}},{"type":"raw","value":"<code class=\"language-text\">SMP(Symmetric Multi-Programming)</code>","position":{"start":{"line":73,"column":163,"offset":3220},"end":{"line":73,"column":197,"offset":3254}}},{"type":"text","value":" 시스템에서 context switch 를 중단시키는 것은 실행중인 다수의 프로세스에게 부정적인 영향으로 작용한다.","position":{"start":{"line":73,"column":197,"offset":3254},"end":{"line":73,"column":261,"offset":3318}}}],"position":{"start":{"line":73,"column":1,"offset":3058},"end":{"line":73,"column":261,"offset":3318}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"대안으로 ","position":{"start":{"line":75,"column":1,"offset":3320},"end":{"line":75,"column":6,"offset":3325}}},{"type":"raw","value":"<code class=\"language-text\">test-and-set</code>","position":{"start":{"line":75,"column":6,"offset":3325},"end":{"line":75,"column":20,"offset":3339}}},{"type":"text","value":" 이나 ","position":{"start":{"line":75,"column":20,"offset":3339},"end":{"line":75,"column":24,"offset":3343}}},{"type":"raw","value":"<code class=\"language-text\">compare-and-swap</code>","position":{"start":{"line":75,"column":24,"offset":3343},"end":{"line":75,"column":42,"offset":3361}}},{"type":"text","value":" 으로 세마포어의 연산의 앞뒤를 lock해주는 방법을 사용할 수 있다. 단점으로 지적되던 busy waiting 이 발생하긴 하겠지만, 프로세스를 대기시키기 위해 사용하지 않고 연산을 수행하는 동안에만 lock 하기 때문에 시스템에 큰 무리가 되지는 않을 것이다.","position":{"start":{"line":75,"column":42,"offset":3361},"end":{"line":75,"column":189,"offset":3508}}}],"position":{"start":{"line":75,"column":1,"offset":3320},"end":{"line":75,"column":189,"offset":3508}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":76,"column":1,"offset":3509}}}}