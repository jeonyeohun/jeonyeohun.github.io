{"componentChunkName":"component---src-templates-blog-post-js","path":"/Database/2020-03-10-데이타베이스-관계대수/","result":{"data":{"site":{"siteMetadata":{"title":"Hun's Footsteps 🥷","author":"전여훈","siteUrl":"https://jeonyeohun.github.io","comment":{"disqusShortName":"","utterances":"jeonyeohun/jeonyeohun.github.io"},"sponsor":{"buyMeACoffeeId":"jeonyeohun"}}},"markdownRemark":{"id":"d44f4034-5fbf-5df4-9ce7-892524308069","excerpt":"Algebra Relational Algebra 를 보기 전에, Algebra 가 무엇인지부터 알아보자. Algebra는 연산자(operator)와 피연산자(Operand)를 포함하는 수학적 시스템이다. 연산자는 어떤 결과에 대한 procedure를 표현하는 역할을 하고 피연산자는 연산자가 적용되는 대상이 되는 변수나 값을 의미한다. Relational Algebra Relational Algebra도 Algebra이기에 동일하게 Operand 와 Operator 가 존재한다. 일반 Algebra…","html":"<h2 id=\"algebra\" style=\"position:relative;\"><a href=\"#algebra\" aria-label=\"algebra permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Algebra</h2>\n<p>Relational Algebra 를 보기 전에, Algebra 가 무엇인지부터 알아보자. Algebra는 연산자(operator)와 피연산자(Operand)를 포함하는 수학적 시스템이다. 연산자는 어떤 결과에 대한 procedure를 표현하는 역할을 하고 피연산자는 연산자가 적용되는 대상이 되는 변수나 값을 의미한다.</p>\n<h2 id=\"relational-algebra\" style=\"position:relative;\"><a href=\"#relational-algebra\" aria-label=\"relational algebra permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Relational Algebra</h2>\n<p>Relational Algebra도 Algebra이기에 동일하게 Operand 와 Operator 가 존재한다. 일반 Algebra와 다른점은, 입력과 출력으로 Relation, 즉 테이블을 취한다는 것이다.</p>\n<p>따라서 Operand 는 relation이 되고, Operator는 총 8가지가 있는데 이제부터 알아보자.</p>\n<h3 id=\"select-operation\" style=\"position:relative;\"><a href=\"#select-operation\" aria-label=\"select operation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Select Operation</h3>\n<p>select 연산은 테이블에서 주어진 predicate 에 만족하는 tuple을 뽑는 연산이다. 기호는 σ 로 표현한다.</p>\n<p>만약 내가 “Comp. Sci” 테이블에 있는 “Intstructor” 의 목록을 알고싶다면,</p>\n<center>σ<sub>dept_name=\"Comp. Sci\"</sub>(Instructor)</center><br>\n<p>이렇게 쿼리를 작성할 수 있다. 위와 같이 단순한 predicate 뿐만 아니라 좀 더 복잡한 predicate도 만들어서 쿼리를 작성할 수 있다.</p>\n<center>σ<sub>dept_name=\"Comp. Sci\" ⌃ salary>70,000</sub>(Instructor)</center><br>\n<p>이런 쿼리를 사용하면 AND 연산을 통해 department 가 Comp. Sci 이면서 salary가 70,000 이 넘는 tuple들만 찾아서 가져오게 할 수 있다.</p>\n<p>또 다른 예를 보면,</p>\n<center>σ<sub>dept_name=building</sub>(Department)</center><br>\n<p>이런 쿼리를 통해서 dep_name attribute의 값과 building attribute의 값이 동일한 department 들만 뽑아서 가져오게 할 수도 있다.</p>\n<h3 id=\"project-operation\" style=\"position:relative;\"><a href=\"#project-operation\" aria-label=\"project operation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Project Operation</h3>\n<p>Project operation은 또 다르게 unary operationd이라고도 한다. 특정 attribute들을 골라내는 연산자이다.</p>\n<center>Pi<sub>name, salary</sub>(instructor)</center><br>\n<p>이런 쿼리를 통해서 instructor relation에서 name과 salary만 골라서 가져오도록 할 수 있다.</p>\n<h3 id=\"쿼리-안에-쿼리\" style=\"position:relative;\"><a href=\"#%EC%BF%BC%EB%A6%AC-%EC%95%88%EC%97%90-%EC%BF%BC%EB%A6%AC\" aria-label=\"쿼리 안에 쿼리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿼리 안에 쿼리?</h3>\n<p>쿼리 안에 다른 쿼리를 끼워넣어서 한 쿼리의 결과를 새로운 쿼리의 입력으로 사용할 수 있다. 일종의 파이프 라인이라고 생각하자.</p>\n<center>Pi<sub>name</sub>(σ<sub>dept_name=\"Comp. Sci“</sub>(instructor))</center><br>\n<p>이런 쿼리를 통해 먼저 selection operation을 하고 그 결과를 projection operation에서 사용하는 것이 가능하다. 그리고 기억해야할 것은 projection operation은 중복을 모두 제거한다.</p>\n<h3 id=\"cartesian-product-operation\" style=\"position:relative;\"><a href=\"#cartesian-product-operation\" aria-label=\"cartesian product operation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cartesian-Product Operation</h3>\n<p>카테시안 프로덕트는 조합을 만드는 연산이다. 조금은 무식하지만, 만들 수 있는 모든 조합을 만든다. 한 attribute를 다른 테이블에서 해당 값을 가지는 모든 tuple을 찾는다. 만약 15개의 수업이 나열되어 있는 테이블과 12명의 교과목 교수님들이 나열되어 있는 테이블에 수업이름을 기준으로 cartesian product를 수행하면, 그 결과로 12X15인 총 180개의 새로운 tuple이 결과로 만들어질 것이다.</p>\n<h3 id=\"theta-join-operation\" style=\"position:relative;\"><a href=\"#theta-join-operation\" aria-label=\"theta join operation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Theta Join Operation</h3>\n<p>Theta Join 연산자는 카테시안 조합보다 조금 덜 무식한 방법이다. 카테시안 연산의 예에서, 12명의 교과목 교수님들이 모두 15개의 수업을 가르치지는 않을 것이다. 따라서 우리는 특정한 attribute를 사용해서 수업의 종류에 대한 데이터를 만들고 이 값을 join operation에 사용하면, 우선 cartesian-product operation으로 모든 조합이 생성된 뒤, 이후에 selection operation을 사용해서 조건이 되는 attribute들만 가져오도록 지정할 수 있다. 이 두단계를 한번에 해주는 연산이 theta join operator이고, 다음과 같이 나타낸다.</p>\n<center>r ⨝<sub>𝜃</sub> s</center>\n<br>\n여기서 세타는 join 할 조건을 의미한다.\n<h3 id=\"union-operation\" style=\"position:relative;\"><a href=\"#union-operation\" aria-label=\"union operation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Union Operation</h3>\n<p>union은 우리가 아는 합집합이다. 양 테이블에 존재하는 모든 tuple들을 합치는 것이다. 그런데 이 연산을 사용하려면 몇가지 조건이 필요하다.</p>\n<p>만약 r이라는 테이블과 s라는 테이블의 union operation을 수행하고 싶다면, <strong>1) r과 s는 똑같은 갯수의 attribute를 가지고 있어야 한다(arity가 같다고도 한다).</strong> 그리고 <strong>2) 두 테이블의 domain이 비교가 가능해야한다. 다른 말로, 두 attribute 사이의 타입이 같아야 한다는 것이다.</strong></p>\n<p>Uninon Operation은 다음과 같은 기호로 나타낸다.</p>\n<center>R ∪ S</center>\n<p>그리고 union 하는 과정에서 중복된 tuple을 삭제한다.</p>\n<h3 id=\"set-intersection-operation\" style=\"position:relative;\"><a href=\"#set-intersection-operation\" aria-label=\"set intersection operation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set-intersection Operation</h3>\n<p>set-intersection은 우리가 아는 교집합과 동일하다. 양 테이블에 모두 존재하는 tuple들만 가져오는 것이다.</p>\n<p>set-intersection operation의 수행 조건은 union operation과 동일하다. <strong>1) r과 s는 똑같은 갯수의 attribute를 가지고 있어야 한다(arity가 같다고도 한다).</strong> 그리고 <strong>2) 두 테이블의 domain이 비교가 가능해야한다. 다른 말로, 두 attribute 사이의 타입이 같아야 한다는 것이다.</strong></p>\n<p>Set-intersection operation은 다음과 같이 나타낸다.</p>\n<center>R ∩ S</center>\n<h3 id=\"set-difference-operation\" style=\"position:relative;\"><a href=\"#set-difference-operation\" aria-label=\"set difference operation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set-Difference Operation</h3>\n<p>Set-Difference operation은 한 테이블에는 존재하고 다른 테이블에는 존재하지 않는 tuple들을 찾는 연산이다. 여집합이라고 생각하자. set 에 대한 연산이기에 연산 수행에 대해 동일한 조건이 그대로 유지된다. <strong>1) r과 s는 똑같은 갯수의 attribute를 가지고 있어야 한다(arity가 같다고도 한다).</strong> 그리고 <strong>2) 두 테이블의 domain이 비교가 가능해야한다. 다른 말로, 두 attribute 사이의 타입이 같아야 한다는 것이다.</strong></p>\n<p>Set-difference operation은 다음과 같이 나타낸다.</p>\n<center>R - S</center>\n<h3 id=\"assignment-operation\" style=\"position:relative;\"><a href=\"#assignment-operation\" aria-label=\"assignment operation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assignment Operation</h3>\n<p>쿼리를 중첩해서 작성하다보면 보기에도 어렵고 작성하는 사람도 헷갈린다. 그래서 우리는 Assignement Operation을 통해 쿼리의 일부를 변수에 담아서 사용할 수 있다.</p>\n<p>기호는 아래와 같이 화살표로 나타내고 아래의 예를 보면 더 명확히 어떤 기능인지 알 수 있을 것이다.</p>\n<center>\nPhysics <- σ<sub>dept_name=“Physics”</sub> (instructor)<br>\nMusic <- σ<sub>dept_name=“Music”</sub> (instructor)<br>\nPhysics ∪ Music\n</center>\n<h3 id=\"rename-operation\" style=\"position:relative;\"><a href=\"#rename-operation\" aria-label=\"rename operation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rename Operation</h3>\n<p>Rename operation은 어떤 쿼리에 대해 이름을 붙이는 연산자이다.</p>\n<p>기호는 로우(𝝆)를 사용하고 아래 예를 통해 더 자세히 알아보자.</p>\n<center>𝝆<sub>x</sub>(E)</center>\n<br>\n<p>위와 같은 식을 사용하면, E가 쿼리, x가 이름이라고 했을 때, 특정 쿼리에 대해서 이름을 붙일 수 있게 되는 것이다.</p>\n<h2 id=\"equivalent-queries\" style=\"position:relative;\"><a href=\"#equivalent-queries\" aria-label=\"equivalent queries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Equivalent Queries</h2>\n<p>Equivalent Query는 다르게 생겼지만 완전히 동일한 결과를 내는 쿼리들을 의미한다.</p>","frontmatter":{"title":"[데이터베이스] 관계대수(Relational Algebra)","date":"March 10, 2020"}}},"pageContext":{"slug":"/Database/2020-03-10-데이타베이스-관계대수/","previous":{"fields":{"slug":"/Problem-Solving/2019-12-26-6321번-IBM-빼기-1/"},"frontmatter":{"title":"[백준 알고리즘] 6321번: IBM 빼기 1","category":"Problem-Solving","draft":false}},"next":{"fields":{"slug":"/Operating-Systems/Operating-Systems-And-Computer-Architecture/"},"frontmatter":{"title":"[운영체제] 운영체제의 정의와 컴퓨터 구조(Operating System and Computer Architecture)","category":"Operating-Systems","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}