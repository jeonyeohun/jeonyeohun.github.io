{"componentChunkName":"component---src-templates-blog-post-js","path":"/Database/2020-04-18-데이터베이스-뷰-Views/","result":{"data":{"site":{"siteMetadata":{"title":"Hun's Footsteps 🥷","author":"전여훈","siteUrl":"https://jeonyeohun.github.io","comment":{"disqusShortName":"","utterances":"jeonyeohun/jeonyeohun.github.io"},"sponsor":{"buyMeACoffeeId":"jeonyeohun"}}},"markdownRemark":{"id":"f35d368c-ec5a-5aa4-a266-d3b23b981d78","excerpt":"View 어떤 경우에는 데이터베이스 사용자에게 테이블안에 있는 모든 정보를 다 보여주는게 좋지 않을 수도 있다. 예를 들어, 회사의 사원 데이터베이스를 누구나 조회해서 이름과 직무를 확인하게 할 수는 있지만, 사원번호, 연봉 등은 공유되지 않게 하고싶을 수도 있다. 그리고 이런 테이블이 꽤나 자주 사용될 수도 있다고 하자. 이런 경우에 View 를 이용하면 실제로 저장되어 있는 테이블 처럼 보이지만, 물리적으로 존재하지는 않은 가상 테이블을 만들어 사용할 수 있다. CREATE VIEW…","html":"<h1 id=\"view\" style=\"position:relative;\"><a href=\"#view\" aria-label=\"view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>View</h1>\n<p>어떤 경우에는 데이터베이스 사용자에게 테이블안에 있는 모든 정보를 다 보여주는게 좋지 않을 수도 있다. 예를 들어, 회사의 사원 데이터베이스를 누구나 조회해서 이름과 직무를 확인하게 할 수는 있지만, 사원번호, 연봉 등은 공유되지 않게 하고싶을 수도 있다. 그리고 이런 테이블이 꽤나 자주 사용될 수도 있다고 하자.</p>\n<p>이런 경우에 View 를 이용하면 실제로 저장되어 있는 테이블 처럼 보이지만, 물리적으로 존재하지는 않은 가상 테이블을 만들어 사용할 수 있다.</p>\n<h2 id=\"create-view\" style=\"position:relative;\"><a href=\"#create-view\" aria-label=\"create view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CREATE VIEW</h2>\n<p>developers</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>age</th>\n<th>job</th>\n<th>salary</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>여훈</td>\n<td>26</td>\n<td>FE</td>\n<td>3000</td>\n</tr>\n<tr>\n<td>2</td>\n<td>운이</td>\n<td>24</td>\n<td>BE</td>\n<td>3500</td>\n</tr>\n<tr>\n<td>3</td>\n<td>현기</td>\n<td>21</td>\n<td>DO</td>\n<td>2700</td>\n</tr>\n<tr>\n<td>4</td>\n<td>국인</td>\n<td>22</td>\n<td>FE</td>\n<td>3000</td>\n</tr>\n<tr>\n<td>5</td>\n<td>수윤</td>\n<td>22</td>\n<td>BE</td>\n<td>2700</td>\n</tr>\n</tbody>\n</table>\n<p>앞서 글로 설명했던 예시 테이블에서 view 를 만든다고 하자. 우리는 이 테이블에서 salary, age 정보를 숨기고 id, name, job 만 보여주길 원한다고 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> devlist <span class=\"token keyword\">AS</span>\n<span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> job\n<span class=\"token keyword\">FROM</span> developers<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 쿼리를 사용하면, developers 테이블에서 id, name, job 만 뽑아서 View 가 만들어진다. 이제 devlist 라는 이름을 사용하면, 마치 물리적으로 저장된 테이블을 사용하는 것 처럼 view 로 만들어진 테이블을 사용하는 것이 가능하다.</p>\n<h2 id=\"defining-view-with-other-view\" style=\"position:relative;\"><a href=\"#defining-view-with-other-view\" aria-label=\"defining view with other view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Defining View with Other View</h2>\n<p>일반 테이블에 쿼리문을 사용하는 것 처럼 view 를 통해서 새로운 view를 만들어낼 수도 있다.</p>\n<p>View 는 일반적으로 이미 attribute들이 필터되어 있는 상태이기 때문에 새로운 정보를 다시 필터할 때 쿼리문이 매우 단순해지고 관리가 쉬워진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> devlist <span class=\"token keyword\">AS</span>\n<span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> job\n<span class=\"token keyword\">FROM</span> developers<span class=\"token punctuation\">;</span></code></pre></div>\n<p>위에서 만들었던 developers view를 이용해서 새로운 view를 만들어보자. 우리는 여기서 FrontEnd 로 일하고 있는 개발자들의 정보만을 가진 view를 만들어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> FElit <span class=\"token keyword\">AS</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">FROM</span> devlist\n<span class=\"token keyword\">WHERE</span> job <span class=\"token operator\">=</span> <span class=\"token string\">'FE'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>기존의 developers 테이블을 통해서 만들었다면, 몇가지 조건이 더 추가되어서 복잡한 쿼리문 처럼 보였겠지만, 이렇게 하니 쿼리문이 단순해졌다. 지금은 테이블 내에 정보가 많지 않기 때문에 편리성을 크게 느끼지 못할 수도 있겠지만, 여러 정보들로 얽히고 섥힌 테이블들을 정보를 필터할 때는 view의 사용이 더 용이할 수도 있다.</p>\n<h2 id=\"view-expansion\" style=\"position:relative;\"><a href=\"#view-expansion\" aria-label=\"view expansion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>View Expansion</h2>\n<p>View expansion은 어떤 view 가 다른 view 를 통해서 만들어졌을 때, 소스가 된 view 를 기존 쿼리로 펼쳐서 해당 view가 의믜하는 것이 무엇인지 파악하는 방법이다. 조금 복잡한 예시가 필요하기에 교수님이 주신 예제 쿼리를 사용해보도록 하겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> physics_fall_2017_watson <span class=\"token keyword\">AS</span>\n    <span class=\"token keyword\">SELECT</span> course_id<span class=\"token punctuation\">,</span> room_number\n    <span class=\"token keyword\">FROM</span> physics_fall_2017\n    <span class=\"token keyword\">WHERE</span> building<span class=\"token operator\">=</span><span class=\"token string\">'Watson'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>physics<em>fall</em>2017 이라는 view가 이미 만들어져 있고, 해당 테이블에는 2017년에 열린 물리학 수업 정보가 들어가 있다고 해보자. 그리고 위 쿼리는 해당 view에서 Watson 건물에서 열린 수업을 모두 필터하는 새로운 view를 만드는 쿼리이다.</p>\n<p>View expansion은 위 쿼리에서 소스로 사용된 view 인 physics<em>fall</em>2017 을 해당 view를 만들기 위해 사용됐던 쿼리로 펼치는 것을 의미한다. 따라서 위 쿼리에 view expansion 을 적용하면 다음과 같은 쿼리가 완성된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> physics_fall_2017_watson <span class=\"token keyword\">AS</span>\n    <span class=\"token keyword\">SELECT</span> course_id<span class=\"token punctuation\">,</span> room_number\n    <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">SELECT</span> course<span class=\"token punctuation\">.</span>course_id<span class=\"token punctuation\">,</span> sec_id<span class=\"token punctuation\">,</span> building<span class=\"token punctuation\">,</span> room_number\n        <span class=\"token keyword\">FROM</span> course<span class=\"token punctuation\">,</span> section\n        <span class=\"token keyword\">WHERE</span> course<span class=\"token punctuation\">.</span>course_id <span class=\"token operator\">=</span> section<span class=\"token punctuation\">.</span>course_id\n            <span class=\"token operator\">AND</span> course<span class=\"token punctuation\">.</span>dept_name <span class=\"token operator\">=</span> <span class=\"token string\">'Physics'</span>\n            <span class=\"token operator\">AND</span> section<span class=\"token punctuation\">.</span>semester <span class=\"token operator\">=</span> <span class=\"token string\">'Fall'</span>\n            <span class=\"token operator\">AND</span> section<span class=\"token punctuation\">.</span><span class=\"token keyword\">year</span> <span class=\"token operator\">=</span> <span class=\"token string\">'2017'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">WHERE</span> building<span class=\"token operator\">=</span><span class=\"token string\">'Watson'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 physics<em>fall</em>2017 이라는 view가 쿼리문으로 펼져졌다.</p>\n<h2 id=\"materialized-views\" style=\"position:relative;\"><a href=\"#materialized-views\" aria-label=\"materialized views permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Materialized Views</h2>\n<p>View 에는 두 가지 종류가 있다.</p>\n<ol>\n<li>Virtual : 실제로 데이터베이스에 저장되지 않는 view. 쿼리문이다.</li>\n<li>Materialized : 실제로 테이블로 만들어지고 저장되는 view</li>\n</ol>\n<p>Materiallized view 는 실제로 데이터베이스에 물리적으로 저장이 된다. 만약 어떤 복잡한 연산이 요구되는 쿼리가 빈번하게 사용된다면, 해당 쿼리의 결과를 미리 만들어두고 계속 사용하는 편이 더 효율 적일 수도 있다. Matreialize View는 쿼리의 결과를 저장해두기 때문에 반복되는 연산을 여러번 할 필요가 없게 한다.</p>\n<p>하지만 단점도 존재하는데, Materialized View를 만들때 사용된 소스가 업데이트 된다면, 더 이상 Materilaized view 가 가지고 있는 결과가 의미가 없어진다는 것이다. 따라서 Materialized view 를 만드는데 사용된 데이터가 업데이트 될 때, 새로 Materialized view 를 다시 만들어 값을 함께 업데이트 시켜주는 것이 일반적이다.</p>\n<h2 id=\"update-of-a-view\" style=\"position:relative;\"><a href=\"#update-of-a-view\" aria-label=\"update of a view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Update of a View</h2>\n<p>view 도 일종의 테이블이기 때문에 새로운 tuple을 추가하거나 값을 갱신하는 것이 가능하다. 하지만 대부분의 View 는 단순한 쿼리로 만들어져 있는 view 에 대한 연산만을 허용하는데, 일반적으로 그 조건은 다음과 같다.</p>\n<ol>\n<li>FROM 문이 하나의 테이블만 가지고 있는 경우</li>\n<li>SELECT 문이 테이블 내에 존재하는 attribute 이름만을 가진경우. aggregate function이나 DISTINCT 키워드가 없는 경우.</li>\n<li>SELECT 문에 포함되지 않은 소스 테이블의 attribute가 NOT NULL 이 아닐 경우.</li>\n<li>GROUP BY 나 HAVING 문이 없는 경우.</li>\n</ol>","frontmatter":{"title":"[데이터베이스] 뷰(Views)","date":"April 18, 2020"}}},"pageContext":{"slug":"/Database/2020-04-18-데이터베이스-뷰-Views/","previous":{"fields":{"slug":"/Database/2020-04-17-데이터베이스-데이터무결성/"},"frontmatter":{"title":"[데이터베이스] 데이터 무결성(Integrity Constraints)","category":"Database","draft":false}},"next":{"fields":{"slug":"/Algorithm-Analysis/2020-04-20-알고리즘-분기한정법(Branch-and-Bound)/"},"frontmatter":{"title":"[알고리즘 정리] 분기한정법(Branch and Bound)","category":"Algorithm-Analysis","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}