{"componentChunkName":"component---src-templates-blog-post-js","path":"/Swift/05-strings-and-charaters/","result":{"data":{"site":{"siteMetadata":{"title":"Hun's Footsteps 🥷","author":"전여훈","siteUrl":"https://jeonyeohun.github.io","comment":{"disqusShortName":"","utterances":"jeonyeohun/jeonyeohun.github.io"},"sponsor":{"buyMeACoffeeId":"jeonyeohun"}}},"markdownRemark":{"id":"a16d5696-1ee0-5166-adcb-e9ef2a645b8a","excerpt":"Strings and Chracters https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html 문자열은  이다. 스위프트의 String 타입은 Fountdation의  클래스와 연결되어 있다. 따라서 Foundation 을 임포트하면 NSString 메서드를 String 타입에서 별도의 캐스팅 없이 사용할 수 있다. String Literals Multiline String Literals…","html":"<h1 id=\"strings-and-chracters\" style=\"position:relative;\"><a href=\"#strings-and-chracters\" aria-label=\"strings and chracters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Strings and Chracters</h1>\n<blockquote>\n<p><a href=\"https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html\">https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html</a></p>\n</blockquote>\n<ul>\n<li>문자열은 <code class=\"language-text\">series of characters</code> 이다.</li>\n<li>스위프트의 String 타입은 Fountdation의 <code class=\"language-text\">NSSring</code> 클래스와 연결되어 있다. 따라서 Foundation 을 임포트하면 NSString 메서드를 String 타입에서 별도의 캐스팅 없이 사용할 수 있다.</li>\n</ul>\n<h2 id=\"string-literals\" style=\"position:relative;\"><a href=\"#string-literals\" aria-label=\"string literals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String Literals</h2>\n<h3 id=\"multiline-string-literals\" style=\"position:relative;\"><a href=\"#multiline-string-literals\" aria-label=\"multiline string literals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multiline String Literals</h3>\n<ul>\n<li><code class=\"language-text\">&quot;&quot;&quot;</code> 를 사용하면 여러줄의 문자열을 선언할 수 있다.</li>\n<li>\n<p>multiline string literal은 <code class=\"language-text\">&quot;&quot;&quot;</code> 내부에 사용한 공백문자를 포함한 모든 문자를 저장한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> quotation <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\"\n<span class=\"token builtin\">The</span> <span class=\"token builtin\">White</span> <span class=\"token builtin\">Rabbit</span> put on his spectacles<span class=\"token punctuation\">.</span>  \"<span class=\"token builtin\">Where</span> shall I begin<span class=\"token punctuation\">,</span>\nplease your <span class=\"token builtin\">Majesty</span><span class=\"token operator\">?</span>\" he asked<span class=\"token punctuation\">.</span>\n\n<span class=\"token string\">\"Begin at the beginning,\"</span> the <span class=\"token builtin\">King</span> said gravely<span class=\"token punctuation\">,</span> \"and go on\ntill you come to the end<span class=\"token punctuation\">;</span> then stop<span class=\"token punctuation\">.</span>\"\n<span class=\"token string\">\"\"</span>\"</code></pre></div>\n</li>\n<li>\n<p>multiline string literal에 개행을 포함시키고 싶지 않을 때는 줄의 끝에 <code class=\"language-text\">\\</code>를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> quotation <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\"\n<span class=\"token builtin\">The</span> <span class=\"token builtin\">White</span> <span class=\"token builtin\">Rabbit</span> put on his spectacles<span class=\"token punctuation\">.</span>  <span class=\"token string\">\"Where shall I begin, \\\nplease your Majesty?\"</span> he asked<span class=\"token punctuation\">.</span>\n<span class=\"token string\">\"Begin at the beginning,\"</span> the <span class=\"token builtin\">King</span> said gravely<span class=\"token punctuation\">,</span> <span class=\"token string\">\"and go on \\\ntill you come to the end; then stop.\"</span>\n<span class=\"token string\">\"\"</span>\"</code></pre></div>\n</li>\n<li>multiline string literal 의 indentation은 닫는 <code class=\"language-text\">&quot;&quot;&quot;</code>의 위치에 따라 결정된다.</li>\n</ul>\n<h3 id=\"special-characters-in-string-literals\" style=\"position:relative;\"><a href=\"#special-characters-in-string-literals\" aria-label=\"special characters in string literals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Special Characters in String Literals</h3>\n<ul>\n<li>\n<p>escape 문자들은 다음과 같다.</p>\n<ul>\n<li><code class=\"language-text\">\\0</code> : 널 문자</li>\n<li><code class=\"language-text\">\\\\</code> : 백슬래시</li>\n<li><code class=\"language-text\">\\t</code> : 탭</li>\n<li><code class=\"language-text\">\\n</code> : 개행</li>\n<li><code class=\"language-text\">\\r</code> : 캐리지 리턴</li>\n<li><code class=\"language-text\">\\&quot;</code> : 쌍따음표</li>\n<li><code class=\"language-text\">\\&#39;</code> : 따음표</li>\n</ul>\n</li>\n<li>\n<p>유니코드를 표현하기 위해서는 <code class=\"language-text\">\\u{n}</code>을 사용하면 된다. n에는 1~8자리 16진수가 들어간다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> wiseWords <span class=\"token operator\">=</span> <span class=\"token string\">\"\\\"Imagination is more important than knowledge\\\" - Einstein\"</span>\n<span class=\"token comment\">// \"Imagination is more important than knowledge\" - Einstein</span>\n<span class=\"token keyword\">let</span> dollarSign <span class=\"token operator\">=</span> <span class=\"token string\">\"\\u{24}\"</span>        <span class=\"token comment\">// $,  Unicode scalar U+0024</span>\n<span class=\"token keyword\">let</span> blackHeart <span class=\"token operator\">=</span> <span class=\"token string\">\"\\u{2665}\"</span>      <span class=\"token comment\">// ♥,  Unicode scalar U+2665</span>\n<span class=\"token keyword\">let</span> sparklingHeart <span class=\"token operator\">=</span> <span class=\"token string\">\"\\u{1F496}\"</span> <span class=\"token comment\">// 💖, Unicode scalar U+1F496</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"extended-string-delimiters\" style=\"position:relative;\"><a href=\"#extended-string-delimiters\" aria-label=\"extended string delimiters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extended String Delimiters</h3>\n<ul>\n<li>\n<p>escape 문자를 있는 그대로 출력하고 싶다면, 문자열을 감싸는 쌍따음표 밖에 <code class=\"language-text\">#</code>로 전체 문자열을 감싸주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>#<span class=\"token string\">\"Line 1\\nLine 2\"</span>#<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Line 1\\nLine 2</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">#</code>로 감싸진 문자열에서 escape 문자를 그대로 사용하려면 <code class=\"language-text\">\\</code> 뒤에 <code class=\"language-text\">#</code>을 다시 붙여주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>#<span class=\"token string\">\"Line 1\\#nLine 2\"</span>#<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Line 1\\nLine 2</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"initializing-an-empty-string\" style=\"position:relative;\"><a href=\"#initializing-an-empty-string\" aria-label=\"initializing an empty string permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Initializing an Empty String</h2>\n<ul>\n<li>\n<p>비어있는 문자열을 만들기 위해서는 <code class=\"language-text\">빈 문자열(&quot;&quot;)</code>을 할당하거나 String 타입의 <code class=\"language-text\">initializer</code>를 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> emptyString <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token keyword\">var</span> anotherEmptyString <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>문자열이 비어있는지 확인하기 위해서는 <code class=\"language-text\">isEmpty</code> 프로퍼티를 상요하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> emptyString<span class=\"token punctuation\">.</span><span class=\"token builtin\">isEmpty</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"empty\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"string-mutability\" style=\"position:relative;\"><a href=\"#string-mutability\" aria-label=\"string mutability permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String Mutability</h2>\n<ul>\n<li>\n<p>문자열의 수정은 문자열 변수가 <code class=\"language-text\">let</code> 으로 선언된 상수인지, <code class=\"language-text\">var</code>로 선언된 변수인지에 따라 결정된다. let으로 선언된 경우는 수정이 불가능하고, var로 선언된 경우에는 수정이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> variableString <span class=\"token operator\">=</span> <span class=\"token string\">\"Horse\"</span>\nvariableString <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">\" and carriage\"</span>\n<span class=\"token comment\">// variableString is now \"Horse and carriage\"</span>\n\n<span class=\"token keyword\">let</span> constantString <span class=\"token operator\">=</span> <span class=\"token string\">\"Highlander\"</span>\nconstantString <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">\" and another Highlander\"</span>\n<span class=\"token comment\">// this reports a compile-time error - a constant string cannot be modified</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"strings-are-value-types\" style=\"position:relative;\"><a href=\"#strings-are-value-types\" aria-label=\"strings are value types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Strings Are Value Types</h2>\n<ul>\n<li>스위프트에서 String 은 value 타입이다. 함수나 메서드에 전달되거나 변수에 할당될 때 <code class=\"language-text\">값이 복사되어 전달된다.</code></li>\n</ul>\n<h2 id=\"wokring-with-characters\" style=\"position:relative;\"><a href=\"#wokring-with-characters\" aria-label=\"wokring with characters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wokring with Characters</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">for-in</code> 반복문을 사용해서 문자열의 각 문자를 읽을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">for</span> character <span class=\"token keyword\">in</span> <span class=\"token string\">\"DOG\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>Character 타입으로 변수나 상수를 선언하고 정의하는 것도 가능하다.</li>\n<li>\n<p>문자열과 다르게 <code class=\"language-text\">Character</code> 타입을 명시해주어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> char<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Character</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"!\"</span></code></pre></div>\n</li>\n<li>String 타입의 initializer 에 Character의 배열을 전달하는 것으로도 문자열을 생성할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> dog<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Character</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"O\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> dogString <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>dogString<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"concatenating-strings-and-characters\" style=\"position:relative;\"><a href=\"#concatenating-strings-and-characters\" aria-label=\"concatenating strings and characters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Concatenating Strings and Characters</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">+</code> 연산자를 사용하면 두 문자열을 합쳐 새로운 문자열을 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">left</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">right</span> <span class=\"token operator\">=</span> <span class=\"token string\">\" world\"</span>\n\n<span class=\"token keyword\">let</span> leftAndRight <span class=\"token operator\">=</span> <span class=\"token keyword\">left</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">right</span> <span class=\"token comment\">// \"hello world\"</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">+=</code> 연산자를 사용해서 기존 문자열에 새로운 문자열을 붙이는 것도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> instruction <span class=\"token operator\">=</span> <span class=\"token string\">\"look over\"</span>\ninstruction <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token keyword\">right</span> <span class=\"token comment\">// \"look over world\"</span></code></pre></div>\n</li>\n<li>\n<p>Character 타입의 변수가 있다면, String 타입의 <code class=\"language-text\">append</code> 메서드를 통해 기존 문자열에 문자를 뒤에 붙일 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> exclamationMark<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Character</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"!\"</span>\nleftAndRight<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>exclamationMark<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// welcome now equals \"hello world!\"</span></code></pre></div>\n</li>\n<li>multiline string literal 도 위와 같은 방법으로 합칠 수 있다.</li>\n</ul>\n<h2 id=\"unicode\" style=\"position:relative;\"><a href=\"#unicode\" aria-label=\"unicode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unicode</h2>\n<ul>\n<li>스위프트의 String과 Character 타입은 Unicode를 완전하게 지원한다.</li>\n</ul>\n<h3 id=\"unicode-scalar-values\" style=\"position:relative;\"><a href=\"#unicode-scalar-values\" aria-label=\"unicode scalar values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unicode Scalar Values</h3>\n<ul>\n<li>Unicode를 표현하기 위해서 스위프트는 <code class=\"language-text\">21비트 숫자</code>로 문자를 표현한다.</li>\n</ul>\n<h3 id=\"extended-grapheme-clusters\" style=\"position:relative;\"><a href=\"#extended-grapheme-clusters\" aria-label=\"extended grapheme clusters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extended Grapheme Clusters</h3>\n<ul>\n<li>스위프트의 Charater 타입 인스턴스는 항상 하나의 <code class=\"language-text\">extended grapheme cluster</code>를 표현한다.</li>\n<li><code class=\"language-text\">extended grapheme cluster</code>는 하나 이상의 유니코드 값(Unicode scalar)를 의미한다.</li>\n<li>\n<p>어떤 문자는 하나의 유니코드로도 표현할 수 있고, 여러개의 유니코드의 조합으로도 표현할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> eAcute<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Character</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\\u{E9}\"</span>\n<span class=\"token keyword\">let</span> combinedEAcute<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Character</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\\u{65}\\u{301}\"</span></code></pre></div>\n<p>두 문자는 모두 같은 문자를 의미한다.</p>\n</li>\n</ul>\n<h2 id=\"counting-characters\" style=\"position:relative;\"><a href=\"#counting-characters\" aria-label=\"counting characters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Counting Characters</h2>\n<ul>\n<li>\n<p>문자열에 포함된 문자의 수를 알기 위해서는 String에 포함된 count 프로퍼티를 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> unusualMenagerie <span class=\"token operator\">=</span> <span class=\"token string\">\"Koala 🐨, Snail 🐌, Penguin 🐧, Dromedary 🐪\"</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unusualMenagerie has <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>unusualMenagerie<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span><span class=\"token delimiter variable\">)</span></span> characters\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"unusualMenagerie has 40 characters\"</span></code></pre></div>\n</li>\n<li>\n<p>스위프트는 문자를 표현하기 위해 extended grapheme cluster 를 사용하기 때문에 새로운 문자를 뒤에 추가했을 때, 항상 문자열의 길이가 변하지는 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> word <span class=\"token operator\">=</span> <span class=\"token string\">\"cafe\"</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the number of characters in <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>word<span class=\"token delimiter variable\">)</span></span> is <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>word<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span><span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"the number of characters in cafe is 4\"</span>\n\nword <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">\"\\u{301}\"</span>    <span class=\"token comment\">// COMBINING ACUTE ACCENT, U+0301</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the number of characters in <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>word<span class=\"token delimiter variable\">)</span></span> is <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>word<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span><span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"the number of characters in café is 4\"</span></code></pre></div>\n<p>기존 문자에 유니코드가 추가되어 새로운 하나의 다른 문자로 바뀌었기 때문에 문자열의 길이에는 변함이 없다.</p>\n</li>\n<li>extended grapheme cluster는 하나의 문자를 여러 방법으로 표현할 수 있기 때문에, 같은 문자열이라도 <code class=\"language-text\">사용하는 메모리의 크기가 다를 수 있다</code>.</li>\n<li>이 때문에, 문자열의 길이를 계산하기 위해서는 문자열에 있는 모든 <code class=\"language-text\">exteded grapheme cluster boudnary</code> 를 확인해야한다. 만약 길이가 매우 긴 문자열의 길이를 알기 위해 count 프로퍼티를 사용한다면, 이 점을 유의해야한다.</li>\n</ul>\n<h2 id=\"accessing-and-modifying-a-string\" style=\"position:relative;\"><a href=\"#accessing-and-modifying-a-string\" aria-label=\"accessing and modifying a string permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Accessing and Modifying a String</h2>\n<h3 id=\"string-indices\" style=\"position:relative;\"><a href=\"#string-indices\" aria-label=\"string indices permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String Indices</h3>\n<ul>\n<li>String 타입의 값들은 <code class=\"language-text\">String.Index</code>를 함께 가지고 있다. 이를 통해 문자열의 각 위치에 해당하는 문자를 얻을 수 있다.</li>\n<li>extended grapheme cluste를 사용하기 때문에, 특정한 위치에 있는 문자를 알기 위해서는 문자열의 처음부터 끝까지 <code class=\"language-text\">Unicode Scalar를 모두 탐색해야한다</code>. 따라서 문자열의 각 문자를 인덱스 정수를 통해 접근하는 것이 불가능하다.</li>\n<li><code class=\"language-text\">startIndex</code> 프로퍼티를 사용하면 문자열의 첫번째 문자에 접근할 수 있다.</li>\n<li><code class=\"language-text\">endIndex</code> 프로퍼티를 사용하면 문자열의 마지막 문자의 <code class=\"language-text\">다음 문자</code>에 접근할 수 있다.</li>\n<li>특정한 위치에 접근하기 위해서는 String의 <code class=\"language-text\">index(before:)</code> 메서드와 <code class=\"language-text\">index(after:)</code> 메서드를 사용해서 기준이 되는 인덱스의 앞뒤에 있는 문자에 접근할 수 있다.</li>\n<li>\n<p>특정한 위치에 한번에 접근하기 위해서 <code class=\"language-text\">index(_:offsetBy:)</code> 메서드를 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Guten Tag!\"</span>\ngreeting<span class=\"token punctuation\">[</span>greeting<span class=\"token punctuation\">.</span>startIndex<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// G</span>\ngreeting<span class=\"token punctuation\">[</span>greeting<span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span>before<span class=\"token punctuation\">:</span> greeting<span class=\"token punctuation\">.</span>endIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// !</span>\ngreeting<span class=\"token punctuation\">[</span>greeting<span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span>after<span class=\"token punctuation\">:</span> greeting<span class=\"token punctuation\">.</span>startIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// u</span>\n<span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> greeting<span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">.</span>startIndex<span class=\"token punctuation\">,</span> offsetBy<span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\ngreeting<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// a</span></code></pre></div>\n</li>\n<li>\n<p>만약 접근할 수 없는 인덱스에 접근하려고 하면 <code class=\"language-text\">런타임에러</code>가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">greeting<span class=\"token punctuation\">[</span>greeting<span class=\"token punctuation\">.</span>endIndex<span class=\"token punctuation\">]</span> <span class=\"token comment\">// Error</span>\ngreeting<span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span>after<span class=\"token punctuation\">:</span> greeting<span class=\"token punctuation\">.</span>endIndex<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Error</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"inserting-and-removing\" style=\"position:relative;\"><a href=\"#inserting-and-removing\" aria-label=\"inserting and removing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inserting and Removing</h3>\n<ul>\n<li>\n<p>문자열에 새로운 문자를 삽입하기 위해서는 <code class=\"language-text\">insert(_:at:)</code> 메서드를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> welcom <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>\nwelcome<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!\"</span><span class=\"token punctuation\">,</span> at<span class=\"token punctuation\">:</span> welcome<span class=\"token punctuation\">.</span>endIndex<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"hello!\"</span></code></pre></div>\n</li>\n<li>\n<p>문자열에 새로운 문자열을 삽입하기 위해서는 <code class=\"language-text\">insert(contentsOf:at:)</code> 메서드를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">welcome<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>contentsOf<span class=\"token punctuation\">:</span> <span class=\"token string\">\" world\"</span><span class=\"token punctuation\">,</span> at<span class=\"token punctuation\">:</span> welcome<span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span>before<span class=\"token punctuation\">:</span> welcom<span class=\"token punctuation\">.</span>endIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"hello world!\"</span></code></pre></div>\n</li>\n<li>\n<p>문자열의 특정한 위치에 있는 문자를 삭제하기 위해서는 <code class=\"language-text\">remove(at:)</code> 메서드를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">welcome<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>at<span class=\"token punctuation\">:</span> welcome<span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span>before<span class=\"token punctuation\">:</span> welcome<span class=\"token punctuation\">.</span>endIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"hello world\"</span></code></pre></div>\n</li>\n<li>\n<p>문자열의 특정한 범위의 문자들을 삭제하기 위해서는 <code class=\"language-text\">removeSubrange(_:)</code> 메서드를 상요한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> range <span class=\"token operator\">=</span> welcome<span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span>welcome<span class=\"token punctuation\">.</span>endIndex<span class=\"token punctuation\">,</span> offsetBy<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>welcome<span class=\"token punctuation\">.</span>endIndex <span class=\"token comment\">// range 생성, 뒤에서 6 번째 앞 인데스부터 끝까지</span>\nwelcome<span class=\"token punctuation\">.</span><span class=\"token function\">removeSubrange</span><span class=\"token punctuation\">(</span>range<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"hello\"</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"substrings\" style=\"position:relative;\"><a href=\"#substrings\" aria-label=\"substrings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Substrings</h2>\n<ul>\n<li>문자열로부터 부분 문자열을 얻으면 문자열이 반환되는 것이 아니라 <code class=\"language-text\">Substring</code> 의 인스턴스가 반환된다.</li>\n<li>Substring 인스턴스는 String에서 사용되는 모든 작업을 수행할 수 있지만, 임시적으로만 사용해야한다.</li>\n<li>String 과 Substring 의 가장 큰 차이는 <code class=\"language-text\">performance optimization</code>에 있다. substring은 기존의 문자열을 저장하는데 사용했던 메모리를 재사용한다.</li>\n<li>\n<p>이 때문에 Substring을 사용하기 위해서 <code class=\"language-text\">기존 문자열을 계속해서 유지해야되는 오버헤드</code>가 발생한다. 따라서 Substring 을 지속적으로 유지하기 위해서는 새로운 String을 별도로 만드는 것이 더 적합하다</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, world!\"</span>\n<span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> greeting<span class=\"token punctuation\">.</span><span class=\"token function\">firstIndex</span><span class=\"token punctuation\">(</span>of<span class=\"token punctuation\">:</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> greeting<span class=\"token punctuation\">.</span>endIndex\n<span class=\"token keyword\">let</span> beginning <span class=\"token operator\">=</span> greeting<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>index<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// beginning is \"Hello\"</span>\n\n<span class=\"token comment\">// Convert the result to a String for long-term storage.</span>\n<span class=\"token keyword\">let</span> newString <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>beginning<span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"https://docs.swift.org/swift-book/_images/stringSubstring_2x.png\"></p>\n</li>\n</ul>\n<h2 id=\"comparing-strings\" style=\"position:relative;\"><a href=\"#comparing-strings\" aria-label=\"comparing strings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comparing Strings</h2>\n<h3 id=\"string-and-character-equality\" style=\"position:relative;\"><a href=\"#string-and-character-equality\" aria-label=\"string and character equality permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String and Character Equality</h3>\n<ul>\n<li><code class=\"language-text\">==</code> 연산자를 사용하면 문자와 문자열에 대한 비교연산을 수행할 수 있다.</li>\n<li>두 문자열은 extended grapheme cluster 가 <code class=\"language-text\">canonically equivalent</code> 하다면 일치하는 문자열로 취급한다.</li>\n<li>\n<p>canonically equivalent 하다는 것은 구성된 유니코드가 다르더라도 의미와 모양이 같은 것을 의미한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// \"Voulez-vous un café?\" using LATIN SMALL LETTER E WITH ACUTE</span>\n<span class=\"token keyword\">let</span> eAcuteQuestion <span class=\"token operator\">=</span> <span class=\"token string\">\"Voulez-vous un caf\\u{E9}?\"</span>\n\n<span class=\"token comment\">// \"Voulez-vous un café?\" using LATIN SMALL LETTER E and COMBINING ACUTE ACCENT</span>\n<span class=\"token keyword\">let</span> combinedEAcuteQuestion <span class=\"token operator\">=</span> <span class=\"token string\">\"Voulez-vous un caf\\u{65}\\u{301}?\"</span>\n\n<span class=\"token keyword\">if</span> eAcuteQuestion <span class=\"token operator\">==</span> combinedEAcuteQuestion <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"These two strings are considered equal\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Prints \"These two strings are considered equal\"</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"prefix-and-suffix-equality\" style=\"position:relative;\"><a href=\"#prefix-and-suffix-equality\" aria-label=\"prefix and suffix equality permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prefix and Suffix Equality</h3>\n<ul>\n<li>\n<p>문자열이 특정 문자열로 시작하는지 확인하려면 <code class=\"language-text\">hasPrefix(_:)</code> 메서드를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> romeoAndJuliet <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n<span class=\"token string\">\"Act 1 Scene 1: Verona, A public place\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"Act 1 Scene 2: Capulet's mansion\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"Act 1 Scene 3: A room in Capulet's mansion\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"Act 1 Scene 4: A street outside Capulet's mansion\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"Act 1 Scene 5: The Great Hall in Capulet's mansion\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"Act 2 Scene 1: Outside Capulet's mansion\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"Act 2 Scene 2: Capulet's orchard\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"Act 2 Scene 3: Outside Friar Lawrence's cell\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"Act 2 Scene 4: A street in Verona\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"Act 2 Scene 5: Capulet's mansion\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"Act 2 Scene 6: Friar Lawrence's cell\"</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">var</span> act1SceneCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">for</span> scene <span class=\"token keyword\">in</span> romeoAndJuliet <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">if</span> scene<span class=\"token punctuation\">.</span><span class=\"token function\">hasPrefix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Act 1 \"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    act1SceneCount <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"There are <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>act1SceneCount<span class=\"token delimiter variable\">)</span></span> scenes in Act 1\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"There are 5 scenes in Act 1\"</span></code></pre></div>\n</li>\n<li>\n<p>문자열이 특정 문자열로 끝나는지 확인하려면 <code class=\"language-text\">hasSuffix(_:)</code> 메서드를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> mansionCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">var</span> cellCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">for</span> scene <span class=\"token keyword\">in</span> romeoAndJuliet <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">if</span> scene<span class=\"token punctuation\">.</span><span class=\"token function\">hasSuffix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Capulet's mansion\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mansionCount <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> scene<span class=\"token punctuation\">.</span><span class=\"token function\">hasSuffix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Friar Lawrence's cell\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cellCount <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>mansionCount<span class=\"token delimiter variable\">)</span></span> mansion scenes; <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>cellCount<span class=\"token delimiter variable\">)</span></span> cell scenes\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"6 mansion scenes; 2 cell scenes\"</span></code></pre></div>\n</li>\n</ul>","frontmatter":{"title":"[공식문서로 Swift 공부하기] 5. Strings and Characters","date":"June 26, 2021"}}},"pageContext":{"slug":"/Swift/05-strings-and-charaters/","previous":{"fields":{"slug":"/Swift/04-basic-operators/"},"frontmatter":{"title":"[공식문서로 Swift 공부하기] 4. Basic Operators","category":"Swift","draft":false}},"next":{"fields":{"slug":"/Swift/06-collection-types/"},"frontmatter":{"title":"[공식문서로 Swift 공부하기] 6. Collection Types","category":"Swift","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}