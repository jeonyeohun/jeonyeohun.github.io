{"componentChunkName":"component---src-templates-blog-post-js","path":"/Swift/08-functions/","result":{"data":{"site":{"siteMetadata":{"title":"Hun's Footsteps 🥷","author":"전여훈","siteUrl":"https://jeonyeohun.github.io","comment":{"disqusShortName":"","utterances":"jeonyeohun/jeonyeohun.github.io"},"sponsor":{"buyMeACoffeeId":"jeonyeohun"}}},"markdownRemark":{"id":"50b24d80-9f06-5311-88d1-ed02d179683b","excerpt":"Functions Defining and Calling Functions 함수의 선언과 정의는  키워드로 시작하고, 함수의 이름과 파라미터, 리턴타입을 정의하는 것으로 만들 수 있다. Function Parameters and Return Values Functions Without Return Values 리턴 값이 없는 함수는 리턴타입을 생략할 수 있다. 리턴 값이 없는 함수는 엄밀히 말하면 값이 없는건 아니다. 해당 함수는 Void 를 리턴하고 Void…","html":"<h1 id=\"functions\" style=\"position:relative;\"><a href=\"#functions\" aria-label=\"functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functions</h1>\n<h2 id=\"defining-and-calling-functions\" style=\"position:relative;\"><a href=\"#defining-and-calling-functions\" aria-label=\"defining and calling functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Defining and Calling Functions</h2>\n<ul>\n<li>\n<p>함수의 선언과 정의는 <code class=\"language-text\">func</code> 키워드로 시작하고, 함수의 이름과 파라미터, 리턴타입을 정의하는 것으로 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> person <span class=\"token operator\">+</span> <span class=\"token string\">\"!\"</span>\n  <span class=\"token keyword\">return</span> greeting\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"function-parameters-and-return-values\" style=\"position:relative;\"><a href=\"#function-parameters-and-return-values\" aria-label=\"function parameters and return values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function Parameters and Return Values</h2>\n<h3 id=\"functions-without-return-values\" style=\"position:relative;\"><a href=\"#functions-without-return-values\" aria-label=\"functions without return values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functions Without Return Values</h3>\n<ul>\n<li>\n<p>리턴 값이 없는 함수는 리턴타입을 생략할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>person<span class=\"token delimiter variable\">)</span></span>!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Dave\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"Hello, Dave!\"</span></code></pre></div>\n</li>\n<li>리턴 값이 없는 함수는 엄밀히 말하면 값이 없는건 아니다. 해당 함수는 Void 를 리턴하고 Void는 <code class=\"language-text\">빈 튜플 (&#39;()&#39;)</code> 로 표현된다.</li>\n<li>\n<p>함수가 리턴하는 값을 무시하려면 <code class=\"language-text\">언더스코어(_)</code>를 사용해서 변수를 선언한 뒤 함수의 리턴 값을 받으면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">printAndCount</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> string<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">printWithoutCounting</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token number\">_</span> <span class=\"token operator\">=</span> <span class=\"token function\">printAndCount</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">printAndCount</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello, world\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// prints \"hello, world\" and returns a value of 12</span>\n<span class=\"token function\">printWithoutCounting</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello, world\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// prints \"hello, world\" but doesn't return a value</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"functions-with-multiple-return-values\" style=\"position:relative;\"><a href=\"#functions-with-multiple-return-values\" aria-label=\"functions with multiple return values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functions with Multiple Return Values</h3>\n<ul>\n<li>\n<p>튜플을 리턴타입으로 지정하면 여러개의 데이터를 한번에 반환할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">minMax</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> currentMin <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">var</span> currentMax <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>array<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> currentMin <span class=\"token punctuation\">{</span>\n          currentMin <span class=\"token operator\">=</span> value\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> value <span class=\"token operator\">></span> currentMax <span class=\"token punctuation\">{</span>\n          currentMax <span class=\"token operator\">=</span> value\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>currentMin<span class=\"token punctuation\">,</span> currentMax<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>반환된 튜플은 <code class=\"language-text\">.</code>을 통해 접근할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> bounds <span class=\"token operator\">=</span> <span class=\"token function\">minMax</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">109</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">71</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"min is <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>bounds<span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token delimiter variable\">)</span></span> and max is <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>bounds<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"min is -6 and max is 109\"</span></code></pre></div>\n</li>\n<li>\n<p>만약 반환할 튜플이 없는 데이터를 가질 가능성이 있다면, Optional 튜플 타입으로 리턴타입을 지정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">minMax</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">if</span> array<span class=\"token punctuation\">.</span><span class=\"token builtin\">isEmpty</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">nil</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> currentMin <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> currentMax <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>array<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> currentMin <span class=\"token punctuation\">{</span>\n        currentMin <span class=\"token operator\">=</span> value\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> value <span class=\"token operator\">></span> currentMax <span class=\"token punctuation\">{</span>\n        currentMax <span class=\"token operator\">=</span> value\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>currentMin<span class=\"token punctuation\">,</span> currentMax<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>위 예시에서는 입력으로 빈 배열이 들어오면 연산이 불가능하므로 <code class=\"language-text\">nil</code>을 반환한다. 따라서 리턴타입은 옵셔널 튜플이 되어야 한다.</li>\n<li>(Int?, Int?) 와 (Int, Int)? 는 다르다. 전자는 튜플 내 각 데이터가 nil을 가질 수 있음을 의미하고, 후자는 튜플 전체가 nil이 될 수 있음을 의미한다.</li>\n<li>\n<p><code class=\"language-text\">옵셔널 바인딩</code>을 이용하면 이런 종류의 함수를 간단하게 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> bounds <span class=\"token operator\">=</span> <span class=\"token function\">minMax</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">109</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">71</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"min is <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>bounds<span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token delimiter variable\">)</span></span> and max is <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>bounds<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Prints \"min is -6 and max is 109\"</span></code></pre></div>\n</li>\n</ul>","frontmatter":{"title":"[공식문서로 Swift 공부하기] 8. Functions","date":"July 14, 2021"}}},"pageContext":{"slug":"/Swift/08-functions/","previous":{"fields":{"slug":"/Swift/07-control-flow/"},"frontmatter":{"title":"[공식문서로 Swift 공부하기] 7. Control Flow","category":"Swift","draft":false}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}