{"componentChunkName":"component---src-templates-blog-post-js","path":"/Swift/04-basic-operators/","result":{"data":{"site":{"siteMetadata":{"title":"Hun's Footsteps 🥷","author":"전여훈","siteUrl":"https://jeonyeohun.github.io","comment":{"disqusShortName":"","utterances":"jeonyeohun/jeonyeohun.github.io"},"sponsor":{"buyMeACoffeeId":"jeonyeohun"}}},"markdownRemark":{"id":"d68d3856-a194-506a-8122-f46c3159ff5c","excerpt":"Basic Operators https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html Terminology Operator는 , ,  세 가지 종류로 구분할 수 있다. 는 피연산자를 하나만 가지는 연산자이다. 연산자가 피연산자 앞에 위치할 경우에는 , 연산자가 피연산자 뒤에 위치할 경우는 라고 한다. 는 두개의 피연산자를 가지는 연산자이다. 동시에 binary operator…","html":"<h1 id=\"basic-operators\" style=\"position:relative;\"><a href=\"#basic-operators\" aria-label=\"basic operators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basic Operators</h1>\n<blockquote>\n<p><a href=\"https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html\">https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html</a></p>\n</blockquote>\n<h2 id=\"terminology\" style=\"position:relative;\"><a href=\"#terminology\" aria-label=\"terminology permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terminology</h2>\n<ul>\n<li>Operator는 <code class=\"language-text\">unary</code>, <code class=\"language-text\">binary</code>, <code class=\"language-text\">tenary</code> 세 가지 종류로 구분할 수 있다.</li>\n<li><code class=\"language-text\">Unary operator</code>는 피연산자를 하나만 가지는 연산자이다. 연산자가 피연산자 앞에 위치할 경우에는 <code class=\"language-text\">prefix operator</code>, 연산자가 피연산자 뒤에 위치할 경우는 <code class=\"language-text\">postfix operator</code>라고 한다.</li>\n<li><code class=\"language-text\">Binary operator</code>는 두개의 피연산자를 가지는 연산자이다. 동시에 binary operator 는 <code class=\"language-text\">infix</code> 라고도 하는데, 두 피연산자 사이에 연산자가 위치하기 때문이다.</li>\n<li><code class=\"language-text\">Ternary operator</code> 는 세 개의 피연산자를 가지는 연산자이다.</li>\n</ul>\n<h2 id=\"assignment-operator\" style=\"position:relative;\"><a href=\"#assignment-operator\" aria-label=\"assignment operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assignment Operator</h2>\n<ul>\n<li>다른 언어와 마찬가지로 <code class=\"language-text\">=</code> 를 통해 대상 변수에 값을 업데이트 할 수 있다.</li>\n<li>만약 오른쪽에 여러 값을 가진 tuple이 오면, 왼쪽에는 tuple의 원소개수 만큼의 변수를 주어서 대입할 수 있다.</li>\n<li>\n<p>스위프트에서 모든 연산자는 연산자의 양쪽에 같은 개수만큼의 공백이 있어야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token comment\">// ok</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token comment\">// error</span>\n<span class=\"token keyword\">let</span> c<span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// error</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"arithmetic-operator\" style=\"position:relative;\"><a href=\"#arithmetic-operator\" aria-label=\"arithmetic operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Arithmetic Operator</h2>\n<ul>\n<li>\n<p>다른 언어와 마찬가지로 사칙연산과 모듈로 연산을 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> addition <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token comment\">// 3</span>\n<span class=\"token keyword\">let</span> subtraction <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span> <span class=\"token comment\">// -1</span>\n<span class=\"token keyword\">let</span> multiplication <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token comment\">// 2</span>\n<span class=\"token keyword\">let</span> division <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">2.0</span> <span class=\"token comment\">// 0.5</span>\n<span class=\"token keyword\">let</span> modulus <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">%</span> <span class=\"token number\">2.0</span> <span class=\"token comment\">// 1</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">+</code> 연산자는 문자열을 합치는 연산으로도 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> stringConcat <span class=\"token operator\">=</span> <span class=\"token string\">\"hello \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"world\"</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"unary-minus-operator\" style=\"position:relative;\"><a href=\"#unary-minus-operator\" aria-label=\"unary minus operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unary Minus Operator</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">unary minus</code> 연산은 피연산자앞에 <code class=\"language-text\">-</code> 를 붙여 사용할 수 있다. 공백없이 붙여 써야하며 피연산자에 -1을 곱한 결과를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> three <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">let</span> minusThree <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>three <span class=\"token comment\">// -3</span>\n<span class=\"token keyword\">let</span> plusThree <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>minusThree <span class=\"token comment\">// 3</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"unary-plus-operator\" style=\"position:relative;\"><a href=\"#unary-plus-operator\" aria-label=\"unary plus operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unary Plus Operator</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">unary plus</code> 연산은 피연산자에 <code class=\"language-text\">+</code>를 붙여 사용할 수 있다. 공백없이 붙여 써야하며 피연산자에 +1을 곱한 결과를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> minusSix <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> alsoMinusSix <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>minusSix <span class=\"token comment\">// -6</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"compound-assignment-operators\" style=\"position:relative;\"><a href=\"#compound-assignment-operators\" aria-label=\"compound assignment operators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compound Assignment Operators</h2>\n<ul>\n<li>C언어와 마찬가지로 <code class=\"language-text\">+=</code>, <code class=\"language-text\">-=</code>, <code class=\"language-text\">*=</code>, <code class=\"language-text\">/=</code>, <code class=\"language-text\">%=</code> 의 복합 연산자를 사용할 수 있다.</li>\n<li>\n<p>Compound Assignment oeprator는 <code class=\"language-text\">리턴값을 가지지 않는다</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\na <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\">// a == 3</span>\n\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> a<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token comment\">// error</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"comparison-operators\" style=\"position:relative;\"><a href=\"#comparison-operators\" aria-label=\"comparison operators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comparison Operators</h2>\n<ul>\n<li>\n<p>스위프트가 제공하는 비교연산은 아래와 같다.</p>\n<ul>\n<li>Equal to <code class=\"language-text\">(a == b)</code></li>\n<li>Not equal to <code class=\"language-text\">(a != b)</code></li>\n<li>Greater than <code class=\"language-text\">(a &gt; b)</code></li>\n<li>Less than <code class=\"language-text\">(a &lt; b)</code></li>\n<li>Greater than or equal to <code class=\"language-text\">(a &gt;= b)</code></li>\n<li>Less than or equal to <code class=\"language-text\">(a &lt;= b)</code></li>\n<li>Reference is eqaul to <code class=\"language-text\">(a === b)</code></li>\n<li>Reference is not eqaul to <code class=\"language-text\">(a !== b)</code></li>\n</ul>\n</li>\n<li>\n<p>비교 연산자는 두 tuple을 비교할 때도 사용할 수 있다. tuple의 가장 왼쪽 요소부터 하나씩 서로 비교해가면서 두 값이 같지 않을 때까지 비교연산을 진행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"zebra\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// true. 1이 2보다 작기때문에 true가 되고 첫번째 비교연산을 통해 비교가 끝났기 때문에 두번째 tuple 요소에 대한 비교연산은 수행하지 않는다.</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bird\"</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// true. 첫번째 요소인 3이 같기 때문에 다음요소로 넘어가고 apple은 bird보다 알파벳 순서상 작기때문에 true가 된다.</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// true. tuple 내의 모든 요소들의 값이 같기 때문에 true가 된다.</span></code></pre></div>\n</li>\n<li>\n<p>tuple에 비교연산을 수행할 때는, tuple 내부에 있는 값의 타입을 고려해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"purple\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ok</span>\n<span class=\"token punctuation\">(</span><span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"purple\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// error. Bool 타입은 &lt; 연산이 불가능하다.</span></code></pre></div>\n</li>\n<li>tuple 에 대한 비교연산은 최대 6개의 요소를 가지는 tuple에 대해서만 지원한다. 7개 이상의 요소를 가지는 tuple에 비교연산을 수행하려면 비교연산자를 직접 정의해야한다.</li>\n</ul>\n<h2 id=\"ternary-conditional-operator\" style=\"position:relative;\"><a href=\"#ternary-conditional-operator\" aria-label=\"ternary conditional operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ternary Conditional Operator</h2>\n<ul>\n<li>C언어처럼 <code class=\"language-text\">question ? answer1 : answer2</code> 의 형태로 정의한다. question이 <code class=\"language-text\">true</code>면 answer1 을 사용하고, <code class=\"language-text\">false</code>면 answer2를 사용한다.</li>\n<li>Ternary Conditional 연산을 사용하면 코드를 짧고 간단하게 작성할 수 있지만, 과도하게 사용하면 오히려 가독성이 떨어지는 코드가 될 수 있다.</li>\n</ul>\n<h2 id=\"nil-coalescing-operator\" style=\"position:relative;\"><a href=\"#nil-coalescing-operator\" aria-label=\"nil coalescing operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nil-Coalescing Operator</h2>\n<ul>\n<li><code class=\"language-text\">nil-coalescing</code> 연산은 <code class=\"language-text\">a ?? b</code> 로 작성할 수 있고, 만약 optional 변수 <code class=\"language-text\">a</code>에 값이 있다면 a를 unwrap 하여 내부 값을 반환하고, a가 nil이라면 <code class=\"language-text\">b</code>의 값을 반환한다.</li>\n<li>\n<p>아래 코드를 단축어로 만든 것과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">a <span class=\"token operator\">!=</span> <span class=\"token constant\">nil</span> <span class=\"token operator\">?</span> a<span class=\"token operator\">!</span> <span class=\"token punctuation\">:</span> b</code></pre></div>\n</li>\n<li>\n<p>이 연산을 사용해서 변수의 기본 값을 설정해주는 코드를 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> defaultColorName <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span>\n<span class=\"token keyword\">var</span> userDefinedColorName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span>\n\n<span class=\"token keyword\">var</span> colorNameToUse <span class=\"token operator\">=</span> userDefinedColorName <span class=\"token operator\">?</span><span class=\"token operator\">?</span> defaultColorName</code></pre></div>\n</li>\n</ul>\n<h2 id=\"range-operators\" style=\"position:relative;\"><a href=\"#range-operators\" aria-label=\"range operators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Range Operators</h2>\n<h3 id=\"closed-range-operator\" style=\"position:relative;\"><a href=\"#closed-range-operator\" aria-label=\"closed range operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Closed Range Operator</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">a...b</code> 연산자를 통해 a와 b를 포함해 a부터 b까지로 범위를 지정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">5</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>index<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// index: 1</span>\n<span class=\"token comment\">// index: 2</span>\n<span class=\"token comment\">// index: 3</span>\n<span class=\"token comment\">// index: 4</span>\n<span class=\"token comment\">// index: 5</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"half-open-range-operator\" style=\"position:relative;\"><a href=\"#half-open-range-operator\" aria-label=\"half open range operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Half-Open Range Operator</h3>\n<ul>\n<li><code class=\"language-text\">a..&lt;b</code> 연산자를 통해 a는 포함하고 b는 포함하지 않는 범위를 지정할 수 있다.</li>\n<li>\n<p>배열의 인덱스가 0부터 시작하기 때문에 모든 배열요소를 탐색하는데 유용하게 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Anna\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Alex\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Brian\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> <span class=\"token builtin\">count</span> <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">count</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Person <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token delimiter variable\">)</span></span> is called <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>names<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Person 1 is called Anna</span>\n<span class=\"token comment\">// Person 2 is called Alex</span>\n<span class=\"token comment\">// Person 3 is called Brian</span>\n<span class=\"token comment\">// Person 4 is called Jack</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"one-sided-ranges\" style=\"position:relative;\"><a href=\"#one-sided-ranges\" aria-label=\"one sided ranges permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>One-Sided Ranges</h3>\n<ul>\n<li>\n<p>one-sided range 를 사용해서 배열에 접근하는 것도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> names<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// names 배열의 2번째 인덱스부터 끝까지 접근해서 값을 name에 저장한다.</span>\n\n<span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> names<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// names 배열의 0번째 인덱스부터 2번째 인덱스까지 접근해서 값을 name에 저장한다.</span></code></pre></div>\n</li>\n<li>\n<p>half-open range 와 섞어서 사용할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> names<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 2번째 인덱스는 포함하지 않는다.</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"logical-operators\" style=\"position:relative;\"><a href=\"#logical-operators\" aria-label=\"logical operators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logical Operators</h2>\n<h3 id=\"logical-not-operator\" style=\"position:relative;\"><a href=\"#logical-not-operator\" aria-label=\"logical not operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logical NOT Operator</h3>\n<ul>\n<li>\n<p>NOT 은 <code class=\"language-text\">!</code>를 값 앞에 붙여주는 것으로 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> allowedEntry <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>allowedEntry <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ACCESS DENIED\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Prints \"ACCESS DENIED\"</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"logical-and-operator\" style=\"position:relative;\"><a href=\"#logical-and-operator\" aria-label=\"logical and operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logical AND Operator</h3>\n<ul>\n<li>AND는 <code class=\"language-text\">&amp;&amp;</code> 를 두 값 사이에 넣어주는 것으로 사용할 수 있다. 양쪽 값이 모두 true일 때만 true를 반환한다.</li>\n<li>\n<p>첫번째 값이 false면 두번째 값은 체크하지 않고 곧바로 false를 반환한다. 이런 방식의 계산을 <code class=\"language-text\">short-circuit evaluation</code>이라고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> enteredDoorCode <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">let</span> passedRetinaScan <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token keyword\">if</span> enteredDoorCode <span class=\"token operator\">&amp;&amp;</span> passedRetinaScan <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ACCESS DENIED\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Prints \"ACCESS DENIED\"</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"logical-or-operator\" style=\"position:relative;\"><a href=\"#logical-or-operator\" aria-label=\"logical or operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logical OR Operator</h3>\n<ul>\n<li>OR는 <code class=\"language-text\">||</code> 를 두 값 사이에 넣어주는 것으로 사용할 수 있다. 양쪽 값 중 하나라도 true면 true를 반환한다.</li>\n<li>\n<p>short-circuit evaluation은 OR 연산에도 적용된다. 만약 첫번째 값이 true 라면, 두번째 값을 검사하지 않고 곧바로 true를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> hasDoorKey <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token keyword\">let</span> knowsOverridePassword <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">if</span> hasDoorKey <span class=\"token operator\">||</span> knowsOverridePassword <span class=\"token punctuation\">{</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ACCESS DENIED\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Prints \"Welcome!\"</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"combining-logical-operators\" style=\"position:relative;\"><a href=\"#combining-logical-operators\" aria-label=\"combining logical operators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Combining Logical Operators</h3>\n<ul>\n<li>스위프트의 논리연산은 항상 왼쪽 값을 기준으로 진행된다. 여러개의 논리연산이 합쳐져 있는 경우에는 가장 왼쪽의 논리연산이 먼저 수행된다.</li>\n</ul>\n<h3 id=\"explicit-parentheses\" style=\"position:relative;\"><a href=\"#explicit-parentheses\" aria-label=\"explicit parentheses permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Explicit Parentheses</h3>\n<ul>\n<li>\n<p>복합 논리연산에 괄호를 사용하면 더 가독성이 좋은 코드를 생산할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>enteredDoorCode <span class=\"token operator\">&amp;&amp;</span> passedRetinaScan<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> hasDoorKey <span class=\"token operator\">||</span> knowsOverridePassword <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ACCESS DENIED\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Prints \"Welcome!\"</span></code></pre></div>\n<p>AND 연산과 OR 연산 사이에 괄호는 반드시 필요하지 않지만 괄호를 사용하면 개발자의 의도를 더 명확하게 표현할 수 있다.</p>\n</li>\n</ul>","frontmatter":{"title":"[공식문서로 Swift 공부하기] 4. Basic Operators","date":"June 26, 2021"}}},"pageContext":{"slug":"/Swift/04-basic-operators/","previous":{"fields":{"slug":"/Swift/03-the-basics/"},"frontmatter":{"title":"[공식문서로 Swift 공부하기] 3. The Basics","category":"Swift","draft":false}},"next":{"fields":{"slug":"/Swift/05-strings-and-charaters/"},"frontmatter":{"title":"[공식문서로 Swift 공부하기] 5. Strings and Characters","category":"Swift","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}