{"componentChunkName":"component---src-templates-blog-post-js","path":"/Swift/07-control-flow/","result":{"data":{"site":{"siteMetadata":{"title":"Hun's Footsteps 🥷","author":"전여훈","siteUrl":"https://jeonyeohun.github.io","comment":{"disqusShortName":"","utterances":"jeonyeohun/jeonyeohun.github.io"},"sponsor":{"buyMeACoffeeId":"jeonyeohun"}}},"markdownRemark":{"id":"fdd8e4d7-0569-58bb-9db7-e53c36817690","excerpt":"Control Flow For-In Loops 배열의 요소나, 범위 내의 숫자, 문자열의 문자를 순차적으로 순회하기 위해서  구문을 사용할 수 있다. dictionary 타입의 변수가 가진 (key, value) 튜플을 순회하는 용도로 사용할 수도 있다. Collection Types 챕터에서 이미 다루었지만, 딕셔너리는 순서를 보장하지 않기 때문에, for-in…","html":"<h1 id=\"control-flow\" style=\"position:relative;\"><a href=\"#control-flow\" aria-label=\"control flow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Control Flow</h1>\n<h2 id=\"for-in-loops\" style=\"position:relative;\"><a href=\"#for-in-loops\" aria-label=\"for in loops permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>For-In Loops</h2>\n<ul>\n<li>\n<p>배열의 요소나, 범위 내의 숫자, 문자열의 문자를 순차적으로 순회하기 위해서 <code class=\"language-text\">for-in</code> 구문을 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Anna\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Alex\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Brian\"</span><span class=\"token punctuation\">,</span> \"<span class=\"token builtin\">Jack</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> names <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>name<span class=\"token delimiter variable\">)</span></span>!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>dictionary 타입의 변수가 가진 (key, value) 튜플을 순회하는 용도로 사용할 수도 있다. Collection Types 챕터에서 이미 다루었지만, 딕셔너리는 순서를 보장하지 않기 때문에, for-in을 통해서 순회할 때마다 다른 순서로 튜플들이 나올 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> numberOfLegs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"spider\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ant\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>animalName<span class=\"token punctuation\">,</span> legCount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> numberOfLegs <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>animalName<span class=\"token delimiter variable\">)</span></span>s have <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>legCount<span class=\"token delimiter variable\">)</span></span> legs\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>범위 연산자 (<code class=\"language-text\">..&lt;</code>, <code class=\"language-text\">...</code>) 를 사용하면 범위 내의 숫자를 순회하는 것도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">5</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// 4</span>\n<span class=\"token comment\">// 5</span></code></pre></div>\n</li>\n<li>\n<p>만약 범위 연산자를 이용해서 루프 횟수를 지정할 때 인덱스 값이 필요가 없다면 <code class=\"language-text\">언더스코어(_)</code> 를 사용하면 무시할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> base <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">let</span> power <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">var</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">for</span> <span class=\"token number\">_</span> <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>power <span class=\"token punctuation\">{</span>\n  answer <span class=\"token operator\">*</span><span class=\"token operator\">=</span> base\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>base<span class=\"token delimiter variable\">)</span></span> to the power of <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>power<span class=\"token delimiter variable\">)</span></span> is <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>answer<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"3 to the power of 10 is 59049\"</span></code></pre></div>\n</li>\n<li>\n<p>만약 범위 내의 숫자를 특정 개수만큼 건너뛰면서 접근하고 싶다면, <code class=\"language-text\">stride()</code> 함수를 사용할 수 있다. form 부터 to 까지 <code class=\"language-text\">half-open</code> 으로 by씩 증가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> minuteInterval <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">let</span> minutes <span class=\"token operator\">=</span> <span class=\"token number\">60</span>\n<span class=\"token keyword\">for</span> tickMark <span class=\"token keyword\">in</span> <span class=\"token function\">stride</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">:</span> minutes<span class=\"token punctuation\">,</span> by<span class=\"token punctuation\">:</span> minuteInterval<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tickMark<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 0</span>\n<span class=\"token comment\">// 5</span>\n<span class=\"token comment\">// 10</span>\n<span class=\"token comment\">// 15</span>\n<span class=\"token comment\">// ... 55까지 출력된다.</span></code></pre></div>\n</li>\n<li>\n<p>half-open이 아닌 <code class=\"language-text\">closed</code>를 사용하려면 stride 함수를 사용할 때, 두번째 파라메터를 to 대신 <code class=\"language-text\">through</code>를 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> hours <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n<span class=\"token keyword\">let</span> hourInterval <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">for</span> tickMark <span class=\"token keyword\">in</span> <span class=\"token builtin\">stride</span> <span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> through<span class=\"token punctuation\">:</span> hours<span class=\"token punctuation\">,</span> by<span class=\"token punctuation\">:</span> hourInterval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>tickMark<span class=\"token delimiter variable\">)</span></span> \"</span><span class=\"token punctuation\">,</span> terminator<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 3 6 9 12</span></code></pre></div>\n</li>\n<li>for-in 구문은 Sequence 프로토콜을 conform하고 있다면 어떤 데이터 타입이던지 사용할 수 있다.</li>\n</ul>\n<h2 id=\"while-loops\" style=\"position:relative;\"><a href=\"#while-loops\" aria-label=\"while loops permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>While Loops</h2>\n<h3 id=\"while-vs-repeat-while\" style=\"position:relative;\"><a href=\"#while-vs-repeat-while\" aria-label=\"while vs repeat while permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>While vs. Repeat-While</h3>\n<ul>\n<li>While과 repeat-while 은 다른 언어의 while과 do-while의 차이와 같다.</li>\n<li>while 은 조건을 <code class=\"language-text\">먼저</code> 검사한 뒤 내부 로직을 실행하고, do-while은 내부로직은 우선 실행하고 조건을 <code class=\"language-text\">마지막에</code> 검사한다.</li>\n</ul>\n<h2 id=\"conditional-statement\" style=\"position:relative;\"><a href=\"#conditional-statement\" aria-label=\"conditional statement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conditional Statement</h2>\n<h2 id=\"if\" style=\"position:relative;\"><a href=\"#if\" aria-label=\"if permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>if</h2>\n<ul>\n<li>가장 간단한 조건문이다. C와 같은 언어들과는 다르게 조건부분에는 항상 <code class=\"language-text\">Bool</code> 타입의 데이터가 와야한다. 0, 1 같은 값을 가지는 변수는 Int 타입이기 때문에 오류가 발생한다.</li>\n<li>\n<p>이어지는 분기문은 <code class=\"language-text\">else if</code> 와 <code class=\"language-text\">else</code>를 이용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">temperatureInFahrenheit <span class=\"token operator\">=</span> <span class=\"token number\">90</span>\n<span class=\"token keyword\">if</span> temperatureInFahrenheit <span class=\"token operator\">&lt;=</span> <span class=\"token number\">32</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"It's very cold. Consider wearing a scarf.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> temperatureInFahrenheit <span class=\"token operator\">>=</span> <span class=\"token number\">86</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"It's really warm. Don't forget to wear sunscreen.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"It's not that cold. Wear a t-shirt.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"switch\" style=\"position:relative;\"><a href=\"#switch\" aria-label=\"switch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>switch</h2>\n<ul>\n<li>switch 문은 특정한 패턴을 통해서 패턴과 매칭되는 case 문의 로직을 실행한다.</li>\n<li>switch 내부에는 여러개의 case가 존재할 수 있고, <code class=\"language-text\">case 패턴1, 패턴2:</code> 로 작성할 수 있다.</li>\n<li>\n<p>switch 는 무조건 하나의 case에는 도달해야한다. 따라서 <code class=\"language-text\">default</code> 키워드를 통해 아무 패턴과도 매치되지 않는 조건을 처리해야힌다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> someCharacter<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Character</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"z\"</span>\n<span class=\"token keyword\">switch</span> someCharacter <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The first letter of the alphabet\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token string\">\"z\"</span><span class=\"token punctuation\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The last letter of the alphabet\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some other character\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Prints \"The last letter of the alphabet\"</span></code></pre></div>\n</li>\n<li>C와 같은 언어와는 다르게 각 케이스 처리로직에 끝에 도달하면 switch 문을 빠져나간다. 즉, <code class=\"language-text\">break</code>가 필요하지 않다.</li>\n<li>\n<p>또한, case 의 body 영역을 비워둘 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> anotherCharacter<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Character</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span>\n<span class=\"token keyword\">switch</span> anotherCharacter <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">// 불가능한 코드</span>\n<span class=\"token keyword\">case</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The letter A\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not the letter A\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// This will report a compile-time error.</span></code></pre></div>\n</li>\n<li>\n<p>위와 같은 코드는 타 언어에서 여러 케이스에 동일한 로직을 적용하고 싶을 때 사용되는데, 스위프트에서는 대신 <code class=\"language-text\">,</code> 로 여러 패턴을 한 케이스에 구분하여 넣을 수 있다. 두 패턴 중 하나에만 매칭되어도 케이스가 실행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> someCharacter<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Character</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"e\"</span>\n<span class=\"token keyword\">switch</span> someCharacter <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"u\"</span><span class=\"token punctuation\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>someCharacter<span class=\"token delimiter variable\">)</span></span> is a vowel\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"f\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"h\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"j\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"k\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"l\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"m\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"p\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"q\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"v\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"y\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"z\"</span><span class=\"token punctuation\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>someCharacter<span class=\"token delimiter variable\">)</span></span> is a consonant\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>someCharacter<span class=\"token delimiter variable\">)</span></span> isn't a vowel or a consonant\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Prints \"e is a vowel\"</span></code></pre></div>\n</li>\n<li>\n<p>이렇게 하는 이유는 개발자가 의도하지 않은 <code class=\"language-text\">fall through</code> 를 방지하기 위해서이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> anotherCharacter<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Character</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span>\n<span class=\"token keyword\">switch</span> anotherCharacter <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The letter A\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not the letter A\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Prints \"The letter A\"</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"interval-matching\" style=\"position:relative;\"><a href=\"#interval-matching\" aria-label=\"interval matching permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interval Matching</h3>\n<ul>\n<li>\n<p>switch 와 범위 연산자를 사용하면 가독성이 매우 좋은 조건문을 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> approximateCount <span class=\"token operator\">=</span> <span class=\"token number\">62</span>\n<span class=\"token keyword\">let</span> countedThings <span class=\"token operator\">=</span> <span class=\"token string\">\"moons orbiting Saturn\"</span>\n<span class=\"token keyword\">let</span> naturalCount<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token keyword\">switch</span> approximateCount <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n  naturalCount <span class=\"token operator\">=</span> <span class=\"token string\">\"no\"</span>\n<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span>\n  naturalCount <span class=\"token operator\">=</span> <span class=\"token string\">\"a few\"</span>\n<span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token number\">12</span><span class=\"token punctuation\">:</span>\n  naturalCount <span class=\"token operator\">=</span> <span class=\"token string\">\"several\"</span>\n<span class=\"token keyword\">case</span> <span class=\"token number\">12</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">:</span>\n  naturalCount <span class=\"token operator\">=</span> <span class=\"token string\">\"dozens of\"</span>\n<span class=\"token keyword\">case</span> <span class=\"token number\">100</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token number\">1000</span><span class=\"token punctuation\">:</span>\n  naturalCount <span class=\"token operator\">=</span> <span class=\"token string\">\"hundreds of\"</span>\n<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n  naturalCount <span class=\"token operator\">=</span> <span class=\"token string\">\"many\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"There are <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>naturalCount<span class=\"token delimiter variable\">)</span></span> <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>countedThings<span class=\"token delimiter variable\">)</span></span>.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"There are dozens of moons orbiting Saturn.\"</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"tuples\" style=\"position:relative;\"><a href=\"#tuples\" aria-label=\"tuples permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tuples</h3>\n<ul>\n<li>case 의 패턴에 튜플을 사용할 수 있다.</li>\n<li>\n<p>tuple 내부에는 범위 연산자도 올 수 있고, 어느 값이든 무조건 매칭되게 만드려면 <code class=\"language-text\">언더스코어(_)</code> 를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> somePoint <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">switch</span> somePoint <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>somePoint<span class=\"token delimiter variable\">)</span></span> is at the origin\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span><span class=\"token number\">_</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>somePoint<span class=\"token delimiter variable\">)</span></span> is on the x-axis\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">_</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>somePoint<span class=\"token delimiter variable\">)</span></span> is on the y-axis\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>somePoint<span class=\"token delimiter variable\">)</span></span> is inside the box\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>somePoint<span class=\"token delimiter variable\">)</span></span> is outside of the box\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Prints \"(1, 1) is inside the box\"</span></code></pre></div>\n</li>\n<li>위 예에서 somePoint 를 (0, 0) 으로 바꾼다면, 모든 케이스들과 매칭이 된다. 하지만 <code class=\"language-text\">가장 먼저 매칭되는 케이스</code>의 로직을 수행한다. 이 로직이 수행되면 자동으로 switch 문에서 빠져나오기 때문에 나머지 케이스들과의 매칭은 무시한다.</li>\n</ul>\n<h3 id=\"value-bindings\" style=\"position:relative;\"><a href=\"#value-bindings\" aria-label=\"value bindings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Value Bindings</h3>\n<ul>\n<li>\n<p>switch 문에서는 케이스의 body에서 매칭된 값을 사용할 수 있도록 변수를 선언할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> anotherPoint <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">switch</span> anotherPoint <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"on the x-axis with an x value of <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>x<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">let</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"on the y-axis with a y value of <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>y<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"somewhere else at (<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>x<span class=\"token delimiter variable\">)</span></span>, <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>y<span class=\"token delimiter variable\">)</span></span>)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Prints \"on the x-axis with an x value of 2\"</span></code></pre></div>\n</li>\n<li>변수가 선언된 튜플 요소는 아무 패턴이나 다 받을 수 있다. 따라서 두번쨰 요소인 0과 매치만 되면 이 케이스에 매칭되고, x변수에 2라는 값이 할당된다.</li>\n<li>위 예시의 경우에는 default 케이스가 필요없다. 모든 패턴은 항상 마지막 케이스인 let (x, y)에 마지막으로 매칭된다. 따라서 예외 패턴이 발생할 수가 없다.</li>\n</ul>\n<h3 id=\"where\" style=\"position:relative;\"><a href=\"#where\" aria-label=\"where permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Where</h3>\n<ul>\n<li>\n<p>스위프트의 switch 는 패턴에 조건을 추가적으로 붙여서 사용할 수 있다. case 의 패턴 옆에 <code class=\"language-text\">where</code> 키워드를 붙여 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> yetAnotherPoint <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">switch</span> yetAnotherPoint <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span> x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>x<span class=\"token delimiter variable\">)</span></span>, <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>y<span class=\"token delimiter variable\">)</span></span>) is on the line x == y\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span> x <span class=\"token operator\">==</span> <span class=\"token operator\">-</span>y<span class=\"token punctuation\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>x<span class=\"token delimiter variable\">)</span></span>, <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>y<span class=\"token delimiter variable\">)</span></span>) is on the line x == -y\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>x<span class=\"token delimiter variable\">)</span></span>, <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>y<span class=\"token delimiter variable\">)</span></span>) is just some arbitrary point\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Prints \"(1, -1) is on the line x == -y\"</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"control-transfer-statement\" style=\"position:relative;\"><a href=\"#control-transfer-statement\" aria-label=\"control transfer statement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Control Transfer Statement</h2>\n<h3 id=\"continue\" style=\"position:relative;\"><a href=\"#continue\" aria-label=\"continue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Continue</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">continue</code> 키워드는 루프 내에서 더 이상 로직을 진행하지 않고 다음번 iteration 으로 넘어가는 것을 의미한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> puzzleInput <span class=\"token operator\">=</span> <span class=\"token string\">\"great minds think alike\"</span>\n<span class=\"token keyword\">var</span> puzzleOutput <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token keyword\">let</span> charactersToRemove<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Character</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"u\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> character <span class=\"token keyword\">in</span> puzzleInput <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> charactersToRemove<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">continue</span>\n  <span class=\"token punctuation\">}</span>\n  puzzleOutput<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>puzzleOutput<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"grtmndsthnklk\"</span></code></pre></div>\n</li>\n<li>이렇게 사용하면 모음을 만나면 continue를 통해 더 이상 진행하지 않고 다음 반복으로 넘어가므로 모음을 제외한 문자를 모두 출력하게 된다.</li>\n</ul>\n<h3 id=\"break\" style=\"position:relative;\"><a href=\"#break\" aria-label=\"break permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Break</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">break</code>는 우리가 잘 아는대로 반복문을 완전히 빠져나가는 용도로 사용된다. 이 키워드를 포함하고 있는 가장 가까운 반복문 블록을 빠져나간다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> numberSymbol<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Character</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"三\"</span>  <span class=\"token comment\">// Chinese symbol for the number 3</span>\n<span class=\"token keyword\">var</span> possibleIntegerValue<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token operator\">?</span>\n<span class=\"token keyword\">switch</span> numberSymbol <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"١\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"一\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"๑\"</span><span class=\"token punctuation\">:</span>\n  possibleIntegerValue <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">case</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"٢\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"二\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"๒\"</span><span class=\"token punctuation\">:</span>\n  possibleIntegerValue <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">case</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"٣\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"三\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"๓\"</span><span class=\"token punctuation\">:</span>\n  possibleIntegerValue <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">case</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"٤\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"四\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"๔\"</span><span class=\"token punctuation\">:</span>\n  possibleIntegerValue <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">break</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> integerValue <span class=\"token operator\">=</span> possibleIntegerValue <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The integer value of <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>numberSymbol<span class=\"token delimiter variable\">)</span></span> is <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>integerValue<span class=\"token delimiter variable\">)</span></span>.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"An integer value couldn't be found for <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>numberSymbol<span class=\"token delimiter variable\">)</span></span>.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Prints \"The integer value of 三 is 3.\"</span></code></pre></div>\n</li>\n<li>위 예시에서는 default에 break가 들어갔다. 스위프트의 switch는 예외케이스가 있으면 안되기 때문에 모든 예외 케이스를 처리하기 위해 default를 쓰고, 빈 body를 만들 수 없기 때문에 별도의 로직없이 switch를 끝내기 위해 break를 사용했다.</li>\n</ul>\n<h3 id=\"fallthrough\" style=\"position:relative;\"><a href=\"#fallthrough\" aria-label=\"fallthrough permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fallthrough</h3>\n<ul>\n<li>\n<p>fallthrough 는 스위치의 케이스 바디에 마지막에 위치했을 때, 스위치문을 끝내지 않고 다음에 위치한 케이스로 이동한다. C에서 break를 케이스 바디에 포함시키지 않았을 때의 동작과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> integerToDescribe <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">var</span> description <span class=\"token operator\">=</span> <span class=\"token string\">\"The number <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>integerToDescribe<span class=\"token delimiter variable\">)</span></span> is\"</span>\n<span class=\"token keyword\">switch</span> integerToDescribe <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">:</span>\n  description <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">\" a prime number, and also\"</span>\n  <span class=\"token keyword\">fallthrough</span>\n<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n  description <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">\" an integer.\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>description<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"The number 5 is a prime number, and also an integer.\"</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"labeled-statements\" style=\"position:relative;\"><a href=\"#labeled-statements\" aria-label=\"labeled statements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Labeled Statements</h3>\n<ul>\n<li>스위프트에서는 <code class=\"language-text\">statement label</code>을 통해서 루프나 조건문에 라벨링을 할 수 있다.</li>\n<li>여러 루프가 중첩되어 있을 때 라벨을 통해 쉽게 break 나 continue를 사용할 수 있다.</li>\n<li>\n<p>Labeled Statement 는 다음과 같이 만든다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">label name<span class=\"token punctuation\">:</span> <span class=\"token keyword\">while</span> condition <span class=\"token punctuation\">{</span>\n  statements\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>아래 예시를 살펴보자</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> finalSquare <span class=\"token operator\">=</span> <span class=\"token number\">25</span>\n<span class=\"token keyword\">var</span> board <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>repeating<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">count</span><span class=\"token punctuation\">:</span> finalSquare <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nboard<span class=\"token punctuation\">[</span><span class=\"token number\">03</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token number\">08</span><span class=\"token punctuation\">;</span> board<span class=\"token punctuation\">[</span><span class=\"token number\">06</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token number\">11</span><span class=\"token punctuation\">;</span> board<span class=\"token punctuation\">[</span><span class=\"token number\">09</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token number\">09</span><span class=\"token punctuation\">;</span> board<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token number\">02</span>\nboard<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> board<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">11</span><span class=\"token punctuation\">;</span> board<span class=\"token punctuation\">[</span><span class=\"token number\">22</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">02</span><span class=\"token punctuation\">;</span> board<span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">08</span>\n<span class=\"token keyword\">var</span> square <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">var</span> diceRoll <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\ngameLoop<span class=\"token punctuation\">:</span> <span class=\"token keyword\">while</span> square <span class=\"token operator\">!=</span> finalSquare <span class=\"token punctuation\">{</span>\n    diceRoll <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">if</span> diceRoll <span class=\"token operator\">==</span> <span class=\"token number\">7</span> <span class=\"token punctuation\">{</span> diceRoll <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">switch</span> square <span class=\"token operator\">+</span> diceRoll <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> finalSquare<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">// diceRoll will move us to the final square, so the game is over</span>\n        <span class=\"token keyword\">break</span> gameLoop\n    <span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> newSquare <span class=\"token keyword\">where</span> newSquare <span class=\"token operator\">></span> finalSquare<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">// diceRoll will move us beyond the final square, so roll again</span>\n        <span class=\"token keyword\">continue</span> gameLoop\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">// this is a valid move, so find out its effect</span>\n        square <span class=\"token operator\">+</span><span class=\"token operator\">=</span> diceRoll\n        square <span class=\"token operator\">+</span><span class=\"token operator\">=</span> board<span class=\"token punctuation\">[</span>square<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Game over!\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>gameLoop 로 라벨이 붙은 while 문을 case 내부에서 break와 함께 사용한다.</li>\n<li>break gameLoop 로 작성되었기 때문에 케이스의 끝에 도달하면 switch 문을 빠져나오는 것이 아니라 gameLoop 로 라벨링된 루프전체를 빠져나오게 된다.</li>\n</ul>\n<h2 id=\"early-exit\" style=\"position:relative;\"><a href=\"#early-exit\" aria-label=\"early exit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Early Exit</h2>\n<ul>\n<li><code class=\"language-text\">guard</code> 문을 사용하면 guard 키워드 뒤에 오는 조건이 참일 때만 전체 블록을 실행하게끔 할 수 있다.</li>\n<li>\n<p>guard 의 조건 뒤에는 항상 else 문이 따라와야 한다. 이 else 구문은 guard 이후의 조건이 거짓을 때 실행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> person<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>name<span class=\"token delimiter variable\">)</span></span>!\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> location <span class=\"token operator\">=</span> person<span class=\"token punctuation\">[</span><span class=\"token string\">\"location\"</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I hope the weather is nice near you.\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I hope the weather is nice in <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>location<span class=\"token delimiter variable\">)</span></span>.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"Hello John!\"</span>\n<span class=\"token comment\">// Prints \"I hope the weather is nice near you.\"</span>\n<span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Jane\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"location\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Cupertino\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"Hello Jane!\"</span>\n<span class=\"token comment\">// Prints \"I hope the weather is nice in Cupertino.\"</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"checking-api-availability\" style=\"position:relative;\"><a href=\"#checking-api-availability\" aria-label=\"checking api availability permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Checking API Availability</h2>\n<ul>\n<li>\n<p>스위프트는 OS 타켓 버전에 따라 사용가능한 API인지 먼저 체크한 뒤에 실행하도록 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> #<span class=\"token function\">available</span><span class=\"token punctuation\">(</span>platform name version<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  statements to execute <span class=\"token keyword\">if</span> the <span class=\"token builtin\">APIs</span> are available\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  fallback statements to execute <span class=\"token keyword\">if</span> the <span class=\"token builtin\">APIs</span> are unavailable\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>","frontmatter":{"title":"[공식문서로 Swift 공부하기] 7. Control Flow","date":"July 14, 2021"}}},"pageContext":{"slug":"/Swift/07-control-flow/","previous":{"fields":{"slug":"/Problem-Solving/[백준-알고리즘]-12015번-LIS2/"},"frontmatter":{"title":"[백준 알고리즘] 12015: 가장 긴 증가하는 부분 수열 2","category":"Problem-Solving","draft":false}},"next":{"fields":{"slug":"/Swift/08-functions/"},"frontmatter":{"title":"[공식문서로 Swift 공부하기] 8. Functions","category":"Swift","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}