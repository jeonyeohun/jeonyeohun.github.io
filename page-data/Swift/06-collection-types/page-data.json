{"componentChunkName":"component---src-templates-blog-post-js","path":"/Swift/06-collection-types/","result":{"data":{"site":{"siteMetadata":{"title":"Hun's Footsteps 🥷","author":"전여훈","siteUrl":"https://jeonyeohun.github.io","comment":{"disqusShortName":"","utterances":"jeonyeohun/jeonyeohun.github.io"},"sponsor":{"buyMeACoffeeId":"jeonyeohun"}}},"markdownRemark":{"id":"084971d9-e924-5183-aeb3-6e7556ebb427","excerpt":"Collection Types https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html 스위프트는 크게 , , 를 collection 타입으로 가진다. Array 는  콜렉션이다. Set 은  들의 콜렉션이다. Dictionary는   의 콜렉션이다. Array, Set, Dictionary는 모두 generic collection으로 구현되어있다. Mutability of Collections…","html":"<h1 id=\"collection-types\" style=\"position:relative;\"><a href=\"#collection-types\" aria-label=\"collection types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Collection Types</h1>\n<blockquote>\n<p><a href=\"https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html\">https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html</a></p>\n</blockquote>\n<ul>\n<li>스위프트는 크게 <code class=\"language-text\">array</code>, <code class=\"language-text\">set</code>, <code class=\"language-text\">dictionary</code>를 collection 타입으로 가진다.</li>\n<li>Array 는 <code class=\"language-text\">순서가 정해진</code> 콜렉션이다.</li>\n<li>Set 은 <code class=\"language-text\">순서가 정해져 있지 않은</code> <code class=\"language-text\">고유한 값</code>들의 콜렉션이다.</li>\n<li>Dictionary는 <code class=\"language-text\">순서가 정해져 있지 않은</code> <code class=\"language-text\">key-value</code> 의 콜렉션이다.</li>\n<li>Array, Set, Dictionary는 모두 generic collection으로 구현되어있다.</li>\n</ul>\n<h2 id=\"mutability-of-collections\" style=\"position:relative;\"><a href=\"#mutability-of-collections\" aria-label=\"mutability of collections permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mutability of Collections</h2>\n<ul>\n<li>다른 데이터타입과 마찬가지로 콜레션 타입 역시 변수에 저장되는지, 상수에 저장되는지에 따라 수정가능 여부가 달라진다.</li>\n<li><code class=\"language-text\">let</code> 으로 선언된 콜렉션 타입은 변경이 불가능하고, <code class=\"language-text\">var</code>로 선언된 콜렉션 타입은 변경이 가능하다.</li>\n<li>따라서 변경될 가능성이 없는 콜렉션은 <code class=\"language-text\">let</code>으로 선언하는 것이 바람직하다.</li>\n</ul>\n<h2 id=\"arrays\" style=\"position:relative;\"><a href=\"#arrays\" aria-label=\"arrays permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Arrays</h2>\n<ul>\n<li>배열은 같은 타입의 값들을 순서가 정해진 리스트에 넣어 관리한다.</li>\n<li>서로 중복되는 값들이 배열 요소에 들어가는 것도 가능하다.</li>\n<li>스위프트의 Array 타입은 Foundation의 <code class=\"language-text\">NSArray</code> 클래스와 연결(bridge) 되어 있다.</li>\n</ul>\n<h3 id=\"array-type-shorthand-syntax\" style=\"position:relative;\"><a href=\"#array-type-shorthand-syntax\" aria-label=\"array type shorthand syntax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array Type Shorthand Syntax</h3>\n<ul>\n<li>새로운 배열을 선언할 때는 <code class=\"language-text\">Array&lt;Element&gt;</code>로 작성한다. Element는 배열에 담을 값들의 타입이다.</li>\n<li>이를 더 간단하게 작성하면 <code class=\"language-text\">[Element]</code>로 작성할 수 있다. 이 shorthand 방식이 더 선호된다.</li>\n</ul>\n<h3 id=\"creating-an-empty-array\" style=\"position:relative;\"><a href=\"#creating-an-empty-array\" aria-label=\"creating an empty array permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating an Empty Array</h3>\n<ul>\n<li>\n<p>빈 배열은 다음과 같이 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> someInts<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre></div>\n<blockquote>\n<p>비어있는 Int형 데이터를 담을 수 있는 배열을 만들었다.</p>\n</blockquote>\n</li>\n<li>\n<p>만약 어떤 변수가 이미 타입정보를 가지고 있다면, 단순히 <code class=\"language-text\">[]</code> 를 대입하는 것으로 비어있는 배열로 초기화할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">someInts<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nsomeInts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 따로 타입명시를 하지 않아도 된다.</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"creating-an-array-with-a-default-value\" style=\"position:relative;\"><a href=\"#creating-an-array-with-a-default-value\" aria-label=\"creating an array with a default value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating an Array with a Default Value</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">Initializer</code>를 통해서 특정한 길이의 배열에 특정한 값을 채워 초기화 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> threeDoubles <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>repeating<span class=\"token punctuation\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">count</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"creating-an-array-by-adding-two-arrays-together\" style=\"position:relative;\"><a href=\"#creating-an-array-by-adding-two-arrays-together\" aria-label=\"creating an array by adding two arrays together permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating an Array by Adding Two Arrays Together</h3>\n<ul>\n<li>\n<p>두 개의 배열을 더해 두 배열의 모든 요소들이 포함된 새로운 <code class=\"language-text\">하나의 배열</code>을 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> anotherThreeDoubles <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>repeating<span class=\"token punctuation\">:</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">count</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> sixDoubles <span class=\"token operator\">=</span> threeDoubles <span class=\"token operator\">+</span> anotherThreeDoubles <span class=\"token comment\">// [0.0, 0.0, 0.0, 2.5, 2.5, 2.5]</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"creating-an-array-with-an-array-literal\" style=\"position:relative;\"><a href=\"#creating-an-array-with-an-array-literal\" aria-label=\"creating an array with an array literal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating an Array with an Array Literal</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">Array Literal</code>을 사용해서 배열을 초기화할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> shoppingList<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Eggs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Milk\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n<li>Array Literal을 사용해서 배열을 선언할 때도 <code class=\"language-text\">타입 추론</code>이 가능하기 때문에 타입을 꼭 명시해주지 않아도 된다.</li>\n<li>\n<p>배열 요소들의 <code class=\"language-text\">공통된 타입</code>을 가지는 배열로 선언된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> shoppingList<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Eggs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Milk\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"acessing-and-modifying-an-array\" style=\"position:relative;\"><a href=\"#acessing-and-modifying-an-array\" aria-label=\"acessing and modifying an array permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Acessing and Modifying an Array</h3>\n<ul>\n<li>Array 의 메서드와 프로퍼티를 사용하거나 subscript 문법을 사용하는 것으로 배열을 수정할 수 있다.</li>\n<li>\n<p>배열이 가진 요소 개수를 얻기 위해서는 <code class=\"language-text\">count</code> 프로퍼티를 사용한다,</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The shopping list contains <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>shoppingList<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span><span class=\"token delimiter variable\">)</span></span> items.\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>배열이 비어있는지(count 프로퍼티의 값이 0인지) 확인하기 위해서는 <code class=\"language-text\">isEmpty</code> 프로퍼티를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> shoppingList<span class=\"token punctuation\">.</span><span class=\"token builtin\">isEmpty</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The shopping list is empty\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The shopping list is not empty\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>배열에 새로운 요소를 추가할 때는 <code class=\"language-text\">append(_:)</code> 메서드를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">shoppingList<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Flour\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>요소가 하나인 배열을 기존 배열에 합쳐주는 것으로 append와 같은 결과를 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">shoppingList <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Baking Powder\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// [\"Eggs\", \"Milk\", \"Flour\", \"Baking Powder\"]</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">subscript</code> 문법을 사용해서 배열의 인덱스번호를 통해 배열의 요소 값을 얻을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> firstItem <span class=\"token operator\">=</span> shoppingList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">subscript</code> 문법을 사용하면 배열의 요소값을 변경하는 것도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> shoppingList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Six Eggs\"</span></code></pre></div>\n</li>\n<li>\n<p>범위 지정을 사용해서 여러개의 배열 요소 값을 변경할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">shoppingList<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Bananas\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Apples\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// [\"Eggs\", \"Bananas\", \"Apples\"]</span></code></pre></div>\n</li>\n<li>\n<p>배열의 특정한 위치에 새로운 값을 끼워넣고 싶다면 <code class=\"language-text\">insert(_:at:)</code> 메서드를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">shoppingList<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Maple Syrup\"</span><span class=\"token punctuation\">,</span> at<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"Maple Syrup\", \"Eggs\", \"Bananas\", \"Apples\"]</span></code></pre></div>\n</li>\n<li>\n<p>배열의 특정한 위치에 있는 값을 지우고 싶을 때는 <code class=\"language-text\">remove(at:)</code> 메서드를 사용한다. 인자로 주어진 인덱스에 있는 값을 삭제하고, <code class=\"language-text\">삭제된 값을 반환</code>한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> mapleSyrup <span class=\"token operator\">=</span> shoppingList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>at<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>shoppingList<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"Eggs\", \"Bananas\", \"Apples\"]</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>mapleSyrup<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Maple Syrup</span></code></pre></div>\n</li>\n<li>배열의 마지막 요소를 지우고자할 때는 remove(at:) 메서드를 사용하는 것 보다 <code class=\"language-text\">removeLast()</code> 메서드를 사용하는 것이 효과적이다. remove(at:) 메서드는 <code class=\"language-text\">count</code> 프로퍼티를 조회해야하는 오버헤드가 발생한다.</li>\n</ul>\n<h3 id=\"iterating-over-an-array\" style=\"position:relative;\"><a href=\"#iterating-over-an-array\" aria-label=\"iterating over an array permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Iterating Over an Array</h3>\n<ul>\n<li>\n<p>배열의 모든 요소에 접근하고 싶을 때는 <code class=\"language-text\">for-in</code> 구문을 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> shoppingList <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>배열의 요소 값과 함께 인덱스 정보가 필요하다면 <code class=\"language-text\">enumerated()</code> 메서드를 사용할 수 있다. enumerated 메서드는 0에서부터 정수를 하나씩 올려가며 요소값과 함께 tuple 형태로 반환한다. 따라서 enumerated 메서드는 인덱스 값을 반환하는 것이 아니라, 증가되며 반환되는 값을 인덱스 값으로 상정하고 사용하는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> shoppingList<span class=\"token punctuation\">.</span><span class=\"token function\">enumerated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Item <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>index <span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token delimiter variable\">)</span></span>: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>value<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"sets\" style=\"position:relative;\"><a href=\"#sets\" aria-label=\"sets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sets</h2>\n<ul>\n<li>Set은 같은 타입의 고유한 값들을 순서에 상관없이 저장한다.</li>\n</ul>\n<h3 id=\"hash-values-for-set-types\" style=\"position:relative;\"><a href=\"#hash-values-for-set-types\" aria-label=\"hash values for set types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hash Values for Set Types</h3>\n<ul>\n<li>Set 타입에 저장되는 모든 타입들은 <code class=\"language-text\">hashable</code> 이어야 한다. hashable 하다는 것은 타입의 값이 스스로 hash 값의 역할을 할 수 있다는 것을 의미한다.</li>\n<li>스위프트의 <code class=\"language-text\">기본 타입</code>들은 Stirng, Int, Double, Bool 등은 모두 hashable 하다.</li>\n<li>사용자 정의 타입을 set이나 dictionary의 <code class=\"language-text\">key</code> 값으로 사용하게 하기 위해서 <code class=\"language-text\">Hashalbe protocol</code> 을 사용해 hashable 하게 만들 수 있다.</li>\n</ul>\n<h3 id=\"set-type-syntax\" style=\"position:relative;\"><a href=\"#set-type-syntax\" aria-label=\"set type syntax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set Type Syntax</h3>\n<ul>\n<li>Set을 선언할 때는 <code class=\"language-text\">Set&lt;Element&gt;</code>로 작성한다. Element는 Set에 저장할 데이터들의 타입을 의미한다.</li>\n<li>배열과 다르게 Set은 Shorthand 가 존재하지 않는다.</li>\n</ul>\n<h3 id=\"creating-and-initializing-an-empty-set\" style=\"position:relative;\"><a href=\"#creating-and-initializing-an-empty-set\" aria-label=\"creating and initializing an empty set permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating and Initializing an Empty Set</h3>\n<ul>\n<li>\n<p>비어있는 Set을 만들기 위해 <code class=\"language-text\">Initializer</code>를 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> letters <span class=\"token operator\">=</span> <span class=\"token builtin\">Set</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Character</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>이미 타입이 정해져있는 Set에 대해서는 <code class=\"language-text\">array literal</code>을 통해 빈 Set으로 초기화하는 것도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">letters<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\nletters <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"creating-a-set-with-an-array-literal\" style=\"position:relative;\"><a href=\"#creating-a-set-with-an-array-literal\" aria-label=\"creating a set with an array literal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a Set with an Array Literal</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">array literal</code> 을 통해 Set을 선언과 동시에 초기화할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> favoriteGenres<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Set</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">String</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"rock\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"classical\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hip hop\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n<li>\n<p>Set 은 <code class=\"language-text\">타입추론이 불가능</code>하다. Set 타입은 항상 명시적으로 작성되어야 한다. 하지만 <code class=\"language-text\">Set에 담을 데이터의 타입</code>은 타입 추론이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> favoriteGenres<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Set</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"rock\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"classical\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hip hop\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"accessing-and-modifying-a-set\" style=\"position:relative;\"><a href=\"#accessing-and-modifying-a-set\" aria-label=\"accessing and modifying a set permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Accessing and Modifying a Set</h3>\n<ul>\n<li>\n<p>Set에 들어있는 아이템의 개수를 확인하려면 <code class=\"language-text\">count</code> 프로퍼티를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token builtin\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"I have <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>favoriteGenres<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span><span class=\"token delimiter variable\">)</span></span> favorite music genres.\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">isEmpty</code> 프로퍼티를 사용하면 Set이 비어있는지 (count 프로퍼티의 값이 0인지) 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> favoriteGenres<span class=\"token punctuation\">.</span><span class=\"token builtin\">isEmpty</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"empty\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Set의 <code class=\"language-text\">insert(_:)</code> 메서드를 사용하면 새로운 요소를 삽입할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">favoriteGeners<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jazz\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">remove(_:)</code> 메서드를 사용하면 Set에 인자로 주어진 값을 가진 요소를 삭제하고, 삭제한 요소를 반환한다. 만약 Set에 주어진 값을 가진 요소가 존재하지 않으면 <code class=\"language-text\">nil</code>을 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> removeGenre <span class=\"token operator\">=</span> favoriteGenres<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rock\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>removedGenre<span class=\"token delimiter variable\">)</span></span> is deleted\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Set 안에 특정한 값을 가진 요소가 존재하는지 확인하려면 <code class=\"language-text\">contains(_:)</code> 메서드를 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> favoriteGenres<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Funk\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exits\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"iterating-over-a-set\" style=\"position:relative;\"><a href=\"#iterating-over-a-set\" aria-label=\"iterating over a set permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Iterating Over a Set</h3>\n<ul>\n<li>\n<p>배열과 마찬가지로 <code class=\"language-text\">for-in</code> 구문을 통해 Set 내부의 모든 요소에 접근할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">for</span> genres <span class=\"token keyword\">in</span> favoriteGenres <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>genre<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Set은 순서가 정해져 있지 않다. <code class=\"language-text\">sorted()</code> 메서드를 사용하면 Set의 요소들을 오름차순으로 정렬할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">for</span> genre <span class=\"token keyword\">in</span> favoriteGenres<span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>genre<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"performing-set-operations\" style=\"position:relative;\"><a href=\"#performing-set-operations\" aria-label=\"performing set operations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Performing Set Operations</h2>\n<h3 id=\"fundamental-set-operations\" style=\"position:relative;\"><a href=\"#fundamental-set-operations\" aria-label=\"fundamental set operations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fundamental Set Operations</h3>\n<ul>\n<li>두 개의 Set에 집합 연산을 수행할 수 있다.</li>\n<li><code class=\"language-text\">intersection(_:)</code> 은 두 Set의 공통된 값들만을 가지는 새로운 Set을 생성한다.</li>\n<li><code class=\"language-text\">symmerticDifference(_:)</code> 은 두 Set이 공통적으로 가지는 값들을 제외한 모든 값들을 가지는 새로운 Set을 생성한다.</li>\n<li><code class=\"language-text\">union(_:)</code> 은 두 Set을 값들을 모두 가지는 새로운 Set을 생성한다.</li>\n<li>\n<p><code class=\"language-text\">subtracting(_:)</code> 은 기준이 되는 Set 에서 인자로 주어지는 셋과 공통된 요소들을 제외한 새로운 Set을 생성한다.\n<img src=\"https://docs.swift.org/swift-book/_images/setVennDiagram_2x.png\"></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> oddDigits<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Set</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> evenDigits<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Set</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> singleDigitPrimeNumbers<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Set</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n\noddDigits<span class=\"token punctuation\">.</span><span class=\"token function\">union</span><span class=\"token punctuation\">(</span>evenDigits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span>\noddDigits<span class=\"token punctuation\">.</span><span class=\"token function\">intersection</span><span class=\"token punctuation\">(</span>evenDigits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// []</span>\noddDigits<span class=\"token punctuation\">.</span><span class=\"token function\">subtracting</span><span class=\"token punctuation\">(</span>singleDigitPrimeNumbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [1, 9]</span>\noddDigits<span class=\"token punctuation\">.</span><span class=\"token function\">symmetricDifference</span><span class=\"token punctuation\">(</span>singleDigitPrimeNumbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [1, 2, 9]</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"set-membership-and-equality\" style=\"position:relative;\"><a href=\"#set-membership-and-equality\" aria-label=\"set membership and equality permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set Membership and Equality</h3>\n<ul>\n<li>두 Set의 포함관계를 확인할 수 있는 연산자도 제공된다.</li>\n<li><code class=\"language-text\">==</code> 연산자를 사용하면 두 Set의 모든 요소가 같을 경우에 true를 반환한다.</li>\n<li><code class=\"language-text\">isSubset(of:)</code> 메서드는 메서드를 호출한 Set의 모든 요소가 인자로 주어진 Set에 포함될 때 true를 반환한다.</li>\n<li><code class=\"language-text\">isSuperset(of:)</code> 메서드는 메서드를 호출한 Set이 인자로 주어진 Set의 모든 요소를 포함할 때 true를 반환한다.</li>\n<li><code class=\"language-text\">isStrictSubset(of:)</code> 과 <code class=\"language-text\">isStrictSuperset(of:)</code> 메서드는 두 Set이 완전히 일치하지 않으면서 subset이나 superset 관계에 있는지 확인한다.</li>\n<li><code class=\"language-text\">isDisjoint(with:)</code> 메서드는 두 Set이 서로 공통되는 요소를 하나도 가지지 않을 때 true를 반환한다.</li>\n</ul>\n<h2 id=\"dictionalries\" style=\"position:relative;\"><a href=\"#dictionalries\" aria-label=\"dictionalries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dictionalries</h2>\n<ul>\n<li>Dictionary 는 <code class=\"language-text\">key-value</code> 묶음으로 데이터릉 순서에 상관없이 저장한다.</li>\n<li>key끼리는 같은 타입을 가져야하고, value끼리도 같은 타입을 가져야한다.</li>\n<li>key는 항상 콜렉션 내에서 <code class=\"language-text\">고유한</code> 값이어야한다.</li>\n<li>스위프트의 Dictionary는 Foundationd의 <code class=\"language-text\">NSDictionary</code> 클래스와 bridge 되어있다.</li>\n</ul>\n<h3 id=\"dictionary-type-shorthand-syntax\" style=\"position:relative;\"><a href=\"#dictionary-type-shorthand-syntax\" aria-label=\"dictionary type shorthand syntax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dictionary Type Shorthand Syntax</h3>\n<ul>\n<li>Dictionary 를 선언할 때는 <code class=\"language-text\">Dictionary&lt;Key, Value&gt;</code> 로 작성한다.</li>\n<li>Shorthand form으로 작성할 때는 <code class=\"language-text\">[Key: Value]</code> 로 작성하고 이렇게 작성하는 것이 더 선호된다.</li>\n<li>Key와 Value 자리에는 타입의 이름을 지정한다.</li>\n</ul>\n<h3 id=\"creating-an-empty-dictionary\" style=\"position:relative;\"><a href=\"#creating-an-empty-dictionary\" aria-label=\"creating an empty dictionary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating an Empty Dictionary</h3>\n<ul>\n<li>\n<p>initializer를 통해 빈 Dictionary 를 쉽게 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> nameOfIntegers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"creating-dictionary-with-a-dictionary-literal\" style=\"position:relative;\"><a href=\"#creating-dictionary-with-a-dictionary-literal\" aria-label=\"creating dictionary with a dictionary literal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating Dictionary with a Dictionary Literal</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">dictionaru literal</code>을 사용하면 선언과 동시에 dictionary를 초기화할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> airports<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"YYZ\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Totonto Pearson\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DUB\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Dublin\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n<li>\n<p>초기화할 데이터의 타입이 명확하기 떄문에 dictionary 타입선언은 생략할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> airports <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"YYZ\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Totonto Pearson\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DUB\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Dublin\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"accessing-and-modifying-a-dictionary\" style=\"position:relative;\"><a href=\"#accessing-and-modifying-a-dictionary\" aria-label=\"accessing and modifying a dictionary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Accessing and Modifying a Dictionary</h3>\n<ul>\n<li>Dictionary의 값에 접근할 때, <code class=\"language-text\">메서드</code>, <code class=\"language-text\">프로퍼티</code>, <code class=\"language-text\">subscription</code>을 사용할 수 있다.</li>\n<li>\n<p><code class=\"language-text\">count</code> 와 <code class=\"language-text\">isEmpty</code> 프로퍼티를 사용하면 dictionary 의 요소개수와 요소개수가 0인지 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>airports<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>airports<span class=\"token punctuation\">.</span><span class=\"token builtin\">isEmpty</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre></div>\n</li>\n<li>\n<p>새로운 요소를 삽입할 때는 subscription을 사용한다. <code class=\"language-text\">key 값을 인덱스</code>로 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">airports<span class=\"token punctuation\">[</span><span class=\"token string\">\"LHR\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"London\"</span></code></pre></div>\n</li>\n<li>\n<p>subscription으로 요소에 접근하여 값을 바꾸는 것도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">airports<span class=\"token punctuation\">[</span><span class=\"token string\">\"LHR\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"London Heathrow\"</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">updateValue(_:forKey:)</code> 메서드를 사용하면 새로운 데이터를 추가하거나 기존 데이터의 value값을 수정할 수 있다. 만약 key가 존재한다면, 해당 key에 대한 value를 새로운 값으로 업데이트하고, 존재하지 않는다면 새로운 key-value 데이터를 삽입한다.</li>\n<li>만약 기존 데이터의 value가 압데이트되면 updateVlaue 메서드는 <code class=\"language-text\">업데이트 되기 이전 값</code>을 반환한다.</li>\n<li>\n<p>updateValue 메서드는 dictionary value에 대해 <code class=\"language-text\">optional value</code>를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> oldValue <span class=\"token operator\">=</span> airports<span class=\"token punctuation\">.</span><span class=\"token function\">updateValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dublin Airport\"</span><span class=\"token punctuation\">,</span> forKey<span class=\"token punctuation\">:</span> <span class=\"token string\">\"DUB\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"The old value for DUB was <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>oldValue<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>subscription을 통해 데이터를 읽을 때, 존재하지 않는 key가 전달되면 <code class=\"language-text\">nil</code>을 반환한다.</li>\n<li>\n<p>특정한 데이터를 삭제하고 싶다면 해당 데이터에 key로 접근하여 nil을 value로 할당해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">airports<span class=\"token punctuation\">[</span><span class=\"token string\">\"APL\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Apple International\"</span>\nairports<span class=\"token punctuation\">[</span><span class=\"token string\">\"APL\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">nil</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">removeValue(forKey)</code> 메서드를 사용하는 방법도 있다. 메서드를 실행하면 해당하는 key가 있을 때는 데이터를 삭제한 뒤 삭제된 value를 반환하고, key가 없을 때는 <code class=\"language-text\">nil</code>을 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> removedValue <span class=\"token operator\">=</span> airports<span class=\"token punctuation\">.</span><span class=\"token function\">removeValue</span><span class=\"token punctuation\">(</span>forKey<span class=\"token punctuation\">:</span> <span class=\"token string\">\"DUB\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The removed airport's name is <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>removedValue<span class=\"token delimiter variable\">)</span></span>.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"iterating-over-a-dictionary\" style=\"position:relative;\"><a href=\"#iterating-over-a-dictionary\" aria-label=\"iterating over a dictionary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Iterating Over a Dictionary</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">for-in</code> 을 통해 dictionary의 데이터를 tuple 형태로 얻을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>airportCode<span class=\"token punctuation\">,</span> airportName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> airports <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>airportCode<span class=\"token delimiter variable\">)</span></span>: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>airportName<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">keys</code> 와 <code class=\"language-text\">values</code> 프로퍼티를 통한 접근도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">for</span> airportCode <span class=\"token keyword\">in</span> airports<span class=\"token punctuation\">.</span>keys <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Airport code: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>airportCode<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> airportName <span class=\"token keyword\">in</span> airports<span class=\"token punctuation\">.</span>values <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Airport name: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>airportName<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>dictionary 의 key나 value를 배열로 얻고 싶다면 keys, values 프로퍼티를 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> airportCodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>airports<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> airportNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>airports<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>Dictionary 는 순서가 정해지지 않은 콜렉션이다. 특정한 순서에 따라 출력하고 싶다면 keys 나 values 프로퍼티에 <code class=\"language-text\">sorted()</code> 메서드를 사용한다.</li>\n</ul>","frontmatter":{"title":"[공식문서로 Swift 공부하기] 6. Collection Types","date":"June 27, 2021"}}},"pageContext":{"slug":"/Swift/06-collection-types/","previous":{"fields":{"slug":"/Swift/05-strings-and-charaters/"},"frontmatter":{"title":"[공식문서로 Swift 공부하기] 5. Strings and Characters","category":"Swift","draft":false}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}