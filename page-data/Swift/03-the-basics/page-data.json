{"componentChunkName":"component---src-templates-blog-post-js","path":"/Swift/03-the-basics/","result":{"data":{"site":{"siteMetadata":{"title":"Hun's Footsteps 🥷","author":"전여훈","siteUrl":"https://jeonyeohun.github.io","comment":{"disqusShortName":"","utterances":"jeonyeohun/jeonyeohun.github.io"},"sponsor":{"buyMeACoffeeId":"jeonyeohun"}}},"markdownRemark":{"id":"19fd1401-cfc7-5484-84f7-ff332d4e4061","excerpt":"The Basics https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html 스위프트는 C, Objective-C 와 유사하지만 더 강력한 기능들을 제공한다. 스위프트가 제공하는 자료형은 다음과 같다: Int Double Float Bool Array Set Dictionary Tuple Array, Set, Dictionary는  이며 Tuple은 여러 데이터를 한번에 전달하고 반환할 때 사용하기에 용이한 타입이다. Constant and…","html":"<h1 id=\"the-basics\" style=\"position:relative;\"><a href=\"#the-basics\" aria-label=\"the basics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Basics</h1>\n<blockquote>\n<p><a href=\"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html\">https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html</a></p>\n</blockquote>\n<p>스위프트는 C, Objective-C 와 유사하지만 더 강력한 기능들을 제공한다. 스위프트가 제공하는 자료형은 다음과 같다:</p>\n<ol>\n<li>Int</li>\n<li>Double</li>\n<li>Float</li>\n<li>Bool</li>\n<li>Array</li>\n<li>Set</li>\n<li>Dictionary</li>\n<li>Tuple</li>\n</ol>\n<p>Array, Set, Dictionary는 <code class=\"language-text\">Collection Types</code> 이며 Tuple은 여러 데이터를 한번에 전달하고 반환할 때 사용하기에 용이한 타입이다.</p>\n<h2 id=\"constant-and-variable\" style=\"position:relative;\"><a href=\"#constant-and-variable\" aria-label=\"constant and variable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Constant and Variable</h2>\n<h3 id=\"declaring-constants-and-variable\" style=\"position:relative;\"><a href=\"#declaring-constants-and-variable\" aria-label=\"declaring constants and variable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Declaring Constants and Variable</h3>\n<ul>\n<li><code class=\"language-text\">Constant</code> 는 한번 데이터를 할당한 이후에는 재할당할 수 없는 <code class=\"language-text\">상수</code>이며, <code class=\"language-text\">Variable은</code> 값의 변경이 가능한 <code class=\"language-text\">변수</code>이다.</li>\n<li>Constant 는 <code class=\"language-text\">let</code> 키워드를 통해 선언하고, variable은 <code class=\"language-text\">var</code> 키워드를 통해 선언한다.</li>\n</ul>\n<h3 id=\"type-annotations\" style=\"position:relative;\"><a href=\"#type-annotations\" aria-label=\"type annotations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Annotations</h3>\n<ul>\n<li>\n<p>변수 선언문 뒤에 세미콜론과 타입의 이름을 붙이면 타입을 선언할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> welcomeMessage<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span></code></pre></div>\n</li>\n<li>\n<p>콤마로 구분해서 한줄에 같은 타입의 변수를 여러개 선언하는 것도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> red<span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"naming-constants-and-variables\" style=\"position:relative;\"><a href=\"#naming-constants-and-variables\" aria-label=\"naming constants and variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Naming Constants and Variables</h3>\n<ul>\n<li>\n<p>변수와 상수의 이름은 문자로 만들 수 있다. 심지어 유니코드로 만드는 것도 가능하다..!</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> 🐶🐮 <span class=\"token operator\">=</span> <span class=\"token string\">\"dogcow\"</span></code></pre></div>\n<blockquote>\n<p>엄청난 변수..</p>\n</blockquote>\n</li>\n<li>변수와 상수의 이름은 <code class=\"language-text\">공백문자</code>, <code class=\"language-text\">수학기호</code>, <code class=\"language-text\">화살표</code>가 포함되면 안된다.</li>\n<li>변수와 상수의 이름은 <code class=\"language-text\">숫자로 시작할 수 없다</code>.</li>\n<li>Swift 문법 키워드를 변수나 상수로 지정하고 싶을 때는 <code class=\"language-text\">``</code> 문자로 감까서 사용할 수 있지만 이런 변수명을 사용하는 것은 좋은 방법이 아니다.</li>\n</ul>\n<h3 id=\"printing-constants-and-variables\" style=\"position:relative;\"><a href=\"#printing-constants-and-variables\" aria-label=\"printing constants and variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Printing Constants and Variables</h3>\n<ul>\n<li>변수나 상수를 출력할 때는 <code class=\"language-text\">print</code> 함수를 사용한다.</li>\n<li>\n<p>print 함수는 <code class=\"language-text\">terminator</code> 를 인자로 받는데 기본 값으로 개행이 들어가 있다. 개행 없이 출력하고 싶다면,</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">,</span> terminator<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<p>이렇게 직접 terminator를 지정해주면 된다.</p>\n<ul>\n<li>\n<p>스위프트는 <code class=\"language-text\">string interpolation</code>을 통해 변수나 상수의 이름을 문자열에 집어넣어 출력할 수 있게 한다. <code class=\"language-text\">\\(변수이름)</code> 문법을 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The current value of friendlyWelcome is <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>friendlyWelcome<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"integers\" style=\"position:relative;\"><a href=\"#integers\" aria-label=\"integers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Integers</h2>\n<ul>\n<li>스위프트는 8, 16, 32, 64 비트, unsigned 와 signed 정수를 표현할 수 있다.</li>\n<li>\n<p>최대 표현가능 비트수를 <code class=\"language-text\">Int</code> 뒤에 붙이고, unsigned로 제한하고 싶을 때는 <code class=\"language-text\">Int</code> 앞에 <code class=\"language-text\">U</code>를 붙인다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> signedInt8<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int8</span>\n<span class=\"token keyword\">let</span> unsignedInt8<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UInt8</span>\n<span class=\"token keyword\">let</span> signedInt16<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int16</span>\n<span class=\"token keyword\">let</span> unsignedInt16<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int16</span>\n<span class=\"token keyword\">let</span> signedInt32<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int32</span>\n<span class=\"token keyword\">let</span> unsignedInt32<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int32</span>\n<span class=\"token keyword\">let</span> signedInt64<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int64</span>\n<span class=\"token keyword\">let</span> unsignedInt64<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int64</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"integer-bounds\" style=\"position:relative;\"><a href=\"#integer-bounds\" aria-label=\"integer bounds permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Integer Bounds</h3>\n<ul>\n<li>\n<p>최댓값과 최소값을 <code class=\"language-text\">min</code> 과 <code class=\"language-text\">max</code> 프로퍼티를 사용해 얻을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> minValue <span class=\"token operator\">=</span> <span class=\"token builtin\">UInt8</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span>\n<span class=\"token keyword\">let</span> maxValue <span class=\"token operator\">=</span> <span class=\"token builtin\">UInt8</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"int--uint\" style=\"position:relative;\"><a href=\"#int--uint\" aria-label=\"int  uint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Int &#x26; UInt</h3>\n<ul>\n<li><code class=\"language-text\">Int(UInt)</code> 타입의 기본 범위는 OS에 따라 달라진다. 32-bit OS에서 Int 는 <code class=\"language-text\">Int32</code> 와 같은 범위를 가지고, 64-bit OS에서 Int는 <code class=\"language-text\">Int64</code>의 범위를 가진다.</li>\n<li>정수의 범위를 특정해야하는 상황이 아니라면, Int의 범위를 지정해서 사용하지 않고 기본값 Int를 사용하는 것이 <code class=\"language-text\">일관성과 상호운용성(consistency and interoperability)</code> 측면에서 바람직하다.</li>\n</ul>\n<h2 id=\"floating-point-numbers\" style=\"position:relative;\"><a href=\"#floating-point-numbers\" aria-label=\"floating point numbers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Floating-Point Numbers</h2>\n<ul>\n<li><code class=\"language-text\">Double</code>은 64-bit 로 실수를 표현한다.</li>\n<li><code class=\"language-text\">Float</code>는 32-bit 로 실수를 표현한다.</li>\n<li>Double 과 Float 을 둘 다 사용해도 괜찮은 환경이라면 Float 보다는 Double을 사용하는 것이 권장된다.</li>\n</ul>\n<h2 id=\"type-safety-and-type-inferance\" style=\"position:relative;\"><a href=\"#type-safety-and-type-inferance\" aria-label=\"type safety and type inferance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Safety and Type Inferance</h2>\n<ul>\n<li>스위프트는 컴파일 시점에서 타입체킹을 수행한다.</li>\n<li>만약 타입이 명시되어 있지 않다면 <code class=\"language-text\">type inference</code>를 통해 컴파일러가 타입을 부여한다.</li>\n<li>type inference 가 있기 때문에 상수나 변수를 선언과 동시에 초기화 할 때는 타입을 명시할 필요가 없다.</li>\n<li>스위프트는 실수에 대해 항상 <code class=\"language-text\">Double</code> 타입으로 inferring 한다.</li>\n<li>\n<p>정수와 실수의 합 역시 <code class=\"language-text\">Double</code> 타입으로 inferring 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> anotherPi <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.14159</span> <span class=\"token comment\">// anotherPu is inffered as Double</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"numeric-literals\" style=\"position:relative;\"><a href=\"#numeric-literals\" aria-label=\"numeric literals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Numeric Literals</h2>\n<ul>\n<li>10진수는 일반 표기로 표현한다.</li>\n<li>2진수는 앞에 <code class=\"language-text\">0b</code>를 붙여 표현한다.</li>\n<li>8진수는 앞에 <code class=\"language-text\">0o</code>를 붙여 표현한다.</li>\n<li>\n<p>16진수는 앞에 <code class=\"language-text\">0x</code>를 붙여 표현한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> decimalInteger <span class=\"token operator\">=</span> <span class=\"token number\">17</span>\n<span class=\"token keyword\">let</span> binaryInteger <span class=\"token operator\">=</span> <span class=\"token number\">0b10001</span>\n<span class=\"token keyword\">let</span> octalInteger <span class=\"token operator\">=</span> <span class=\"token number\">0o21</span>\n<span class=\"token keyword\">let</span> hexadecimalInteger <span class=\"token operator\">=</span> <span class=\"token number\">0x11</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"type-conversion\" style=\"position:relative;\"><a href=\"#type-conversion\" aria-label=\"type conversion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Conversion</h2>\n<h3 id=\"integer-and-floating-point-conversion\" style=\"position:relative;\"><a href=\"#integer-and-floating-point-conversion\" aria-label=\"integer and floating point conversion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Integer and Floating Point Conversion</h3>\n<ul>\n<li>\n<p>정수에서 실수로의 형변환은 항상 명시적으로 이루어져야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> three <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">let</span> pointOneFourOneFiveNine <span class=\"token operator\">=</span> <span class=\"token number\">0.14159</span>\n<span class=\"token keyword\">let</span> pi <span class=\"token operator\">=</span> <span class=\"token function\">Double</span><span class=\"token punctuation\">(</span>three<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pointOneFoutOneFiveNine</code></pre></div>\n<p>three 를 형변환 하지 않고는 계산이 불가능하다.</p>\n</li>\n<li>\n<p>실수에서 정수로의 형변환 역시 명시적으로 이루어져야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> integerPi <span class=\"token operator\">=</span> <span class=\"token function\">Int</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"type-aliases\" style=\"position:relative;\"><a href=\"#type-aliases\" aria-label=\"type aliases permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Aliases</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">typealias</code> 키워드를 사용하면 이미 존재하는 타입들에 대해 다른 이름을 부여할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">typealias</span> <span class=\"token builtin\">AudioSample</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">UInt16</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">AudioSample</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"0\"</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"booleans\" style=\"position:relative;\"><a href=\"#booleans\" aria-label=\"booleans permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Booleans</h2>\n<ul>\n<li>Bool 타입은 <code class=\"language-text\">true</code> 나 <code class=\"language-text\">false</code> 인 논리 값을 가진다.</li>\n<li>스위프트는 다른 타입의 값을 Bool 타입으로 변환하지 않는다. 즉, 0이나 1을 Bool 타입 값으로 사용할 수 없다.</li>\n</ul>\n<h2 id=\"tuples\" style=\"position:relative;\"><a href=\"#tuples\" aria-label=\"tuples permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tuples</h2>\n<ul>\n<li>tuples 는 여러 값들을 하나의 값으로 묶어주는 역할을 한다.</li>\n<li><code class=\"language-text\">()</code> 를 통해 생성한다.</li>\n<li>tuple로 묶이는 값들은 <code class=\"language-text\">서로 다른 타입이라도 상관없다</code>.</li>\n<li>\n<p>Tuple 에 들어있는 값들을 분해하기 위해서는 다음과 같이 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> http404Error <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Not Found\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>statusCode<span class=\"token punctuation\">,</span> statusMessage<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> http404Error\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>statusCode<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"404\"</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>statusMessage<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"Not Found\"</span></code></pre></div>\n</li>\n<li>\n<p>Tuple을 분해할 때, 필요없는 값이 있다면, <code class=\"language-text\">_</code> 를 사용해서 무시할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>justTheStatusCode<span class=\"token punctuation\">,</span> <span class=\"token number\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> http404Error</code></pre></div>\n</li>\n<li>\n<p>Tuple의 요소에 접근하기 위해서 요소 번호로 접근하는 것도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>http404Error<span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"404\"</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>http404Error<span class=\"token punctuation\">.</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"Not Found\"</span></code></pre></div>\n</li>\n<li>\n<p>Tuple의 요소에 이름을 붙여서 사용하는 것도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> http200Status <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>statusCode<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">:</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>http200Status<span class=\"token punctuation\">.</span>statusCode<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"200\"</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>http200Status<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"OK\"</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"optionals\" style=\"position:relative;\"><a href=\"#optionals\" aria-label=\"optionals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optionals</h2>\n<ul>\n<li>\n<p>Optional 은 변수에 값이 있어 내부에 접근하여 값을 가져올 수 있거나, 변수에 값이 없음을 표현한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> possibleNumber <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span>\n<span class=\"token keyword\">let</span> convertedNumber <span class=\"token operator\">=</span> <span class=\"token function\">Int</span><span class=\"token punctuation\">(</span>possibleNumber<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 예시에서 convertedNumber는 <code class=\"language-text\">Optional Int(Int?)</code>로 inferring 된다. possibleNumber는 String 으로 inferring 되는데, String 의 값은 정수로 변환이 될 수도 있고, 불가능할 수도 있기 때문이다.</p>\n</li>\n</ul>\n<h3 id=\"nil\" style=\"position:relative;\"><a href=\"#nil\" aria-label=\"nil permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nil</h3>\n<ul>\n<li><code class=\"language-text\">nul</code>은 Optional 타입 변수에 statless 를 저장할 떄 사용한다.</li>\n<li>\n<p>Optional 변수를 초기화 하지 않으면 자동으로 <code class=\"language-text\">nil</code> 이 초기값으로 설정된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> surveyAnswer<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>surveryAnswer<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"nil\"</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"if-statements-and-forced-unwrapping\" style=\"position:relative;\"><a href=\"#if-statements-and-forced-unwrapping\" aria-label=\"if statements and forced unwrapping permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>If Statements and Forced Unwrapping</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">if</code> 문을 통해 Optional이 값을 가지고 있는지 nil을 가지고 있는지 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> convertedNumber <span class=\"token operator\">!=</span> <span class=\"token constant\">nil</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"There is a value\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Optional 변수 끝에 <code class=\"language-text\">!</code> 를 붙이면 Optional이 가지고 있는 변수를 사용하도록 할 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> convertedNumber <span class=\"token operator\">!=</span> <span class=\"token constant\">nil</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>convertedNumber<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"optional-binding\" style=\"position:relative;\"><a href=\"#optional-binding\" aria-label=\"optional binding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional Binding</h3>\n<ul>\n<li><code class=\"language-text\">optional binding</code> 을 사용하면 optional 변수가 값을 가지고 있을 때, 해당 값을 새로운 변수에 임시적으로 할당하여 사용하게 할 수 있다.</li>\n<li>\n<p>optional binding은 <code class=\"language-text\">if</code> 와 <code class=\"language-text\">while</code>에서 사용할 수 있다. 아래와 같은 형태로 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> constantName <span class=\"token operator\">=</span> someOptional <span class=\"token punctuation\">{</span>\n  statements\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>위에서 사용한 possibleNumber 에 대한 예제를 다음처럼 작성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> actualNumber <span class=\"token operator\">=</span> <span class=\"token function\">Int</span><span class=\"token punctuation\">(</span>possibleNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>actualNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"There is no possible number: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>possibleNumber<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 코드를 작성하면, possibleNumber에 정수로 변환할 수 있는 문자열이 들어오면 let으로 선언한 actualNumber 변수에 값이 들어가 출력되고, 정수로 변환할 수 있는 문자열이 들어오지 않아 nil이 되면 else 구분으로 들어가게 된다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">if</code> 구문에는 optional binding 이나 boolean condition을 여러개 작성할 수 있다. <code class=\"language-text\">콤마(,)</code>를 통해 구분하고 만약 하나의 optional binding이나 boolean condition 이라도 <code class=\"language-text\">nil</code> 이나 <code class=\"language-text\">false</code>가 되면 모든 조건이 false 가 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> firstNumber <span class=\"token operator\">=</span> <span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">let</span> secondNumber <span class=\"token operator\">=</span> <span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"42\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> firstNumber <span class=\"token operator\">&lt;</span> secondNumber <span class=\"token operator\">&amp;&amp;</span> secondNumber <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>firstNumber<span class=\"token delimiter variable\">)</span></span> &lt; <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>secondNumber<span class=\"token delimiter variable\">)</span></span> &lt; 100\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Prints \"4 &lt; 42 &lt; 100\"</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> firstNumber <span class=\"token operator\">=</span> <span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> secondNumber <span class=\"token operator\">=</span> <span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"42\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> firstNumber <span class=\"token operator\">&lt;</span> secondNumber <span class=\"token operator\">&amp;&amp;</span> secondNumber <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>firstNumber<span class=\"token delimiter variable\">)</span></span> &lt; <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>secondNumber<span class=\"token delimiter variable\">)</span></span> &lt; 100\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Prints \"4 &lt; 42 &lt; 100\"</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"implicitly-unwrapped-optionals\" style=\"position:relative;\"><a href=\"#implicitly-unwrapped-optionals\" aria-label=\"implicitly unwrapped optionals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implicitly Unwrapped Optionals</h3>\n<ul>\n<li>만약 Optional 변수에 항상 값이 할당되어 <code class=\"language-text\">nil</code>을 가질 일이 없다면 매번 실제 값에 접근하기 위해 Optional을 unwrap 하는 것은 낭비이다.</li>\n<li>이런 종류의 Optional 을 <code class=\"language-text\">implicitly unwrapped optionals</code> 라고 한다.</li>\n<li>\n<p>implicitly unwrapped optionals 는 optional 타입 선언시 타입 이름 뒤에 느낌표를 붙이는 것으로 작성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> assumedString<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">!</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"An implicitly unwrapped optional string.\"</span></code></pre></div>\n</li>\n<li>implicitly unwrapped optionals 는 주로 클래스 인스턴스 생성시에 사용된다.</li>\n<li>\n<p>스위프트 컴파일러는 implicitly unwrapped optionals 를 <code class=\"language-text\">optional value</code> 취급하고 optional value로 사용할 수 없는 경우에는 강제로 unwrap을 하여 값을 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> assumedString<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">!</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"An implicitly unwrapped optional string.\"</span>\n<span class=\"token keyword\">let</span> implicitString<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> assumedString <span class=\"token comment\">// no need for an exclamation point</span></code></pre></div>\n<p>이 예제에서 implicitString 에 assumedString의 값을 할당할 수 있는 이유는 implicitString 이 optional value를 저장할 수 없기 때문에 assumedString을 강제로 wrap해서 내부의 값을 사용했기 때문이다.</p>\n</li>\n<li>만약 implicit unwrapped optional이 nil이고 이 optional을 unwrap 하려고 하면 <code class=\"language-text\">런타임 오류</code>가 발생한다.</li>\n</ul>\n<h2 id=\"error-handling\" style=\"position:relative;\"><a href=\"#error-handling\" aria-label=\"error handling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Error Handling</h2>\n<ul>\n<li>함수 내부에서 에러가 발생하면 해당 함수는 error를 <code class=\"language-text\">throw</code> 한다. 그리고 해당 함수를 호출한 caller 가 <code class=\"language-text\">catch</code> 를 통해 error handling 을 하게된다.</li>\n<li>\n<p>에러 발생 시 throw를 하도록 하기위해 함수 선언에 <code class=\"language-text\">throws</code> 키워드를 붙여준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">canThrowAnError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>에러를 throw 하는 함수를 호출하고 에러를 인지하기 위해서 함수 호출 구문 앞에 <code class=\"language-text\">try</code> 키워드를 붙여준다.</li>\n<li>스위프트는 에러가 발생한 현재 스코프에서 빠져나와 <code class=\"language-text\">catch</code> 구문을 자동으로 찾아간다.</li>\n<li>\n<p>catch 구문이 있는 스코프를 정해주기 위해 <code class=\"language-text\">do-catch</code> 블록을 만든다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">makeASandwich</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token function\">makeASandwich</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">eatASandwich</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token builtin\">SandwichError</span><span class=\"token punctuation\">.</span>outOfCleanDishes <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">washDishes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token builtin\">SandwichError</span><span class=\"token punctuation\">.</span><span class=\"token function\">missingIngredients</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> ingredients<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">buyGroceries</span><span class=\"token punctuation\">(</span>ingredients<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"assertions-and-preconditions\" style=\"position:relative;\"><a href=\"#assertions-and-preconditions\" aria-label=\"assertions and preconditions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assertions and Preconditions</h2>\n<ul>\n<li><code class=\"language-text\">Assertion</code> 과 <code class=\"language-text\">precondition</code>은 실행 중에 이 구문 이후의 코드를 계속 실행하기 전에 검사할 조건을 정의하기 위해 사용한다.</li>\n<li>assertion과 precondition이 <code class=\"language-text\">false</code> 가 되면 더 이상 코드를 실행하지 않고 프로그램을 종료시킨다.</li>\n<li>assertion과 precondition은 잘못된 조건이 발생하는 것을 막기 위해서 사용하는 것이 아니라, 프로그램이 잘못된 상태에 들어섰을 때, 프로그램을 정상적으로 종료시키기 위한 목적에 가깝다.</li>\n<li>assertion과 precondition의 차이는 조건 검사를 수행하는 모드에 있다. assertion은 <code class=\"language-text\">debug build</code> 일 때만 조건을 검사하고, precondition은 <code class=\"language-text\">debug build</code> 와 <code class=\"language-text\">production build</code>에서 모두 조건검사를 수행한다. 따라서, assertion은 실제 배포시에는 프로그램 성능에 영향을 미치지 않기 때문에 자유롭게 사용할 수 있다.</li>\n</ul>\n<h3 id=\"debugging-with-assertionspreconditions\" style=\"position:relative;\"><a href=\"#debugging-with-assertionspreconditions\" aria-label=\"debugging with assertionspreconditions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debugging with Assertions/Preconditions</h3>\n<ul>\n<li>assertion은 <code class=\"language-text\">assert(_:-:file:line:)</code> 을 사용해서 작성할 수 있다. assert 함수의 인자로 검사할 조건과, 조건이 false가 되었을 때 출력할 메세지를 작성하는 것으로 정의할 수 있다.</li>\n<li>\n<p>메세지는 생략할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>age <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A person's age can't be less than zero\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>assertion 조건을 assert 함수가 아닌 다른 방법으로 이미 검사했다면, <code class=\"language-text\">assertionFailure(_:file:line)</code> 함수를 호출하여 assertion을 일으킬 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> age <span class=\"token operator\">></span> <span class=\"token number\">10</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"you can ride the roller-coaster\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> age <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You can ride the ferris wheel\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">assertionFailure</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A person's age cannot be less than zero\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>precondition은 assertion과 모든 내용이 같고 assert 함수 대신 <code class=\"language-text\">precondition(_:_:file:line:)</code>을 사용하고, assertionFailure 대신 <code class=\"language-text\">preconditionFailure(_:file:line:)</code>을 사용한다.</li>\n</ul>","frontmatter":{"title":"[공식문서로 Swift 공부하기] 3. The Basics","date":"June 23, 2021"}}},"pageContext":{"slug":"/Swift/03-the-basics/","previous":{"fields":{"slug":"/Swift/02-a-swift-tour/"},"frontmatter":{"title":"[공식문서로 Swift 공부하기] 2. A Swift Tour","category":"Swift","draft":false}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}