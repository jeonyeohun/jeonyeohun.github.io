{"componentChunkName":"component---src-templates-blog-post-js","path":"/Swift/02-a-swift-tour/","result":{"data":{"site":{"siteMetadata":{"title":"Hun's Footsteps 🥷","author":"전여훈","siteUrl":"https://jeonyeohun.github.io","comment":{"disqusShortName":"","utterances":"jeonyeohun/jeonyeohun.github.io"},"sponsor":{"buyMeACoffeeId":"jeonyeohun"}}},"markdownRemark":{"id":"16e7a92b-74a0-506d-af55-430c29f73ba7","excerpt":"A Swift Tour https://docs.swift.org/swift-book/GuidedTour/GuidedTour.html 간단한 문법들과 기초가 되는 개념들은 먼저 알아보자. Simple Values  키워드를 통해 상수(constant)를,  키워드를 통해 변수(variable)를 선언할 수 있다. Constant…","html":"<h1 id=\"a-swift-tour\" style=\"position:relative;\"><a href=\"#a-swift-tour\" aria-label=\"a swift tour permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A Swift Tour</h1>\n<blockquote>\n<p><a href=\"https://docs.swift.org/swift-book/GuidedTour/GuidedTour.html\">https://docs.swift.org/swift-book/GuidedTour/GuidedTour.html</a></p>\n</blockquote>\n<p>간단한 문법들과 기초가 되는 개념들은 먼저 알아보자.</p>\n<h2 id=\"simple-values\" style=\"position:relative;\"><a href=\"#simple-values\" aria-label=\"simple values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simple Values</h2>\n<ul>\n<li><code class=\"language-text\">let</code> 키워드를 통해 상수(constant)를, <code class=\"language-text\">var</code> 키워드를 통해 변수(variable)를 선언할 수 있다. Constant는 값을 한 번만 대입할 수 있는 변수를 의미한다.</li>\n<li>\n<p>스위프트에도 타입이 존재하기 때문에 변수를 선언할 때 타입을 지정해주어야 하지만, <code class=\"language-text\">명시적으로 타입을 적어주지 않아도</code> 스위프트 컴파일러가 대입된 값에 따라 타입을 지정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> myVariable <span class=\"token operator\">=</span> <span class=\"token number\">42</span></code></pre></div>\n<p>이렇게 선언된 변수 myVariable 은 명시적으로 지정되지 않았지만, 정수타입으로 선언된다.</p>\n</li>\n<li>\n<p>만약 변수에 초기 값이 없거나, 데이터 타입을 명확하게 지정해줄 때는 다음과 같이 타입을 지정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> implicitInteger <span class=\"token operator\">=</span> <span class=\"token number\">70</span> <span class=\"token comment\">// 정수 타입</span>\n<span class=\"token keyword\">let</span> implicitDouble <span class=\"token operator\">=</span> <span class=\"token number\">70.0</span> <span class=\"token comment\">// 실수 타입</span>\n<span class=\"token keyword\">let</span> explicitDouble<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">70</span> <span class=\"token comment\">// Double 형을 명시적으로 선언했다.</span>\n<span class=\"token keyword\">let</span> explicitFloat<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Float</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span></code></pre></div>\n</li>\n<li>\n<p>스위프트의 값들은 절대 <code class=\"language-text\">암묵적 형변환을 하지 않는다</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> label <span class=\"token operator\">=</span> <span class=\"token string\">\"The width is \"</span>\n<span class=\"token keyword\">let</span> width <span class=\"token operator\">=</span> <span class=\"token number\">94</span>\n<span class=\"token keyword\">let</span> widthLabel <span class=\"token operator\">=</span> label <span class=\"token operator\">+</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">)</span></code></pre></div>\n<p>만약 String으로 형변환을 하는 괄호를 없애면 Int 와 String 은 <code class=\"language-text\">+</code> 연산으로 더할 수 없다는 오류가 발생한다.</p>\n</li>\n<li>\n<p>더하기 연산을 사용하지 않고 쉽게 문자열에 값을 넣을 때는 <code class=\"language-text\">백슬래시(\\)</code> 를 괄호 앞에 두는 <code class=\"language-text\">\\(데이터)</code> 형태를 사용하여 쉽게 넣을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> apples <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">let</span> oranges <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">let</span> appleSummary <span class=\"token operator\">=</span> <span class=\"token string\">\"I have <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>apples<span class=\"token delimiter variable\">)</span></span> apples.\"</span>\n<span class=\"token keyword\">let</span> fruitSummary <span class=\"token operator\">=</span> <span class=\"token string\">\"I have <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>apples <span class=\"token operator\">+</span> oranges<span class=\"token delimiter variable\">)</span></span> pieces of fruit.\"</span></code></pre></div>\n</li>\n<li>\n<p>Multiline 의 문자열을 변수에 저장하기 위해서는 세개의 쌍따음표(<code class=\"language-text\">&quot;&quot;&quot;</code>)를 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> apples<span class=\"token punctuation\">:</span><span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n<span class=\"token keyword\">let</span> oranges<span class=\"token punctuation\">:</span><span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">let</span> quotation <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\"\nI said <span class=\"token string\">\"I have <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>apples<span class=\"token delimiter variable\">)</span></span> apples.\"</span>\n<span class=\"token builtin\">And</span> then I said <span class=\"token string\">\"I have <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>apples <span class=\"token operator\">+</span> oranges<span class=\"token delimiter variable\">)</span></span> pieces of fruit.\"</span>\n<span class=\"token string\">\"\"</span>\"\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>quotation<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 결과:</span>\n<span class=\"token comment\">// I said \"I have 8 apples.\"</span>\n<span class=\"token comment\">// And then I said \"I have 18 pieces of fruit.\"</span></code></pre></div>\n</li>\n<li>\n<p>배열과 딕셔너리를 만들 때는 <code class=\"language-text\">[]</code> 를 사용한다. 배열의 요소에 접근할 때는 <code class=\"language-text\">인덱스</code>를 사용하고, 딕셔너리의 요소에 접근할 때는 <code class=\"language-text\">key</code> 를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> shoppingList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"catfish\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"water\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tulips\"</span><span class=\"token punctuation\">]</span>\nshoppingList<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"bottle\"</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>shoppingList<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 결과: [\"catfish\", \"bottle\", \"tulips\"]</span>\n\n<span class=\"token keyword\">var</span> occupations <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"Malcolm\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"Captain\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Kaylee\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"Mechanic\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\noccupations<span class=\"token punctuation\">[</span><span class=\"token string\">\"Jayne\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Relations\"</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>occuptions<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 결과: [\"Jayne\": \"Relations\", \"Malcolm\": \"Captain\", \"Kaylee\": \"Mechanic\"]</span></code></pre></div>\n</li>\n<li>배열은 <code class=\"language-text\">append()</code> 를 통해 데이터를 추가할 때마다 길이가 늘어난다.</li>\n<li>\n<p>빈 배열이나 딕셔너리를 만들고 싶다면 다음과 같이 초기화를 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">  <span class=\"token keyword\">let</span> emptyArray<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> emptyDictionary<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">Float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"control-flow\" style=\"position:relative;\"><a href=\"#control-flow\" aria-label=\"control flow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Control Flow</h2>\n<ul>\n<li>반복문은 <code class=\"language-text\">for-in</code>, <code class=\"language-text\">while</code>, <code class=\"language-text\">repeat-while</code> 로 구현한다.</li>\n<li>\n<p>조건문은 <code class=\"language-text\">if</code>, <code class=\"language-text\">switch</code> 로 구현한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> individualScores <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">43</span><span class=\"token punctuation\">,</span> <span class=\"token number\">103</span><span class=\"token punctuation\">,</span> <span class=\"token number\">87</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> teamScore <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">for</span> score <span class=\"token keyword\">in</span> individualScores <span class=\"token punctuation\">{</span> <span class=\"token comment\">// for-in statement</span>\n  <span class=\"token keyword\">if</span> score <span class=\"token operator\">></span> <span class=\"token number\">50</span> <span class=\"token punctuation\">{</span>\n      teamScore <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      teamScore <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>teamScore<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"11\"</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">if</code> 와 <code class=\"language-text\">let</code>을 함께 쓰면 Optional에 대한 처리를 할 수 있다. Optional은 값을 가지거나 <code class=\"language-text\">nil</code>을 가진다. <code class=\"language-text\">nil</code> 은 값이 없음을 의미한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> optionalString<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>optionalString <span class=\"token operator\">==</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token keyword\">var</span> optionalName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hun\"</span>\n<span class=\"token keyword\">var</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello!\"</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> optionalName<span class=\"token punctuation\">{</span>\n  greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>name<span class=\"token delimiter variable\">)</span></span>\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"Hello, Hun\"</span></code></pre></div>\n<p>OptionalName 이 nil이 아닌 값을 가지고 있을 때, 해당 값이 let으로 선언된 변수에 할당되고 조건문 내부로 들어간다.</p>\n</li>\n<li>\n<p>Optional 타입 변수에 default 값을 사용하고 싶을 때는 <code class=\"language-text\">??</code> 연산자를 사용하여 다음과 같이 코드를 구성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> nickname<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token constant\">nil</span>\n<span class=\"token keyword\">let</span> fullName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hun\"</span>\n<span class=\"token keyword\">let</span> informalGreeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hi <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>nickname <span class=\"token operator\">?</span><span class=\"token operator\">?</span> fullname<span class=\"token delimiter variable\">)</span></span>\"</span></code></pre></div>\n<p>이렇게 하면 만약 nickname이 nil 을 가질 때는 fullname 이 사용된다.</p>\n</li>\n<li>\n<p>스위프트에서 <code class=\"language-text\">switch</code>는 case로 어떤 데이터이던지 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> vegetable <span class=\"token operator\">=</span> <span class=\"token string\">\"red pepper\"</span>\n<span class=\"token keyword\">switch</span> vegetable <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"celery\"</span><span class=\"token punctuation\">:</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Add some raisins and make ants on a log\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"cucumber\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"watercress\"</span><span class=\"token punctuation\">:</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"That would make a good tea sandwich.\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> x <span class=\"token keyword\">where</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">hasSuffix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pepper\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Is it a spicy <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>x<span class=\"token delimiter variable\">)</span></span>?\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Everything tastes good in soup.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// prints: \"Is it a spicy red pepper?\"</span></code></pre></div>\n<p>“cucumber”, “watercress” 처럼 여러 값을 하나의 케이스에 넣는 것도 가능하다.</p>\n</li>\n<li>switch 는 반드시 <code class=\"language-text\">default case</code>를 가져야 한다.</li>\n<li>c 나 java 언어와 달리 한 케이스가 실행되면 곧바로 switch 조건이 종료되기 때문에 break를 하지 않아도 된다.</li>\n<li>\n<p><code class=\"language-text\">for-in</code>을 사용하면 dictionary의 요소들을 key-value를 사용하여 접근할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> interestingNumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"Prime\"</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Fibonacci\"</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Square\"</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">var</span> largest <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> interestingNumbers <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> number <span class=\"token keyword\">in</span> value <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> largest <span class=\"token operator\">&lt;</span> number <span class=\"token punctuation\">{</span>\n        largest <span class=\"token operator\">=</span> number\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Fibonacci</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// 5</span>\n<span class=\"token comment\">// 8</span>\n<span class=\"token comment\">// Square</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// .</span>\n<span class=\"token comment\">// .</span>\n<span class=\"token comment\">// .</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">while</code> 이나 <code class=\"language-text\">repeat-while</code> 을 사용하여 반복문을 구현할 수도 있다. repeat-while은 타 언어의 do-while과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">while</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">{</span>\n  n <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"128\"</span>\n\n<span class=\"token keyword\">var</span> m <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">repeat</span> <span class=\"token punctuation\">{</span>\n  m <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> m <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"128\"</span></code></pre></div>\n</li>\n<li>\n<p>반복 횟수를 지정하기 위해서 <code class=\"language-text\">..&lt;</code>, <code class=\"language-text\">..&gt;</code> 연산자나 <code class=\"language-text\">...</code> 연산자를 사용할 수 있다. <code class=\"language-text\">..&lt;</code>, <code class=\"language-text\">..&gt;</code> 연산자는 범위의 마지막 값을 포함하지 않은 채로 반복하고, <code class=\"language-text\">...</code> 연산자는 마지막 값까지 포함하여 반복한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">4</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// prints:</span>\n<span class=\"token comment\">// 0</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 3</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token number\">4</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//prints:</span>\n<span class=\"token comment\">// 0</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// 4</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"functions-and-closure\" style=\"position:relative;\"><a href=\"#functions-and-closure\" aria-label=\"functions and closure permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functions and Closure</h2>\n<ul>\n<li>\n<p>함수를 만들기 위해서는 <code class=\"language-text\">func</code> 키워드를 사용한다. 함수의 이름과 파라메터를 정의한 뒤, <code class=\"language-text\">-&gt;</code>를 사용하여 리턴타입을 지정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> greet <span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>person<span class=\"token delimiter variable\">)</span></span>, today is <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>day<span class=\"token delimiter variable\">)</span></span>.\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">:</span> <span class=\"token string\">\"bob\"</span><span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">:</span> <span class=\"token string\">\"tuesday\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//prints: Hello bob, today is tuesday.</span></code></pre></div>\n</li>\n<li>\n<p>함수 파라메터에는 <code class=\"language-text\">label</code> 을 달 수 있다. 기본값으로 파라메터의 이름이 라벨이 되지만, 파라메터의 이름 앞에 라벨을 따로 선언하거나 <code class=\"language-text\">_</code> 를 붙여 라벨을 생략하도록 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">great</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> person<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> on day<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>person<span class=\"token delimiter variable\">)</span></span>, today is <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>day<span class=\"token delimiter variable\">)</span></span>\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">great</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Wednesday\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">tuple</code>을 리턴타입으로 사용해서 여러 값들을 한번에 리턴할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> calculateStatistics <span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> <span class=\"token builtin\">min</span> <span class=\"token operator\">=</span> scores<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">var</span> <span class=\"token builtin\">max</span> <span class=\"token operator\">=</span> scores<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">for</span> score <span class=\"token keyword\">in</span> scores <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> score <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">max</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token builtin\">max</span> <span class=\"token operator\">=</span> score\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> score <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">min</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token builtin\">min</span> <span class=\"token operator\">=</span> score\n      <span class=\"token punctuation\">}</span>\n      sum <span class=\"token operator\">+</span><span class=\"token operator\">=</span> score\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> statistics <span class=\"token operator\">=</span> <span class=\"token function\">calculateStatistics</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>statistics<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints: 120</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>statistics<span class=\"token punctuation\">.</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints: 120</span></code></pre></div>\n<p>반환된 tuple은 key로 접근하거나 번호로 접근할 수 있다.</p>\n</li>\n<li>\n<p>함수는 <code class=\"language-text\">중첩</code>될 수 있다. 내부에 선언된 함수는 자신을 포함하는 외부함수의 변수에 접근할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">returnFifteen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n  <span class=\"token keyword\">func</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      y <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token comment\">// 외부에 선언된 변수 y에 접근한다</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> y\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> <span class=\"token function\">returnFifteen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints: 15</span></code></pre></div>\n</li>\n<li>\n<p>함수는 <code class=\"language-text\">first-class type</code> 이다. 즉, 함수는 함수를 값의 형태로 반환할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">makeIncrementer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 정수를 반환하는 함수를 리턴타입으로 설정</span>\n  <span class=\"token keyword\">func</span> <span class=\"token function\">addOne</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> number\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> addOne\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> increment <span class=\"token operator\">=</span> <span class=\"token function\">makeIncrementer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints: 8</span></code></pre></div>\n</li>\n<li>\n<p>같은 맥락으로 함수는 인자로 <code class=\"language-text\">함수</code>를 받을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">hasAnyMatches</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> condition<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Bool</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 파라메터로 정수를 입력으로 받아 Bool 타입을 반환하는 함수를 받는다.</span>\n  <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> list <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> condition <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">lessThenTen</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Bool</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> number <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> <span class=\"token function\">hasAnyMatches</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">:</span> numbers<span class=\"token punctuation\">,</span> condition<span class=\"token punctuation\">:</span> lessThenTen<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints: true</span></code></pre></div>\n</li>\n<li>함수는 <code class=\"language-text\">closure</code>의 특별한 경우이다. closure 란 현재 진행중이던 코드시점이 아니라 나중에 불러서 사용할 수 있는 코드를 의미한다. closure 가 생성되면 closure 내부에 있는 변수나 함수는 <code class=\"language-text\">다른 유효범위</code> 내에서 불러서 사용할 수 있게 된다. 즉, <code class=\"language-text\">이름이 없는 함수</code>이다.</li>\n<li>\n<p>익명의 closure 는 <code class=\"language-text\">{}</code>를 통해 생성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token keyword\">in</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> number\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>closure 선언부와 바디를 구분하기 위해서 <code class=\"language-text\">in</code> 을 사용한다.</p>\n</li>\n<li>\n<p>closure 를 더 간결하게 작성하는 방법도 있다. 만약 closure 의 타입을 알고 있다면, 파라메터나 리턴타입을 <code class=\"language-text\">생략</code>하는 것이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> mappedNumbers <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> number <span class=\"token keyword\">in</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> number<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>mappedNumbers<span class=\"token punctuation\">)</span></code></pre></div>\n<p>numbers에 있는 값들에 3을 곱해 얻은 새로운 배열을 반환하는 closure 이다. 입력값과 출력값이 <code class=\"language-text\">Int</code>로 결정되기 때문에 파라메터 타입과 리턴타입을 생략해도 된다.</p>\n</li>\n<li>\n<p>파라메터를 라벨이 아는 번호로 접근할 수 있다 <code class=\"language-text\">$번호</code>의 형태로 접근한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> sortedNumbers <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">{</span> $<span class=\"token number\">0</span> <span class=\"token operator\">></span> $<span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sortedNumbers<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// prints: [20, 19, 12, 7]</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"object-and-classes\" style=\"position:relative;\"><a href=\"#object-and-classes\" aria-label=\"object and classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object and Classes</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">class</code> 키워드로 클래스를 생성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> numberOfSides <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">func</span> <span class=\"token function\">simpleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"A shape with <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>numberOfSides<span class=\"token delimiter variable\">)</span></span> sides.\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>클래스 이름에 <code class=\"language-text\">()</code>를 붙여 클래스 인스턴스를 생성할 수 있다. 프로퍼티와 메서드에 접근하기 위해서는 <code class=\"language-text\">.</code> 문법을 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NamedShape</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> numberOfSides<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">func</span> <span class=\"token function\">simpleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"A shape with <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>numberOfSides<span class=\"token delimiter variable\">)</span></span> sides.\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>인스턴스 생성과 함께 값을 초기화할 때는 <code class=\"language-text\">init</code> 메서드를 정의하는 것으로 생성자를 구현할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NamedShape</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> numberOfSides<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function\">simpleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"A <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>name<span class=\"token delimiter variable\">)</span></span> shape with <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>numberOfSides<span class=\"token delimiter variable\">)</span></span> sides.\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> rectangle <span class=\"token operator\">=</span> <span class=\"token function\">NamedShape</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Rectangle\"</span><span class=\"token punctuation\">)</span>\nrectangle<span class=\"token punctuation\">.</span>numberOfSides <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>rectangle<span class=\"token punctuation\">.</span><span class=\"token function\">simpleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// prints: \"A Rectangle shape with 4 sides.\"</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">self</code> 키워드는 인스턴스 자기 자신을 가르키는 용도로 사용된다.</li>\n<li><code class=\"language-text\">deinit</code> 메서드를 정의하면 인스턴스가 할당 해제될 때의 작업을 정의할 수 있다.</li>\n<li><code class=\"language-text\">Subclass</code>는 자신의 상위 클래스이름을 클래스 선언 뒤에 붙여주는 것으로 정의할 수 있다.</li>\n<li>\n<p><code class=\"language-text\">overrride</code> 키워드를 사용하면 상위 클래스에서 정의된 메서드를 재정의할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">NamedShape</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// NamedShape 의 subclass</span>\n  <span class=\"token keyword\">var</span> sideLength<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span>\n\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>sideLength<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>sideLength <span class=\"token operator\">=</span> sideLength\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">)</span>\n      numberOfSides <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">func</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Double</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> sideLength <span class=\"token operator\">*</span> sideLength\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function\">simpleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"A square with sides of length <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>sideLength<span class=\"token delimiter variable\">)</span></span>\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> test <span class=\"token operator\">=</span> <span class=\"token function\">Square</span><span class=\"token punctuation\">(</span>sideLength<span class=\"token punctuation\">:</span> <span class=\"token number\">5.2</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Square\"</span><span class=\"token punctuation\">)</span>\ntest<span class=\"token punctuation\">.</span><span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntest<span class=\"token punctuation\">.</span><span class=\"token function\">simpleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>클래스의 프로퍼티에 대한 getter 와 setter 를 정의할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">EquilateralTriangle</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">NamedShape</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> sideLength<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span>\n\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>sideLength<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>sideLength <span class=\"token operator\">=</span> sideLength\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">)</span>\n      numberOfSides <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">var</span> perimeter<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token number\">3.0</span> <span class=\"token operator\">*</span> sideLength\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span>\n          sideLength <span class=\"token operator\">=</span> newValue <span class=\"token operator\">/</span> <span class=\"token number\">3.0</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function\">simpleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"An equilateral triangle with sides of length <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>sideLength<span class=\"token delimiter variable\">)</span></span>.\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> triangle <span class=\"token operator\">=</span> <span class=\"token function\">EquilateralTriangle</span><span class=\"token punctuation\">(</span>sideLength<span class=\"token punctuation\">:</span> <span class=\"token number\">3.1</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"a triangle\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>triangle<span class=\"token punctuation\">.</span>perimeter<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"9.3\"</span>\ntriangle<span class=\"token punctuation\">.</span>perimeter <span class=\"token operator\">=</span> <span class=\"token number\">9.9</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>triangle<span class=\"token punctuation\">.</span>sideLength<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"3.3000000000000003\"</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">perimeter</code>는 setter 와 getter를 제공하는 프로퍼티이다.</li>\n<li>\n<p>위 클래스의 인스턴스를 생성하면 초기화는 다음과 같은 과정으로 진행된다.</p>\n<ol>\n<li><code class=\"language-text\">EquilateralTriangle</code> 클래스가 선언한 프로퍼티의 값을 초기화한다. -> sideLength</li>\n<li>상위 클래스인 <code class=\"language-text\">NamedShape</code>의 <code class=\"language-text\">init</code> 메서드를 호출한다.</li>\n<li>상위 클래스에서 선언한 프로퍼티를 초기화 한다.</li>\n</ol>\n</li>\n<li>\n<p>만약 프로퍼티 연산이 필요가 없지만 프로퍼티에 새로운 값이 할당 된 이후에 대한 코드를 작성해야한다면, <code class=\"language-text\">willSet</code> 과 <code class=\"language-text\">didSet</code>을 사용하면 된다. 이렇게 하면 <code class=\"language-text\">init</code> 생성자가 아닌 다른 방법으로 프로퍼티 값이 갱신되었을 때, 연산이 수행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TriangleAndSquare</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">var</span> triangle<span class=\"token punctuation\">:</span> <span class=\"token builtin\">EquilateralTriangle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">willSet</span> <span class=\"token punctuation\">{</span>\n        square<span class=\"token punctuation\">.</span>sideLength <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">.</span>sideLength\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> square<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Square</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">willSet</span> <span class=\"token punctuation\">{</span>\n        triangle<span class=\"token punctuation\">.</span>sideLength <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">.</span>sideLength\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    square <span class=\"token operator\">=</span> <span class=\"token function\">Square</span><span class=\"token punctuation\">(</span>sideLength<span class=\"token punctuation\">:</span> size<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">)</span>\n    triangle <span class=\"token operator\">=</span> <span class=\"token function\">EquilateralTriangle</span><span class=\"token punctuation\">(</span>sideLength<span class=\"token punctuation\">:</span> size<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> triangleAndSquare <span class=\"token operator\">=</span> <span class=\"token function\">TriangleAndSquare</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"another test shape\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>triangleAndSquare<span class=\"token punctuation\">.</span>square<span class=\"token punctuation\">.</span>sideLength<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"10.0\"</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>triangleAndSquare<span class=\"token punctuation\">.</span>triangle<span class=\"token punctuation\">.</span>sideLength<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"10.0\"</span>\ntriangleAndSquare<span class=\"token punctuation\">.</span>square <span class=\"token operator\">=</span> <span class=\"token function\">Square</span><span class=\"token punctuation\">(</span>sideLength<span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"larger square\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>triangleAndSquare<span class=\"token punctuation\">.</span>triangle<span class=\"token punctuation\">.</span>sideLength<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"50.0\"</span></code></pre></div>\n</li>\n<li>\n<p>Optional 을 다룰 때는 메서드 호출, 변수 참조앞에 <code class=\"language-text\">?</code> 를 붙이는 것으로 쉽게 <code class=\"language-text\">nil</code>을 핸들링 할 수 있다. 만약 <code class=\"language-text\">?</code> 앞에 있는 값이 <code class=\"language-text\">nil</code> 이라면 뒤에 따라오는 모든 코드는 무시되고 <code class=\"language-text\">nil</code> 이 값으로 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> optionalSquare<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Square</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token function\">Sqaure</span><span class=\"token punctuation\">(</span>sideLength<span class=\"token punctuation\">:</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"optional\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> sideLength <span class=\"token operator\">=</span> optionalSquare<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>sideLength</code></pre></div>\n</li>\n</ul>\n<h2 id=\"enumerations-and-structures\" style=\"position:relative;\"><a href=\"#enumerations-and-structures\" aria-label=\"enumerations and structures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enumerations and Structures</h2>\n<ul>\n<li>\n<p>enumeration을 만들기 위해서는 <code class=\"language-text\">enum</code> 키워드를 이름 앞에 붙이고 enum을 구성할 요소들의 타잉블 지정해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token builtin\">Rank</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> ace <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">case</span> two<span class=\"token punctuation\">,</span> three<span class=\"token punctuation\">,</span> four<span class=\"token punctuation\">,</span> five<span class=\"token punctuation\">,</span> six<span class=\"token punctuation\">,</span> seven<span class=\"token punctuation\">,</span> eight<span class=\"token punctuation\">,</span> nine<span class=\"token punctuation\">,</span> ten\n  <span class=\"token keyword\">case</span> jack<span class=\"token punctuation\">,</span> queen<span class=\"token punctuation\">,</span> king\n\n  <span class=\"token keyword\">func</span> <span class=\"token function\">simpleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">switch</span> <span class=\"token keyword\">self</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>ace<span class=\"token punctuation\">:</span>\n              <span class=\"token keyword\">return</span> <span class=\"token string\">\"ace\"</span>\n          <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>jack<span class=\"token punctuation\">:</span>\n              <span class=\"token keyword\">return</span> <span class=\"token string\">\"jack\"</span>\n          <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>king<span class=\"token punctuation\">:</span>\n              <span class=\"token keyword\">return</span> <span class=\"token string\">\"king\"</span>\n          <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>queen<span class=\"token punctuation\">:</span>\n              <span class=\"token keyword\">return</span> <span class=\"token string\">\"queen\"</span>\n          <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n              <span class=\"token keyword\">return</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>rawValue<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> ace <span class=\"token operator\">=</span> <span class=\"token builtin\">Rank</span><span class=\"token punctuation\">.</span>ace\n<span class=\"token keyword\">let</span> aceRawValue <span class=\"token operator\">=</span> ace<span class=\"token punctuation\">.</span>rawValue\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ace<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints: \"ace\"</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>aceRawValue<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints: \"1\"</span></code></pre></div>\n</li>\n<li>enum의 요소 값은 기본적으로 0부터 시작해서 오름차순으로 하나씩 증가하여 할당되지만, 요소의 값을 <code class=\"language-text\">직접 지정</code>해주는 것으로 바꿀 수 있다. 위 예시에서는 첫 case 인 ace 를 1로 지정해주어서 1, 2, 3, 4, … 순으로 값이 지정되도록 했다. case 들이 가진 값들에 접근하려면 <code class=\"language-text\">rawValue 프로퍼티</code>를 사용하면 된다.</li>\n<li>\n<p><code class=\"language-text\">init?(rawValue:)</code> 형태로 enumeration의 인스턴스를 만들 수 있다. <code class=\"language-text\">rawValue</code>인자로 주어진 값과 이ㄹ치하는 enum case 를 반환하고, 일치하는 case가 없다면 nil을 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> convertedRank <span class=\"token operator\">=</span> <span class=\"token function\">Rank</span><span class=\"token punctuation\">(</span>rawValue<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> threeDescription <span class=\"token operator\">=</span> convertedRank<span class=\"token punctuation\">.</span><span class=\"token function\">simpleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>case 값들도 하나의 <code class=\"language-text\">값</code>으로 취급된다. 만약 rawValue 가 의미없는 값이라면 rawValue를 사용하지 않고 case 값만 사용해서 처리해도 된다.</li>\n<li>\n<p>아래 예제처럼 raw value를 인스턴스를 <code class=\"language-text\">생성하는 순간에</code> 결정하여 지정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token builtin\">ServerResponse</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token function\">result</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">case</span> <span class=\"token function\">failure</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> success <span class=\"token operator\">=</span> <span class=\"token builtin\">ServerResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">result</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"6:00 am\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"8:09 pm\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> failure <span class=\"token operator\">=</span> <span class=\"token builtin\">ServerResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">failure</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Out of cheese.\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">switch</span> success <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> <span class=\"token punctuation\">.</span><span class=\"token function\">result</span><span class=\"token punctuation\">(</span>sunrise<span class=\"token punctuation\">,</span> sunset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sunrise is at <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>sunrise<span class=\"token delimiter variable\">)</span></span> and sunset is at <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>sunset<span class=\"token delimiter variable\">)</span></span>.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> <span class=\"token punctuation\">.</span><span class=\"token function\">failure</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failure...  <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>message<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">struct</code> 키워드를 사용하면 structure를 만들 수 있다. structure는 클래스와 비슷하지만 class 는 pass-by-reference 로 전달되지만 structure는 <code class=\"language-text\">pass-by-value</code>를 사용한다는 큰 차이점이 있다. 즉, structure는 전달될 때 복사되어 전달된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">Card</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> rank<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Rank</span>\n  <span class=\"token keyword\">var</span> suit<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Suit</span>\n  <span class=\"token keyword\">func</span> <span class=\"token function\">simpleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> \"<span class=\"token builtin\">The</span> \\<span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">.</span><span class=\"token function\">simpleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> of \\<span class=\"token punctuation\">(</span>suit<span class=\"token punctuation\">.</span><span class=\"token function\">simpleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\"\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> threeOfSpades <span class=\"token operator\">=</span> <span class=\"token function\">Card</span><span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>three<span class=\"token punctuation\">,</span> suit<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>spades<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> threeOfSpadesDescription <span class=\"token operator\">=</span> threeOfSpades<span class=\"token punctuation\">.</span><span class=\"token function\">simpleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>threeOfSpadesDescription<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"The 3 of spades\"</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"protocols-and-extensions\" style=\"position:relative;\"><a href=\"#protocols-and-extensions\" aria-label=\"protocols and extensions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Protocols and Extensions</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">protocol</code> 키워드 사용해서 protocol을 선언할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token builtin\">ExampleProtocol</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> simpleDescription<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">class</code>, <code class=\"language-text\">enumeration</code>, <code class=\"language-text\">struct</code> 가 protocol을 adopt 하여 사용할 수 있다.</li>\n<li>structure는 내부 메서드를 통해 내부 데이터를 수정하기 위해서 메서드의 이름 앞에 <code class=\"language-text\">mutating</code> 키워드를 붙여준다.</li>\n<li>\n<p><code class=\"language-text\">extension</code> 키워드를 사용하면 기존에 존재하던 타입에 새로운 메서드나 연산프로퍼티를 추가할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">ExampleProtocol</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> simpleDescription<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"The number <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span><span class=\"token keyword\">self</span><span class=\"token delimiter variable\">)</span></span>\"</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">self</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">42</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">.</span>simpleDescription<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"The number 7\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"error-handling\" style=\"position:relative;\"><a href=\"#error-handling\" aria-label=\"error handling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Error Handling</h2>\n<ul>\n<li>\n<p>error 를 정의하기 위해서는 <code class=\"language-text\">Error</code> protocol을 <code class=\"language-text\">adopt</code> 하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token builtin\">PrinterError</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> outOfPaper\n  <span class=\"token keyword\">case</span> noToner\n  <span class=\"token keyword\">case</span> onFire\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">throw</code> 키워드를 사용해서 오류를 처리하는 방법도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> send <span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> toPrinter printerName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> printerName <span class=\"token operator\">==</span> <span class=\"token string\">\"Never Has Toner\"</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token builtin\">PrinterError</span><span class=\"token punctuation\">.</span>noToner\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"Job Sent\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">do-catch</code> 를 사용하면 throw 된 오류를 처리할 수 있는 로직을 만들 수 있다. do 블록안에 <code class=\"language-text\">try</code> 키워드를 throw 가 있는 메서드의 호출 앞에 붙여주면, Error가 throw 되었을 때 catch 를 실행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> printerResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">:</span> <span class=\"token number\">1440</span><span class=\"token punctuation\">,</span> toPrinter<span class=\"token punctuation\">:</span> <span class=\"token string\">\"AA\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>printerResponse<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token builtin\">PrinterError</span><span class=\"token punctuation\">.</span>onFire <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'll just put this over here, with the rest of the fire.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token keyword\">let</span> printerError <span class=\"token keyword\">as</span> <span class=\"token builtin\">PrinterError</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Printer error: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>printerError<span class=\"token delimiter variable\">)</span></span>.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// prints: \"Job Sent\"</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">try?</code>를 사용해서 결과를 <code class=\"language-text\">optional</code>로 변환할 수 있다. 만약 호출된 함수가 error 를 throw 하면 결과 값을 nil로 저장한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> printerSuccess <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">:</span> <span class=\"token number\">1884</span><span class=\"token punctuation\">,</span> toPrinter<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Mergenthaler\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> printerFailure <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">:</span> <span class=\"token number\">1885</span><span class=\"token punctuation\">,</span> toPrinter<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Never Has Toner\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">defer</code> 를 사용하면 함수 내부에 있는 모든 다른 코드들이 실행된 후에 실행할 코드를 정의할 수 있다. defer 를 사용하면 초기 세팅을 하는 코드 바로 다음에 defer를 선언해서 초기 값을 마지막에 어떻게 처리할지 가독성 좋게 정의할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> fridgeIsOpen <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token keyword\">let</span> fridgeContent <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"milk\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"eggs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"leftovers\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">fridgeContains</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> food<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Bool</span> <span class=\"token punctuation\">{</span>\n  fridgeIsOpen <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token keyword\">defer</span> <span class=\"token punctuation\">{</span>\n      fridgeIsOpen <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> fridgeContent<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>food<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">fridgeContains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>fridgeIsOpen<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"false\"</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"generics\" style=\"position:relative;\"><a href=\"#generics\" aria-label=\"generics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generics</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">generic</code> 함수나 타입을 만들기 위해서는 <code class=\"language-text\">&lt;&gt;</code> 안에 이름을 넣어주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> makeArray<span class=\"token operator\">&lt;</span>item<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>repeating item<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Item</span><span class=\"token punctuation\">,</span> numberOfTimes<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Item</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> result<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Item</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span> <span class=\"token number\">_</span> <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>numberOfTimes <span class=\"token punctuation\">{</span>\n      result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">makeArray</span><span class=\"token punctuation\">(</span>repeating<span class=\"token punctuation\">:</span> <span class=\"token string\">\"knock\"</span><span class=\"token punctuation\">,</span> numberOfTimes<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">where</code> 키워드를 바디 블록 전에 선언해서 요구사항을 정의할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> anyCommonElements<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Sequence</span><span class=\"token punctuation\">,</span> U<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Sequence</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> lhs<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">,</span> <span class=\"token number\">_</span> rhs<span class=\"token punctuation\">:</span> U<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Bool</span>\n  <span class=\"token keyword\">where</span> T<span class=\"token punctuation\">.</span><span class=\"token builtin\">Element</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Equatable</span><span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">.</span><span class=\"token builtin\">Element</span> <span class=\"token operator\">==</span> U<span class=\"token punctuation\">.</span><span class=\"token builtin\">Element</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> lhsItem <span class=\"token keyword\">in</span> lhs <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> rhsItem <span class=\"token keyword\">in</span> rhs <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> lhsItem <span class=\"token operator\">==</span> rhsItem <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n          <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">anyCommonElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>","frontmatter":{"title":"[공식문서로 Swift 공부하기] 2. A Swift Tour","date":"June 21, 2021"}}},"pageContext":{"slug":"/Swift/02-a-swift-tour/","previous":{"fields":{"slug":"/Swift/01-about-swift/"},"frontmatter":{"title":"[공식문서로 Swift 공부하기] 1. About Swift","category":"Swift","draft":false}},"next":{"fields":{"slug":"/Swift/03-the-basics/"},"frontmatter":{"title":"[공식문서로 Swift 공부하기] 3. The Basics","category":"Swift","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}