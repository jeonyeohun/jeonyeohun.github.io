{"componentChunkName":"component---src-templates-blog-post-js","path":"/Operating-Systems/2020-05-25-운영체제-모니터/","result":{"data":{"site":{"siteMetadata":{"title":"Hun's Footsteps 🥷","author":"전여훈","siteUrl":"https://jeonyeohun.github.io","comment":{"disqusShortName":"","utterances":"jeonyeohun/jeonyeohun.github.io"},"sponsor":{"buyMeACoffeeId":"jeonyeohun"}}},"markdownRemark":{"id":"c354c7ce-0fb3-5379-85ea-a7dd566561fa","excerpt":"참고도서: Operating System Concepts (10/E) Abraham Silberschatz, Peter B. Galvin, Greg Gagne 세마포어의 문제점 lock 과 semaphore의 사용은 임계구역 문제를 어느정도 해결해주지만, block 지점을 개발자가 직접 설계해서 구현해야하는 어려움이 있다. 때문에 자칫 잘못하면 세마포어를 잘못 사용해서 잘못된 결과를 만들어낼 수도 있다. 예를 들어 wait() 가 실행되어야 하는 구간에 signal…","html":"<p>참고도서: <em>Operating System Concepts (10/E) Abraham Silberschatz, Peter B. Galvin, Greg Gagne</em></p>\n<h2 id=\"세마포어의-문제점\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"세마포어의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세마포어의 문제점</h2>\n<p>lock 과 semaphore의 사용은 임계구역 문제를 어느정도 해결해주지만, block 지점을 개발자가 직접 설계해서 구현해야하는 어려움이 있다. 때문에 자칫 잘못하면 세마포어를 잘못 사용해서 잘못된 결과를 만들어낼 수도 있다. 예를 들어 wait() 가 실행되어야 하는 구간에 signal()을 실행시켜버리면 동시에 여러 프로세스가 임계구역에 접근할 수 있게되고, sempahore 의 사용이 의미가 없어진다. 혹은 signal() 을 실행시켜야하는 구간에 wait()를 실행시키게되면 어떤 프로세스도 임계구역에 진입하지 못하고 계속 기다리는 데드락 상태가 되어버린다.</p>\n<h2 id=\"모니터\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%8B%88%ED%84%B0\" aria-label=\"모니터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모니터</h2>\n<p>모니터는 세마포어의 문제를 해결하기 위한 <code class=\"language-text\">Abstract Data Type(ADT)</code> 이다. 개발자는 모니터안에 임계구역에 대한 작업을 정의해둘 수 있고, 각 프로세스나 스레드는 한번에 하나씩만 해당 작업에 접근하여 작업을 수행할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">monitor monitor name <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">/* shared variable declarations */</span>\n\n    function <span class=\"token function\">P1</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    funtion <span class=\"token function\">P2</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token function\">initialization_code</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>모니터는 일반적으로 위와 같은 구조를 지니는데, 모니터 내부에 있는 변수들은 외부에서 접근할 수 없고 모니터 내에 정의된 함수를 통해서만 접근이 가능하다. 따라서 개발자는 세마포어처럼 명시적으로 어떤 구간을 정해서 임계구역 접근을 제어하지 않고, 모니터를 통해서 손쉽게 동기화 문제를 해결할 수 있다는 장점이 있다. 근데 이렇게만 하면 단순히 Mutex lock을 이용해 임계구역 진입을 제어하는 것과 다를 바가 없고, deadlock 문제가 여전히 존재하게된다. 따라서 모니터는 <code class=\"language-text\">condition variable</code> 을 사용해서 추가적으로 발생할 수 있는 동기화 문제를 방지한다.</p>\n<h2 id=\"모니터에서의-조건변수conditional-variable-in-monitor\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%8B%88%ED%84%B0%EC%97%90%EC%84%9C%EC%9D%98-%EC%A1%B0%EA%B1%B4%EB%B3%80%EC%88%98conditional-variable-in-monitor\" aria-label=\"모니터에서의 조건변수conditional variable in monitor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모니터에서의 조건변수(Conditional Variable in Monitor)</h2>\n<p>조건 변수는 <code class=\"language-text\">wait</code>과 <code class=\"language-text\">signal</code> 두 가지 연산을 가진다. 세마포어에서 봤던 것과 비슷한 역할을 한다. 만약 <code class=\"language-text\">wait()</code> 이 실행되면, 해당 프로세스는 대기하게 되는데, 다른 프로세스가 <code class=\"language-text\">signal()</code> 을 실행할 때까지 대기하게 된다.</p>\n<p>한가지 생각해보아야 할 점은 wait 이 되어 대기중이던 프로세스가 모니터에 들어온 어떤 다른 프로세스에 의해 signal 되어 모니터에서 작업을 재개할 때, 모니터 안에 두 프로세스가 존재할 수 있다는 것이다. 따라서 우리는 두 가지 방법을 생각해볼 수 있다.</p>\n<ol>\n<li><code class=\"language-text\">Signal-and-Wait</code> : signal 을 보낸 프로세스가 대기하고 다시 시작된 프로세스가 끝나기를 기다린다.</li>\n<li><code class=\"language-text\">Signal-and-Continue</code> : signal 을 보낸 프로세스는 signal 이후에 작업을 계속 진행하고 이 프로세스가 끝나면 signal을 받은 프로세스가 작업을 시작한다.</li>\n</ol>\n<p>두 방법 중 어떤 방법을 택하는지는 모니터를 사용하는 프로그래밍 언어가 어떻게 설계되었는지에 따라 달라진다. 모니터는 high-level language 에서만 지원되기 때문에, Java에서는 단순 명령어 하나로 모니터를 사용할 수 있다.</p>\n<h2 id=\"다시-돌아온-철학자들\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%8B%9C-%EB%8F%8C%EC%95%84%EC%98%A8-%EC%B2%A0%ED%95%99%EC%9E%90%EB%93%A4\" aria-label=\"다시 돌아온 철학자들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다시 돌아온 철학자들</h2>\n<p>그렇다면 deadlock의 발생 위험이 있었던 식사하는 철학자 문제를 모니터를 이용해서 완벽하게 해결해보자. 먼저 이 문제를 해결하기 위해서, 모든 철학자들이 양쪽에 있는 젓가락을 모두 사용 가능해야 젓가락을 집어든다고 가정하자. 그리고 각 철학자들은 멍때리기, 식사 시도하기, 식사하기 세 상태 중 하나를 가져야 하기 때문에 다음과 같이 모니터의 공통 변수를 설정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">enum</span> <span class=\"token punctuation\">{</span>THINKING<span class=\"token punctuation\">,</span> HUNGRY<span class=\"token punctuation\">,</span> EATING<span class=\"token punctuation\">}</span> state<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 철학자는 5명이 있다고 가정했다.</span></code></pre></div>\n<p>어떤 철학자의 상태가 EATING 이 되기 위해서는 자신의 양쪽에 있는 철학자들의 상태가 <code class=\"language-text\">EATING</code> 이면 안된다. 따라서 <code class=\"language-(state[(i + 4) \"> 5] != EATING) &amp;&amp; (state[(i + 1) </code>\n의 조건이 만족될 때만 젓가락을 집어들 수 있다. 이 조건을 모니터에서 사용하게 되면, 어떤 철학자의 상태가 HUNGRY 이고 양쪽에 집어들 수 있는 젓가락이 없을 때, wait()을 통해서 젓가락이 사용가능할 때까징기다리게 할 수 있다.</p>\n<p>그럼 모니터로 구현한 코드를 살펴보자</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp#\"><pre class=\"language-cpp#\"><code class=\"language-cpp#\">monitor DiningPhilosophres{\n    enum {THINKING, HUNGRY, EATING} state[5];\n    condition self[5];\n\n    void pickup(int i){\n        state[i] = HUNGRY;\n        test(i);\n        if (state != EATING)\n            self[i].wait();\n    }\n\n    void putdown (int i){\n        state[i] = THINKING;\n        test((i + 4) % 5);\n        test((i + 1) % 5);\n    }\n\n    void test (int i){\n        if ((state[(i + 4) % 5] != EATING)\n            &amp;&amp; (state[i] == HUNGRY)\n            &amp;&amp; (state[(i + 1) % 5] != EATING)){\n                state[i] = EATING;\n                self[i].signal();\n        }\n    }\n\n    initialization_code (){\n        for (int i = 0 ; i &lt; 5  ; i++)\n            state[i] = THINKING\n    }\n}</code></pre></div>\n<h3 id=\"shared-data\" style=\"position:relative;\"><a href=\"#shared-data\" aria-label=\"shared data permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shared Data</h3>\n<p>가장 먼저 공통변수를 확인해보자 앞서 확인했던 것 처럼 세 상태를 표현하기 위한 <code class=\"language-text\">state</code> 배열이 사용되었다. 그리고 조건변수로 <code class=\"language-text\">self</code> 배열이 사용되었는데, 배열의 각 요소가 각 철학자들의 상태를 변경시킨다.</p>\n<h3 id=\"initialization_code\" style=\"position:relative;\"><a href=\"#initialization_code\" aria-label=\"initialization_code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>initialization_code</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp#\"><pre class=\"language-cpp#\"><code class=\"language-cpp#\">initialization_code (){\n        for (int i = 0 ; i &lt; 5  ; i++)\n            state[i] = THINKING\n    }</code></pre></div>\n<p>모니터 내부에 정의된 함수는 총 네 개의 함수이다. 우선 <code class=\"language-text\">initialization_code</code> 함수를 보자. 가장 처음에는 모든 철학자들의 상태를 <code class=\"language-text\">THINKING</code>으로 초기화 한다. 이 부분에 있어서는 크게 복잡한 것이 없다.</p>\n<h3 id=\"test\" style=\"position:relative;\"><a href=\"#test\" aria-label=\"test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>test</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp#\"><pre class=\"language-cpp#\"><code class=\"language-cpp#\">void test (int i){\n    if ((state[(i + 4) % 5] != EATING)\n        &amp;&amp; (state[i] == HUNGRY)\n        &amp;&amp; (state[(i + 1) % 5] != EATING)){\n            state[i] = EATING;\n            self[i].signal();\n    }\n}</code></pre></div>\n<p>또 다른 함수는 자신의 주변에 있는 철학자들의 상태를 확인하는 함수이다. 조건문이 조금 복잡하게 얽혀있는데 하나씩 쪼개어서 보자.</p>\n<ol>\n<li><code class=\"language-(state[(i + 4) \"> 5] != EATING</code> : 자신의 왼쪽에 있는 철학자가 EATING 상태에 있는지 확인한다.</li>\n<li><code class=\"language-text\">state[i] == HUNGRY</code> : 자기자신이 HUNGRY 상태인지 확인한다.</li>\n<li><code class=\"language-state[(i + 1) \"> 5] != EATING)</code> : 자신의 오른쪽에 있는 철학자가 EATING 상태에 있는지 확인한다.</li>\n</ol>\n<p>세 조건을 모두 확인했을 때 왼쪽과 오른쪽에 있는 철학자들이 모두 <code class=\"language-text\">EATING</code> 상태가 아니고 자기 자신이 <code class=\"language-text\">HUNGRY</code> 상태라면 식사할 수 있는 조건이 만족되기 때문에 식사를 시작하기 위해 자기 자신의 state를 바꾸고 signal 함수를 실행해서 작업을 시작시킨다.</p>\n<h3 id=\"pickup\" style=\"position:relative;\"><a href=\"#pickup\" aria-label=\"pickup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pickup</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp#\"><pre class=\"language-cpp#\"><code class=\"language-cpp#\">void pickup(int i){\n    state[i] = HUNGRY;\n    test(i);\n    if (state != EATING)\n        self[i].wait();\n}</code></pre></div>\n<p>pickup 함수는 젓가락을 들기위한 함수이다. 먼저 젓가락을 들기위해 자기자신의 state 를 <code class=\"language-text\">HUNGRY</code>로 변경한다. 그리고 test 를 실행해서 양쪽에 있는 젓가락을 들 수 있는 상태인지 확인한다. 만약 양쪽 젓가락을 모두 들 수 있다면, test 함수에서 해당 철학자의 상태가 <code class=\"language-text\">EATING</code> 으로 변경되기 때문에 pickup은 성공한채로 함수를 종료시킨다. 하지만 만약 젓가락을 들 수 없는 상태였다면 철학자의 상태가 변경되지 않고 <code class=\"language-text\">HUNGRY</code>로 남아있기 때문에 자기 자신에게 wait 을 실행해서 signal 을 기다리며 대기하는 상태가 된다.</p>\n<h3 id=\"putdown\" style=\"position:relative;\"><a href=\"#putdown\" aria-label=\"putdown permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>putdown</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp#\"><pre class=\"language-cpp#\"><code class=\"language-cpp#\">void putdown (int i){\n    state[i] = THINKING;\n    test((i + 4) % 5);\n    test((i + 1) % 5);\n}</code></pre></div>\n<p>putdown 함수는 식사를 마치고 젓가락을 내려놓게 하는 함수이다. 이 함수가 실행되면, 해당 철학자의 상태는 <code class=\"language-text\">THINKING</code> 으로 변경되고, 왼쪽과 오른쪽 사람에 대해 각각 test 함수를 실행하게 된다. 이미 자기자신은 <code class=\"language-text\">THINKING</code> 상태가 되어 EATING 상태가 아니기 때문에, 만약 왼쪽이나 오른쪽에 signal을 기다리며 대기중이던 철학자가 있다면 test 를 통해 해당 철학자를 깨울 수 있게된다. 이 작업을 통해서 어떤 철학자가 식사를 마쳤을 때, 양 옆에 있는 철학자의 대기상태를 확인하게 되기 때문에, deadlock 문제를 해결할 수 있게 된다.</p>","frontmatter":{"title":"[운영체제] 모니터(Monitor)","date":"May 25, 2020"}}},"pageContext":{"slug":"/Operating-Systems/2020-05-25-운영체제-모니터/","previous":{"fields":{"slug":"/Operating-Systems/2020-05-21-운영체제-Readers-Wirters-문제/"},"frontmatter":{"title":"[운영체제] 고전적 동기화 문제-2 : 독자와 저자 문제(The Readers-Writers Problem)","category":"Operating-Systems","draft":false}},"next":{"fields":{"slug":"/Operating-Systems/2020-05-28-운영체제-데드락조건/"},"frontmatter":{"title":"[운영체제] 교착상태의 발생조건(Necessary Conditions of Deadlock)","category":"Operating-Systems","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}