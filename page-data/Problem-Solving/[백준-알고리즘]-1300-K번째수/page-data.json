{"componentChunkName":"component---src-templates-blog-post-js","path":"/Problem-Solving/[백준-알고리즘]-1300-K번째수/","result":{"data":{"site":{"siteMetadata":{"title":"Hun's Footsteps 🥷","author":"전여훈","siteUrl":"https://jeonyeohun.github.io","comment":{"disqusShortName":"","utterances":"jeonyeohun/jeonyeohun.github.io"},"sponsor":{"buyMeACoffeeId":"jeonyeohun"}}},"markdownRemark":{"id":"430ecc2d-8c89-54ac-b9e7-cb0a7fa23ca9","excerpt":"https://www.acmicpc.net/problem/1300 문제 세준이는 크기가 N×N인 배열 A를 만들었다. 배열에 들어있는 수 Ai = i×j 이다. 이 수를 일차원 배열 B에 넣으면 B의 크기는 N×N이 된다. B를 오름차순 정렬했을 때, Bk를 구해보자. 배열 A와 B의 인덱스는 1부터 시작한다. 풀이 이분탐색을 하기위해 찾아야할 값을 target으로 두고, 이 값보다 작은 수가 얼마나 나오는지를 확인해서 k값보다 개수가 작다면 mid를 올려주고, k값보다 크다면 mid…","html":"<blockquote>\n<p><a href=\"https://www.acmicpc.net/problem/1300\">https://www.acmicpc.net/problem/1300</a></p>\n</blockquote>\n<h2 id=\"문제\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h2>\n<p>세준이는 크기가 N×N인 배열 A를 만들었다. 배열에 들어있는 수 A[i][j] = i×j 이다. 이 수를 일차원 배열 B에 넣으면 B의 크기는 N×N이 된다. B를 오름차순 정렬했을 때, B[k]를 구해보자.</p>\n<p>배열 A와 B의 인덱스는 1부터 시작한다.</p>\n<h2 id=\"풀이\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이</h2>\n<p>이분탐색을 하기위해 찾아야할 값을 target으로 두고, 이 값보다 작은 수가 얼마나 나오는지를 확인해서 k값보다 개수가 작다면 mid를 올려주고, k값보다 크다면 mid를 내려주는 방법을 사용하기로 했다. 그런데 k보다 작은 수의 개수를 배열전체를 계산하지 않고 찾는 로직이 잘 생각나지 않았다. 그래서 구글링을 해봤는데, 허무하게도 그냥 수학이었다.</p>\n<p>각 i 행에 대해서 target보다 작은 수를 찾으려면 <code class=\"language-text\">min(N, target / i)</code> 를 하면된다. <code class=\"language-text\">i * j &lt;= target</code> 을 단순하게 이항시킨 것이다. <code class=\"language-text\">j &lt;= target / i</code> 를 통해 개수를 쉽게 알아낼 수 있다.</p>\n<p>한가지 또 신경써야하는 것은 이분탐색으로 얻은 target값이 배열에 존재하지 않을 수 았다는 것이다. 따라서, target보다 작은 값이 k개와 일치하는 값이 나오더라도 바로 탐색을 끝내지 않고, 실제로 존재하는 값에 도달할 때까지 진행해주어야 한다.</p>\n<h2 id=\"코드\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C\" aria-label=\"코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\nll <span class=\"token function\">countValid</span><span class=\"token punctuation\">(</span>ll N<span class=\"token punctuation\">,</span> ll target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ll count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> N <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        count <span class=\"token operator\">+=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> target <span class=\"token operator\">/</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nll <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>ll start<span class=\"token punctuation\">,</span> ll end<span class=\"token punctuation\">,</span> ll target<span class=\"token punctuation\">,</span> ll N<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ll ans <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        ll mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        ll count <span class=\"token operator\">=</span> <span class=\"token function\">countValid</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            start <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            ans <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            end <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ios_base<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    ll N<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> N <span class=\"token operator\">>></span> k<span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> N<span class=\"token operator\">*</span>N<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"[백준 알고리즘] 1759번: 오큰수","date":"July 11, 2021"}}},"pageContext":{"slug":"/Problem-Solving/[백준-알고리즘]-1300-K번째수/","previous":{"fields":{"slug":"/Problem-Solving/[백준-알고리즘]-17298번-오큰수/"},"frontmatter":{"title":"[백준 알고리즘] 1759번: 오큰수","category":"Problem-Solving","draft":false}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}